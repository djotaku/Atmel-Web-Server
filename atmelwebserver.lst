
AVRASM ver. 1.52  atmelwebserver.asm Wed Apr 27 11:28:56 2005


         ;CodeVisionAVR C Compiler V1.23.8d Standard
         ;(C) Copyright 1998-2003 HP InfoTech s.r.l.
         ;http://www.hpinfotech.ro
         ;e-mail:office@hpinfotech.ro
         
         ;Chip type           : ATmega32
         ;Program type        : Application
         ;Clock frequency     : 16.000000 MHz
         ;Memory model        : Small
         ;Optimize for        : Size
         ;(s)printf features  : int
         ;(s)scanf features   : int, width
         ;External SRAM size  : 0
         ;Data Stack size     : 512
         ;Promote char to int : No
         ;char is unsigned    : Yes
         ;8 bit enums         : No
         ;Enhanced core instructions    : On
         ;Automatic register allocation : On
         ;Use AVR Studio Terminal I/O   : No
         
          	.LISTMAC
          	.EQU UDRE=0x5
          	.EQU RXC=0x7
          	.EQU USR=0xB
          	.EQU UDR=0xC
          	.EQU EERE=0x0
          	.EQU EEWE=0x1
          	.EQU EEMWE=0x2
          	.EQU SPSR=0xE
          	.EQU SPDR=0xF
          	.EQU EECR=0x1C
          	.EQU EEDR=0x1D
          	.EQU EEARL=0x1E
          	.EQU EEARH=0x1F
          	.EQU WDTCR=0x21
          	.EQU MCUCR=0x35
          	.EQU GICR=0x3B
          	.EQU SPL=0x3D
          	.EQU SPH=0x3E
          	.EQU SREG=0x3F
         
          	.DEF R0X0=R0
          	.DEF R0X1=R1
          	.DEF R0X2=R2
          	.DEF R0X3=R3
          	.DEF R0X4=R4
          	.DEF R0X5=R5
          	.DEF R0X6=R6
          	.DEF R0X7=R7
          	.DEF R0X8=R8
          	.DEF R0X9=R9
          	.DEF R0XA=R10
          	.DEF R0XB=R11
          	.DEF R0XC=R12
          	.DEF R0XD=R13
          	.DEF R0XE=R14
          	.DEF R0XF=R15
          	.DEF R0X10=R16
          	.DEF R0X11=R17
          	.DEF R0X12=R18
          	.DEF R0X13=R19
          	.DEF R0X14=R20
          	.DEF R0X15=R21
          	.DEF R0X16=R22
          	.DEF R0X17=R23
          	.DEF R0X18=R24
          	.DEF R0X19=R25
          	.DEF R0X1A=R26
          	.DEF R0X1B=R27
          	.DEF R0X1C=R28
          	.DEF R0X1D=R29
          	.DEF R0X1E=R30
          	.DEF R0X1F=R31
         
          	.EQU __se_bit=0x80
          	.EQU __sm_mask=0x30
          	.EQU __sm_powerdown=0x20
         
          	.MACRO __CPD1N
          	CPI  R30,LOW(@0)
          	LDI  R26,HIGH(@0)
          	CPC  R31,R26
          	LDI  R26,BYTE3(@0)
          	CPC  R22,R26
          	LDI  R26,BYTE4(@0)
          	CPC  R23,R26
          	.ENDM
         
          	.MACRO __CPD2N
          	CPI  R26,LOW(@0)
          	LDI  R30,HIGH(@0)
          	CPC  R27,R30
          	LDI  R30,BYTE3(@0)
          	CPC  R24,R30
          	LDI  R30,BYTE4(@0)
          	CPC  R25,R30
          	.ENDM
         
          	.MACRO __CPWRR
          	CP   R@0,R@2
          	CPC  R@1,R@3
          	.ENDM
         
          	.MACRO __CPWRN
          	CPI  R@0,LOW(@2)
          	LDI  R30,HIGH(@2)
          	CPC  R@1,R30
          	.ENDM
         
          	.MACRO __ADDD1N
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	SBCI R22,BYTE3(-@0)
          	SBCI R23,BYTE4(-@0)
          	.ENDM
         
          	.MACRO __ADDD2N
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	SBCI R24,BYTE3(-@0)
          	SBCI R25,BYTE4(-@0)
          	.ENDM
         
          	.MACRO __SUBD1N
          	SUBI R30,LOW(@0)
          	SBCI R31,HIGH(@0)
          	SBCI R22,BYTE3(@0)
          	SBCI R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __SUBD2N
          	SUBI R26,LOW(@0)
          	SBCI R27,HIGH(@0)
          	SBCI R24,BYTE3(@0)
          	SBCI R25,BYTE4(@0)
          	.ENDM
         
          	.MACRO __ANDD1N
          	ANDI R30,LOW(@0)
          	ANDI R31,HIGH(@0)
          	ANDI R22,BYTE3(@0)
          	ANDI R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __ORD1N
          	ORI  R30,LOW(@0)
          	ORI  R31,HIGH(@0)
          	ORI  R22,BYTE3(@0)
          	ORI  R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __DELAY_USB
          	LDI  R24,LOW(@0)
          __DELAY_USB_LOOP:
          	DEC  R24
          	BRNE __DELAY_USB_LOOP
          	.ENDM
         
          	.MACRO __DELAY_USW
          	LDI  R24,LOW(@0)
          	LDI  R25,HIGH(@0)
          __DELAY_USW_LOOP:
          	SBIW R24,1
          	BRNE __DELAY_USW_LOOP
          	.ENDM
         
          	.MACRO __CLRD1S
          	CLR  R30
          	STD  Y+@0,R30
          	STD  Y+@0+1,R30
          	STD  Y+@0+2,R30
          	STD  Y+@0+3,R30
          	.ENDM
         
          	.MACRO __GETD1S
          	LDD  R30,Y+@0
          	LDD  R31,Y+@0+1
          	LDD  R22,Y+@0+2
          	LDD  R23,Y+@0+3
          	.ENDM
         
          	.MACRO __PUTD1S
          	STD  Y+@0,R30
          	STD  Y+@0+1,R31
          	STD  Y+@0+2,R22
          	STD  Y+@0+3,R23
          	.ENDM
         
          	.MACRO __POINTB1MN
          	LDI  R30,LOW(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW1MN
          	LDI  R30,LOW(@0+@1)
          	LDI  R31,HIGH(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW1FN
          	LDI  R30,LOW(2*@0+@1)
          	LDI  R31,HIGH(2*@0+@1)
          	.ENDM
         
          	.MACRO __POINTB2MN
          	LDI  R26,LOW(@0+@1)
          	.ENDM
         
          	.MACRO __POINTW2MN
          	LDI  R26,LOW(@0+@1)
          	LDI  R27,HIGH(@0+@1)
          	.ENDM
         
          	.MACRO __GETD1N
          	LDI  R30,LOW(@0)
          	LDI  R31,HIGH(@0)
          	LDI  R22,BYTE3(@0)
          	LDI  R23,BYTE4(@0)
          	.ENDM
         
          	.MACRO __GETD2N
          	LDI  R26,LOW(@0)
          	LDI  R27,HIGH(@0)
          	LDI  R24,BYTE3(@0)
          	LDI  R25,BYTE4(@0)
          	.ENDM
         
          	.MACRO __GETD2S
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	LDD  R24,Y+@0+2
          	LDD  R25,Y+@0+3
          	.ENDM
         
          	.MACRO __GETB1MN
          	LDS  R30,@0+@1
          	.ENDM
         
          	.MACRO __GETW1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	.ENDM
         
          	.MACRO __GETD1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	LDS  R22,@0+@1+2
          	LDS  R23,@0+@1+3
          	.ENDM
         
          	.MACRO __GETBRMN
          	LDS  R@2,@0+@1
          	.ENDM
         
          	.MACRO __GETWRMN
          	LDS  R@2,@0+@1
          	LDS  R@3,@0+@1+1
          	.ENDM
         
          	.MACRO __GETB2MN
          	LDS  R26,@0+@1
          	.ENDM
         
          	.MACRO __GETW2MN
          	LDS  R26,@0+@1
          	LDS  R27,@0+@1+1
          	.ENDM
         
          	.MACRO __GETD2MN
          	LDS  R26,@0+@1
          	LDS  R27,@0+@1+1
          	LDS  R24,@0+@1+2
          	LDS  R25,@0+@1+3
          	.ENDM
         
          	.MACRO __PUTB1MN
          	STS  @0+@1,R30
          	.ENDM
         
          	.MACRO __PUTW1MN
          	STS  @0+@1,R30
          	STS  @0+@1+1,R31
          	.ENDM
         
          	.MACRO __PUTD1MN
          	STS  @0+@1,R30
          	STS  @0+@1+1,R31
          	STS  @0+@1+2,R22
          	STS  @0+@1+3,R23
          	.ENDM
         
          	.MACRO __PUTBMRN
          	STS  @0+@1,R@2
          	.ENDM
         
          	.MACRO __PUTWMRN
          	STS  @0+@1,R@2
          	STS  @0+@1+1,R@3
          	.ENDM
         
          	.MACRO __GETW1R
          	MOV  R30,R@0
          	MOV  R31,R@1
          	.ENDM
         
          	.MACRO __GETW2R
          	MOV  R26,R@0
          	MOV  R27,R@1
          	.ENDM
         
          	.MACRO __GETWRN
          	LDI  R@0,LOW(@2)
          	LDI  R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __PUTW1R
          	MOV  R@0,R30
          	MOV  R@1,R31
          	.ENDM
         
          	.MACRO __PUTW2R
          	MOV  R@0,R26
          	MOV  R@1,R27
          	.ENDM
         
          	.MACRO __ADDWRN
          	SUBI R@0,LOW(-@2)
          	SBCI R@1,HIGH(-@2)
          	.ENDM
         
          	.MACRO __ADDWRR
          	ADD  R@0,R@2
          	ADC  R@1,R@3
          	.ENDM
         
          	.MACRO __SUBWRN
          	SUBI R@0,LOW(@2)
          	SBCI R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __SUBWRR
          	SUB  R@0,R@2
          	SBC  R@1,R@3
          	.ENDM
         
          	.MACRO __ANDWRN
          	ANDI R@0,LOW(@2)
          	ANDI R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __ANDWRR
          	AND  R@0,R@2
          	AND  R@1,R@3
          	.ENDM
         
          	.MACRO __ORWRN
          	ORI  R@0,LOW(@2)
          	ORI  R@1,HIGH(@2)
          	.ENDM
         
          	.MACRO __ORWRR
          	OR   R@0,R@2
          	OR   R@1,R@3
          	.ENDM
         
          	.MACRO __EORWRR
          	EOR  R@0,R@2
          	EOR  R@1,R@3
          	.ENDM
         
          	.MACRO __GETWRS
          	LDD  R@0,Y+@2
          	LDD  R@1,Y+@2+1
          	.ENDM
         
          	.MACRO __PUTWSR
          	STD  Y+@2,R@0
          	STD  Y+@2+1,R@1
          	.ENDM
         
          	.MACRO __MOVEWRR
          	MOV  R@0,R@2
          	MOV  R@1,R@3
          	.ENDM
         
          	.MACRO __INWR
          	IN   R@0,@2
          	IN   R@1,@2+1
          	.ENDM
         
          	.MACRO __OUTWR
          	OUT  @2+1,R@1
          	OUT  @2,R@0
          	.ENDM
         
          	.MACRO __CALL1MN
          	LDS  R30,@0+@1
          	LDS  R31,@0+@1+1
          	ICALL
          	.ENDM
         
          	.MACRO __NBST
          	BST  R@0,@1
          	IN   R30,SREG
          	LDI  R31,0x40
          	EOR  R30,R31
          	OUT  SREG,R30
          	.ENDM
         
         
          	.MACRO __PUTB1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SN
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	CALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SNS
          	LDD  R26,Y+@0
          	LDD  R27,Y+@0+1
          	ADIW R26,@1
          	CALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1PMN
          	LDS  R26,@0
          	LDS  R27,@0+1
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	CALL __PUTDP1
          	.ENDM
         
          	.MACRO __PUTB1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1PMNS
          	LDS  R26,@0
          	LDS  R27,@0+1
          	ADIW R26,@1
          	CALL __PUTDP1
          	.ENDM
         
          	.MACRO __GETB1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R30,Z
          	.ENDM
         
          	.MACRO __GETW1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R0,Z+
          	LD   R31,Z
          	MOV  R30,R0
          	.ENDM
         
          	.MACRO __GETD1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R0,Z+
          	LD   R1,Z+
          	LD   R22,Z+
          	LD   R23,Z
          	MOVW R30,R0
          	.ENDM
         
          	.MACRO __GETB2SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R26,X
          	.ENDM
         
          	.MACRO __GETW2SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	.ENDM
         
          	.MACRO __GETD2SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R1,X+
          	LD   R24,X+
          	LD   R25,X
          	MOVW R26,R0
          	.ENDM
         
          	.MACRO __GETBRSX
          	MOVW R30,R28
          	SUBI R30,LOW(-@1)
          	SBCI R31,HIGH(-@1)
          	LD   R@0,Z
          	.ENDM
         
          	.MACRO __GETWRSX
          	MOVW R30,R28
          	SUBI R30,LOW(-@2)
          	SBCI R31,HIGH(-@2)
          	LD   R@0,Z+
          	LD   R@1,Z
          	.ENDM
         
          	.MACRO __LSLW8SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	LD   R31,Z
          	CLR  R30
          	.ENDM
         
          	.MACRO __PUTB1SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	ST   X+,R30
          	ST   X+,R31
          	ST   X+,R22
          	ST   X,R23
          	.ENDM
         
          	.MACRO __CLRW1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	CLR  R0
          	ST   Z+,R0
          	ST   Z,R0
          	.ENDM
         
          	.MACRO __CLRD1SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	CLR  R0
          	ST   Z+,R0
          	ST   Z+,R0
          	ST   Z+,R0
          	ST   Z,R0
          	.ENDM
         
          	.MACRO __PUTB2SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z,R26
          	.ENDM
         
          	.MACRO __PUTW2SX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z+,R26
          	ST   Z,R27
          	.ENDM
         
          	.MACRO __PUTBSRX
          	MOVW R30,R28
          	SUBI R30,LOW(-@0)
          	SBCI R31,HIGH(-@0)
          	ST   Z,R@1
          	.ENDM
         
          	.MACRO __PUTWSRX
          	MOVW R30,R28
          	SUBI R30,LOW(-@2)
          	SBCI R31,HIGH(-@2)
          	ST   Z+,R@0
          	ST   Z,R@1
          	.ENDM
         
          	.MACRO __PUTB1SNX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X,R30
          	.ENDM
         
          	.MACRO __PUTW1SNX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X,R31
          	.ENDM
         
          	.MACRO __PUTD1SNX
          	MOVW R26,R28
          	SUBI R26,LOW(-@0)
          	SBCI R27,HIGH(-@0)
          	LD   R0,X+
          	LD   R27,X
          	MOV  R26,R0
          	SUBI R26,LOW(-@1)
          	SBCI R27,HIGH(-@1)
          	ST   X+,R30
          	ST   X+,R31
          	ST   X+,R22
          	ST   X,R23
          	.ENDM
         
          	.MACRO __MULBRR
          	MULS R@0,R@1
          	MOV  R30,R0
          	.ENDM
         
          	.MACRO __MULBRRU
          	MUL  R@0,R@1
          	MOV  R30,R0
          	.ENDM
         
          	.CSEG
          	.ORG 0
         
          	.INCLUDE "atmelwebserver.vec"
         
         ;INTERRUPT VECTORS
000000 940c 06b7 	JMP  __RESET
000002 940c 0000 	JMP  0
000004 940c 0000 	JMP  0
000006 940c 0000 	JMP  0
000008 940c 0000 	JMP  0
00000a 940c 0000 	JMP  0
00000c 940c 0000 	JMP  0
00000e 940c 0000 	JMP  0
000010 940c 0000 	JMP  0
000012 940c 0000 	JMP  0
000014 940c 12cf 	JMP  _t0_cmp
000016 940c 0000 	JMP  0
000018 940c 0000 	JMP  0
00001a 940c 0000 	JMP  0
00001c 940c 0000 	JMP  0
00001e 940c 0000 	JMP  0
000020 940c 0000 	JMP  0
000022 940c 0000 	JMP  0
000024 940c 0000 	JMP  0
000026 940c 0000 	JMP  0
000028 940c 0000 	JMP  0
         
          	.INCLUDE "atmelwebserver.inc"
          	.DEF _page_size=R4
          __index:
          	.DW  _index
00002a 0260
          	.DW  0x2
00002b 0002
          	.DW  (__index)*2+0x06
00002c 005a
          	.DB  0x48,0x54,0x54,0x50,0x2F,0x31,0x2E,0x30
00002d 5448
00002e 5054
00002f 312f
000030 302e
          	.DB  0x20,0x32,0x30,0x30,0x20,0x4F,0x4B,0xD
000031 3220
000032 3030
000033 4f20
000034 0d4b
          	.DB  0xA,0x53,0x65,0x72,0x76,0x65,0x72,0x3A
000035 530a
000036 7265
000037 6576
000038 3a72
          	.DB  0x20,0x4B,0x69,0x63,0x6B,0x41,0x73,0x73
000039 4b20
00003a 6369
00003b 416b
00003c 7373
          	.DB  0x20,0x53,0x65,0x72,0x76,0x65,0x72,0xD
00003d 5320
00003e 7265
00003f 6576
000040 0d72
          	.DB  0xA,0x43,0x6F,0x6E,0x74,0x65,0x6E,0x74
000041 430a
000042 6e6f
000043 6574
000044 746e
          	.DB  0x2D,0x74,0x79,0x70,0x65,0x3A,0x20,0x74
000045 742d
000046 7079
000047 3a65
000048 7420
          	.DB  0x65,0x78,0x74,0x2F,0x68,0x74,0x6D,0x6C
000049 7865
00004a 2f74
00004b 7468
00004c 6c6d
          	.DB  0xD,0xA,0xD,0xA,0x3C,0x68,0x74,0x6D
00004d 0a0d
00004e 0a0d
00004f 683c
000050 6d74
          	.DB  0x6C,0x3E,0x3C,0x68,0x65,0x61,0x64,0x3E
000051 3e6c
000052 683c
000053 6165
000054 3e64
          	.DB  0x3C,0x6D,0x65,0x74,0x61,0x20,0x48,0x54
000055 6d3c
000056 7465
000057 2061
000058 5448
          	.DB  0x54,0x50,0x2D,0x45,0x51,0x55,0x49,0x56
000059 5054
00005a 452d
00005b 5551
00005c 5649
          	.DB  0x3D,0x22,0x63,0x6F,0x6E,0x74,0x65,0x6E
00005d 223d
00005e 6f63
00005f 746e
000060 6e65
          	.DB  0x74,0x2D,0x74,0x79,0x70,0x65,0x22,0x20
000061 2d74
000062 7974
000063 6570
000064 2022
          	.DB  0x43,0x4F,0x4E,0x54,0x45,0x4E,0x54,0x3D
000065 4f43
000066 544e
000067 4e45
000068 3d54
          	.DB  0x22,0x74,0x65,0x78,0x74,0x2F,0x68,0x74
000069 7422
00006a 7865
00006b 2f74
00006c 7468
          	.DB  0x6D,0x6C,0x3B,0x20,0x63,0x68,0x61,0x72
00006d 6c6d
00006e 203b
00006f 6863
000070 7261
          	.DB  0x73,0x65,0x74,0x3D,0x69,0x73,0x6F,0x2D
000071 6573
000072 3d74
000073 7369
000074 2d6f
          	.DB  0x38,0x38,0x35,0x39,0x2D,0x31,0x22,0x3E
000075 3838
000076 3935
000077 312d
000078 3e22
          	.DB  0x3C,0x74,0x69,0x74,0x6C,0x65,0x3E,0x69
000079 743c
00007a 7469
00007b 656c
00007c 693e
          	.DB  0x6E,0x64,0x65,0x78,0x3C,0x2F,0x74,0x69
00007d 646e
00007e 7865
00007f 2f3c
000080 6974
          	.DB  0x74,0x6C,0x65,0x3E,0x3C,0x6C,0x69,0x6E
000081 6c74
000082 3e65
000083 6c3c
000084 6e69
          	.DB  0x6B,0x20,0x72,0x65,0x6C,0x3D,0x22,0x73
000085 206b
000086 6572
000087 3d6c
000088 7322
          	.DB  0x68,0x6F,0x72,0x74,0x63,0x75,0x74,0x20
000089 6f68
00008a 7472
00008b 7563
00008c 2074
          	.DB  0x69,0x63,0x6F,0x6E,0x22,0x20,0x68,0x72
00008d 6369
00008e 6e6f
00008f 2022
000090 7268
          	.DB  0x65,0x66,0x3D,0x22,0x2F,0x66,0x61,0x76
000091 6665
000092 223d
000093 662f
000094 7661
          	.DB  0x69,0x63,0x6F,0x6E,0x2E,0x69,0x63,0x6F
000095 6369
000096 6e6f
000097 692e
000098 6f63
          	.DB  0x22,0x20,0x74,0x79,0x70,0x65,0x3D,0x22
000099 2022
00009a 7974
00009b 6570
00009c 223d
          	.DB  0x69,0x6D,0x61,0x67,0x65,0x2F,0x78,0x2D
00009d 6d69
00009e 6761
00009f 2f65
0000a0 2d78
          	.DB  0x69,0x63,0x6F,0x6E,0x22,0x20,0x3E,0x3C
0000a1 6369
0000a2 6e6f
0000a3 2022
0000a4 3c3e
          	.DB  0x2F,0x68,0x65,0x61,0x64,0x3E,0x3C,0x62
0000a5 682f
0000a6 6165
0000a7 3e64
0000a8 623c
          	.DB  0x6F,0x64,0x79,0x3E,0x3C,0x68,0x31,0x3E
0000a9 646f
0000aa 3e79
0000ab 683c
0000ac 3e31
          	.DB  0x41,0x74,0x6D,0x65,0x6C,0x20,0x4D,0x65
0000ad 7441
0000ae 656d
0000af 206c
0000b0 654d
          	.DB  0x67,0x61,0x33,0x32,0x20,0x57,0x65,0x62
0000b1 6167
0000b2 3233
0000b3 5720
0000b4 6265
          	.DB  0x73,0x65,0x72,0x76,0x65,0x72,0x3C,0x2F
0000b5 6573
0000b6 7672
0000b7 7265
0000b8 2f3c
          	.DB  0x68,0x31,0x3E,0x3C,0x62,0x72,0x20,0x2F
0000b9 3168
0000ba 3c3e
0000bb 7262
0000bc 2f20
          	.DB  0x3E,0x3C,0x61,0x20,0x68,0x72,0x65,0x66
0000bd 3c3e
0000be 2061
0000bf 7268
0000c0 6665
          	.DB  0x3D,0x22,0x61,0x62,0x6F,0x75,0x74,0x2E
0000c1 223d
0000c2 6261
0000c3 756f
0000c4 2e74
          	.DB  0x68,0x74,0x6D,0x6C,0x22,0x3E,0x62,0x79
0000c5 7468
0000c6 6c6d
0000c7 3e22
0000c8 7962
          	.DB  0x20,0x45,0x72,0x69,0x63,0x20,0x4D,0x65
0000c9 4520
0000ca 6972
0000cb 2063
0000cc 654d
          	.DB  0x73,0x61,0x20,0x61,0x6E,0x64,0x20,0x52
0000cd 6173
0000ce 6120
0000cf 646e
0000d0 5220
          	.DB  0x69,0x63,0x68,0x61,0x72,0x64,0x20,0x57
0000d1 6369
0000d2 6168
0000d3 6472
0000d4 5720
          	.DB  0x65,0x73,0x74,0x3C,0x2F,0x61,0x3E,0x3C
0000d5 7365
0000d6 3c74
0000d7 612f
0000d8 3c3e
          	.DB  0x2F,0x68,0x31,0x3E,0x3C,0x62,0x72,0x3E
0000d9 682f
0000da 3e31
0000db 623c
0000dc 3e72
          	.DB  0x62,0x61,0x73,0x65,0x64,0x20,0x6F,0x6E
0000dd 6162
0000de 6573
0000df 2064
0000e0 6e6f
          	.DB  0x20,0x73,0x6F,0x75,0x72,0x63,0x65,0x20
0000e1 7320
0000e2 756f
0000e3 6372
0000e4 2065
          	.DB  0x63,0x6F,0x64,0x65,0x20,0x62,0x79,0x20
0000e5 6f63
0000e6 6564
0000e7 6220
0000e8 2079
          	.DB  0x4A,0x65,0x72,0x65,0x6D,0x79,0x20,0x54
0000e9 654a
0000ea 6572
0000eb 796d
0000ec 5420
          	.DB  0x61,0x6E,0x3C,0x62,0x72,0x3E,0x3C,0x68
0000ed 6e61
0000ee 623c
0000ef 3e72
0000f0 683c
          	.DB  0x32,0x3E,0x53,0x6F,0x75,0x6E,0x64,0x20
0000f1 3e32
0000f2 6f53
0000f3 6e75
0000f4 2064
          	.DB  0x42,0x69,0x74,0x65,0x3C,0x2F,0x68,0x32
0000f5 6942
0000f6 6574
0000f7 2f3c
0000f8 3268
          	.DB  0x3E,0x3C,0x62,0x72,0x3E,0x4F,0x75,0x72
0000f9 3c3e
0000fa 7262
0000fb 4f3e
0000fc 7275
          	.DB  0x20,0x70,0x72,0x6F,0x6A,0x65,0x63,0x74
0000fd 7020
0000fe 6f72
0000ff 656a
000100 7463
          	.DB  0x20,0x69,0x73,0x20,0x61,0x20,0x66,0x75
000101 6920
000102 2073
000103 2061
000104 7566
          	.DB  0x6C,0x6C,0x79,0x20,0x77,0x65,0x62,0x2D
000105 6c6c
000106 2079
000107 6577
000108 2d62
          	.DB  0x73,0x74,0x61,0x6E,0x64,0x61,0x72,0x64
000109 7473
00010a 6e61
00010b 6164
00010c 6472
          	.DB  0x73,0x20,0x63,0x6F,0x6D,0x70,0x6C,0x69
00010d 2073
00010e 6f63
00010f 706d
000110 696c
          	.DB  0x61,0x6E,0x74,0x20,0x77,0x65,0x62,0x73
000111 6e61
000112 2074
000113 6577
000114 7362
          	.DB  0x65,0x72,0x76,0x65,0x72,0x20,0x72,0x75
000115 7265
000116 6576
000117 2072
000118 7572
          	.DB  0x6E,0x6E,0x69,0x6E,0x67,0x20,0x6F,0x6E
000119 6e6e
00011a 6e69
00011b 2067
00011c 6e6f
          	.DB  0x20,0x61,0x6E,0x20,0x41,0x74,0x6D,0x65
00011d 6120
00011e 206e
00011f 7441
000120 656d
          	.DB  0x6C,0x20,0x4D,0x65,0x67,0x61,0x33,0x32
000121 206c
000122 654d
000123 6167
000124 3233
          	.DB  0x2E,0x3C,0x68,0x32,0x3E,0x53,0x75,0x6D
000125 3c2e
000126 3268
000127 533e
000128 6d75
          	.DB  0x6D,0x61,0x72,0x79,0x3C,0x2F,0x68,0x32
000129 616d
00012a 7972
00012b 2f3c
00012c 3268
          	.DB  0x3E,0x55,0x73,0x69,0x6E,0x67,0x20,0x63
00012d 553e
00012e 6973
00012f 676e
000130 6320
          	.DB  0x6F,0x64,0x65,0x20,0x66,0x72,0x6F,0x6D
000131 646f
000132 2065
000133 7266
000134 6d6f
          	.DB  0x20,0x67,0x72,0x61,0x64,0x75,0x61,0x74
000135 6720
000136 6172
000137 7564
000138 7461
          	.DB  0x65,0x20,0x73,0x74,0x75,0x64,0x65,0x6E
000139 2065
00013a 7473
00013b 6475
00013c 6e65
          	.DB  0x74,0x20,0x4A,0x65,0x72,0x65,0x6D,0x79
00013d 2074
00013e 654a
00013f 6572
000140 796d
          	.DB  0x20,0x54,0x7A,0x65,0x6D,0x69,0x6E,0x67
000141 5420
000142 657a
000143 696d
000144 676e
          	.DB  0x20,0x54,0x61,0x6E,0x2C,0x20,0x77,0x65
000145 5420
000146 6e61
000147 202c
000148 6577
          	.DB  0x20,0x69,0x6D,0x70,0x72,0x6F,0x76,0x65
000149 6920
00014a 706d
00014b 6f72
00014c 6576
          	.DB  0x64,0x20,0x75,0x70,0x6F,0x6E,0x20,0x68
00014d 2064
00014e 7075
00014f 6e6f
000150 6820
          	.DB  0x69,0x73,0x20,0x77,0x65,0x62,0x73,0x65
000151 7369
000152 7720
000153 6265
000154 6573
          	.DB  0x72,0x76,0x65,0x72,0x20,0x73,0x6F,0x75
000155 7672
000156 7265
000157 7320
000158 756f
          	.DB  0x72,0x63,0x65,0x20,0x63,0x6F,0x64,0x65
000159 6372
00015a 2065
00015b 6f63
00015c 6564
          	.DB  0x20,0x62,0x79,0x20,0x6D,0x61,0x6B,0x69
00015d 6220
00015e 2079
00015f 616d
000160 696b
          	.DB  0x6E,0x67,0x20,0x69,0x74,0x20,0x6D,0x6F
000161 676e
000162 6920
000163 2074
000164 6f6d
          	.DB  0x72,0x65,0x20,0x66,0x75,0x6C,0x6C,0x79
000165 6572
000166 6620
000167 6c75
000168 796c
          	.DB  0x20,0x63,0x6F,0x6D,0x70,0x6C,0x69,0x61
000169 6320
00016a 6d6f
00016b 6c70
00016c 6169
          	.DB  0x6E,0x74,0x20,0x77,0x69,0x74,0x68,0x20
00016d 746e
00016e 7720
00016f 7469
000170 2068
          	.DB  0x49,0x6E,0x74,0x65,0x72,0x6E,0x65,0x74
000171 6e49
000172 6574
000173 6e72
000174 7465
          	.DB  0x20,0x53,0x74,0x61,0x6E,0x64,0x61,0x72
000175 5320
000176 6174
000177 646e
000178 7261
          	.DB  0x64,0x73,0x2E,0x20,0x20,0x41,0x64,0x64
000179 7364
00017a 202e
00017b 4120
00017c 6464
          	.DB  0x69,0x74,0x69,0x6F,0x6E,0x61,0x6C,0x6C
00017d 7469
00017e 6f69
00017f 616e
000180 6c6c
          	.DB  0x79,0x2C,0x20,0x77,0x65,0x20,0x6D,0x6F
000181 2c79
000182 7720
000183 2065
000184 6f6d
          	.DB  0x64,0x75,0x6C,0x61,0x72,0x69,0x7A,0x65
000185 7564
000186 616c
000187 6972
000188 657a
          	.DB  0x64,0x20,0x68,0x69,0x73,0x20,0x63,0x6F
000189 2064
00018a 6968
00018b 2073
00018c 6f63
          	.DB  0x64,0x65,0x20,0x66,0x6F,0x72,0x20,0x65
00018d 6564
00018e 6620
00018f 726f
000190 6520
          	.DB  0x61,0x73,0x65,0x72,0x20,0x6D,0x61,0x69
000191 7361
000192 7265
000193 6d20
000194 6961
          	.DB  0x6E,0x74,0x65,0x6E,0x61,0x6E,0x63,0x65
000195 746e
000196 6e65
000197 6e61
000198 6563
          	.DB  0x2C,0x20,0x64,0x6F,0x63,0x75,0x6D,0x65
000199 202c
00019a 6f64
00019b 7563
00019c 656d
          	.DB  0x6E,0x74,0x61,0x74,0x69,0x6F,0x6E,0x2C
00019d 746e
00019e 7461
00019f 6f69
0001a0 2c6e
          	.DB  0x20,0x61,0x6E,0x64,0x20,0x69,0x6D,0x70
0001a1 6120
0001a2 646e
0001a3 6920
0001a4 706d
          	.DB  0x6C,0x65,0x6D,0x65,0x6E,0x74,0x61,0x74
0001a5 656c
0001a6 656d
0001a7 746e
0001a8 7461
          	.DB  0x69,0x6F,0x6E,0x2E,0x3C,0x61,0x20,0x68
0001a9 6f69
0001aa 2e6e
0001ab 613c
0001ac 6820
          	.DB  0x72,0x65,0x66,0x3D,0x22,0x69,0x6E,0x64
0001ad 6572
0001ae 3d66
0001af 6922
0001b0 646e
          	.DB  0x65,0x78,0x32,0x2E,0x68,0x74,0x6D,0x6C
0001b1 7865
0001b2 2e32
0001b3 7468
0001b4 6c6d
          	.DB  0x22,0x3E,0x6E,0x65,0x78,0x74,0x3C,0x2F
0001b5 3e22
0001b6 656e
0001b7 7478
0001b8 2f3c
          	.DB  0x61,0x3E,0x3C,0x2F,0x62,0x6F,0x64,0x79
0001b9 3e61
0001ba 2f3c
0001bb 6f62
0001bc 7964
          	.DB  0x3E,0x3C,0x2F,0x68,0x74,0x6D,0x6C,0x3E
0001bd 3c3e
0001be 682f
0001bf 6d74
0001c0 3e6c
          	.DB  0xD,0xA,0xD,0xA,0x0
0001c1 0a0d
0001c2 0a0d
0001c3 0000
          __index2:
          	.DW  _index2
0001c4 0262
          	.DW  0x2
0001c5 0002
          	.DW  (__index2)*2+0x06
0001c6 038e
          	.DB  0x48,0x54,0x54,0x50,0x2F,0x31,0x2E,0x30
0001c7 5448
0001c8 5054
0001c9 312f
0001ca 302e
          	.DB  0x20,0x32,0x30,0x30,0x20,0x4F,0x4B,0xD
0001cb 3220
0001cc 3030
0001cd 4f20
0001ce 0d4b
          	.DB  0xA,0x53,0x65,0x72,0x76,0x65,0x72,0x3A
0001cf 530a
0001d0 7265
0001d1 6576
0001d2 3a72
          	.DB  0x20,0x4B,0x69,0x63,0x6B,0x41,0x73,0x73
0001d3 4b20
0001d4 6369
0001d5 416b
0001d6 7373
          	.DB  0x20,0x53,0x65,0x72,0x76,0x65,0x72,0xD
0001d7 5320
0001d8 7265
0001d9 6576
0001da 0d72
          	.DB  0xA,0x43,0x6F,0x6E,0x74,0x65,0x6E,0x74
0001db 430a
0001dc 6e6f
0001dd 6574
0001de 746e
          	.DB  0x2D,0x74,0x79,0x70,0x65,0x3A,0x20,0x74
0001df 742d
0001e0 7079
0001e1 3a65
0001e2 7420
          	.DB  0x65,0x78,0x74,0x2F,0x68,0x74,0x6D,0x6C
0001e3 7865
0001e4 2f74
0001e5 7468
0001e6 6c6d
          	.DB  0xD,0xA,0xD,0xA,0x3C,0x68,0x74,0x6D
0001e7 0a0d
0001e8 0a0d
0001e9 683c
0001ea 6d74
          	.DB  0x6C,0x3E,0x3C,0x68,0x65,0x61,0x64,0x3E
0001eb 3e6c
0001ec 683c
0001ed 6165
0001ee 3e64
          	.DB  0x3C,0x6D,0x65,0x74,0x61,0x20,0x48,0x54
0001ef 6d3c
0001f0 7465
0001f1 2061
0001f2 5448
          	.DB  0x54,0x50,0x2D,0x45,0x51,0x55,0x49,0x56
0001f3 5054
0001f4 452d
0001f5 5551
0001f6 5649
          	.DB  0x3D,0x22,0x63,0x6F,0x6E,0x74,0x65,0x6E
0001f7 223d
0001f8 6f63
0001f9 746e
0001fa 6e65
          	.DB  0x74,0x2D,0x74,0x79,0x70,0x65,0x22,0x20
0001fb 2d74
0001fc 7974
0001fd 6570
0001fe 2022
          	.DB  0x43,0x4F,0x4E,0x54,0x45,0x4E,0x54,0x3D
0001ff 4f43
000200 544e
000201 4e45
000202 3d54
          	.DB  0x22,0x74,0x65,0x78,0x74,0x2F,0x68,0x74
000203 7422
000204 7865
000205 2f74
000206 7468
          	.DB  0x6D,0x6C,0x3B,0x20,0x63,0x68,0x61,0x72
000207 6c6d
000208 203b
000209 6863
00020a 7261
          	.DB  0x73,0x65,0x74,0x3D,0x69,0x73,0x6F,0x2D
00020b 6573
00020c 3d74
00020d 7369
00020e 2d6f
          	.DB  0x38,0x38,0x35,0x39,0x2D,0x31,0x22,0x3E
00020f 3838
000210 3935
000211 312d
000212 3e22
          	.DB  0x3C,0x74,0x69,0x74,0x6C,0x65,0x3E,0x69
000213 743c
000214 7469
000215 656c
000216 693e
          	.DB  0x6E,0x64,0x65,0x78,0x32,0x3C,0x2F,0x74
000217 646e
000218 7865
000219 3c32
00021a 742f
          	.DB  0x69,0x74,0x6C,0x65,0x3E,0x3C,0x6C,0x69
00021b 7469
00021c 656c
00021d 3c3e
00021e 696c
          	.DB  0x6E,0x6B,0x20,0x72,0x65,0x6C,0x3D,0x22
00021f 6b6e
000220 7220
000221 6c65
000222 223d
          	.DB  0x73,0x68,0x6F,0x72,0x74,0x63,0x75,0x74
000223 6873
000224 726f
000225 6374
000226 7475
          	.DB  0x20,0x69,0x63,0x6F,0x6E,0x22,0x20,0x68
000227 6920
000228 6f63
000229 226e
00022a 6820
          	.DB  0x72,0x65,0x66,0x3D,0x22,0x2F,0x66,0x61
00022b 6572
00022c 3d66
00022d 2f22
00022e 6166
          	.DB  0x76,0x69,0x63,0x6F,0x6E,0x2E,0x69,0x63
00022f 6976
000230 6f63
000231 2e6e
000232 6369
          	.DB  0x6F,0x22,0x20,0x74,0x79,0x70,0x65,0x3D
000233 226f
000234 7420
000235 7079
000236 3d65
          	.DB  0x22,0x69,0x6D,0x61,0x67,0x65,0x2F,0x78
000237 6922
000238 616d
000239 6567
00023a 782f
          	.DB  0x2D,0x69,0x63,0x6F,0x6E,0x22,0x20,0x3E
00023b 692d
00023c 6f63
00023d 226e
00023e 3e20
          	.DB  0x3C,0x2F,0x68,0x65,0x61,0x64,0x3E,0x3C
00023f 2f3c
000240 6568
000241 6461
000242 3c3e
          	.DB  0x62,0x6F,0x64,0x79,0x3E,0x42,0x79,0x20
000243 6f62
000244 7964
000245 423e
000246 2079
          	.DB  0x73,0x70,0x6C,0x69,0x74,0x74,0x69,0x6E
000247 7073
000248 696c
000249 7474
00024a 6e69
          	.DB  0x67,0x20,0x75,0x70,0x20,0x74,0x68,0x65
00024b 2067
00024c 7075
00024d 7420
00024e 6568
          	.DB  0x20,0x63,0x6F,0x64,0x65,0x2C,0x20,0x69
00024f 6320
000250 646f
000251 2c65
000252 6920
          	.DB  0x6E,0x73,0x74,0x65,0x61,0x64,0x20,0x6F
000253 736e
000254 6574
000255 6461
000256 6f20
          	.DB  0x66,0x20,0x6B,0x65,0x65,0x70,0x69,0x6E
000257 2066
000258 656b
000259 7065
00025a 6e69
          	.DB  0x67,0x20,0x61,0x6C,0x6C,0x20,0x32,0x30
00025b 2067
00025c 6c61
00025d 206c
00025e 3032
          	.DB  0x30,0x30,0x20,0x6C,0x69,0x6E,0x65,0x73
00025f 3030
000260 6c20
000261 6e69
000262 7365
          	.DB  0x20,0x69,0x6E,0x20,0x6F,0x6E,0x65,0x20
000263 6920
000264 206e
000265 6e6f
000266 2065
          	.DB  0x66,0x69,0x6C,0x65,0x2C,0x20,0x73,0x6F
000267 6966
000268 656c
000269 202c
00026a 6f73
          	.DB  0x6D,0x65,0x6F,0x6E,0x65,0x20,0x77,0x68
00026b 656d
00026c 6e6f
00026d 2065
00026e 6877
          	.DB  0x6F,0x20,0x77,0x69,0x73,0x68,0x65,0x73
00026f 206f
000270 6977
000271 6873
000272 7365
          	.DB  0x20,0x74,0x6F,0x20,0x6D,0x61,0x69,0x6E
000273 7420
000274 206f
000275 616d
000276 6e69
          	.DB  0x74,0x61,0x69,0x6E,0x20,0x61,0x20,0x73
000277 6174
000278 6e69
000279 6120
00027a 7320
          	.DB  0x70,0x65,0x63,0x69,0x66,0x69,0x63,0x20
00027b 6570
00027c 6963
00027d 6966
00027e 2063
          	.DB  0x66,0x75,0x6E,0x63,0x74,0x69,0x6F,0x6E
00027f 7566
000280 636e
000281 6974
000282 6e6f
          	.DB  0x20,0x77,0x6F,0x75,0x6C,0x64,0x6E,0x27
000283 7720
000284 756f
000285 646c
000286 276e
          	.DB  0x74,0x20,0x68,0x61,0x76,0x65,0x20,0x74
000287 2074
000288 6168
000289 6576
00028a 7420
          	.DB  0x6F,0x20,0x68,0x75,0x6E,0x74,0x20,0x66
00028b 206f
00028c 7568
00028d 746e
00028e 6620
          	.DB  0x6F,0x72,0x20,0x69,0x74,0x20,0x74,0x68
00028f 726f
000290 6920
000291 2074
000292 6874
          	.DB  0x72,0x6F,0x75,0x67,0x68,0x6F,0x75,0x74
000293 6f72
000294 6775
000295 6f68
000296 7475
          	.DB  0x20,0x74,0x68,0x65,0x20,0x66,0x69,0x6C
000297 7420
000298 6568
000299 6620
00029a 6c69
          	.DB  0x65,0x2E,0x20,0x20,0x44,0x6F,0x63,0x75
00029b 2e65
00029c 2020
00029d 6f44
00029e 7563
          	.DB  0x6D,0x65,0x6E,0x74,0x61,0x74,0x69,0x6F
00029f 656d
0002a0 746e
0002a1 7461
0002a2 6f69
          	.DB  0x6E,0x20,0x6F,0x66,0x20,0x65,0x61,0x63
0002a3 206e
0002a4 666f
0002a5 6520
0002a6 6361
          	.DB  0x68,0x20,0x6F,0x66,0x20,0x74,0x68,0x65
0002a7 2068
0002a8 666f
0002a9 7420
0002aa 6568
          	.DB  0x20,0x66,0x69,0x6C,0x65,0x73,0x20,0x69
0002ab 6620
0002ac 6c69
0002ad 7365
0002ae 6920
          	.DB  0x73,0x20,0x6D,0x61,0x64,0x65,0x20,0x65
0002af 2073
0002b0 616d
0002b1 6564
0002b2 6520
          	.DB  0x61,0x73,0x69,0x65,0x72,0x20,0x62,0x79
0002b3 7361
0002b4 6569
0002b5 2072
0002b6 7962
          	.DB  0x20,0x73,0x70,0x6C,0x69,0x74,0x74,0x69
0002b7 7320
0002b8 6c70
0002b9 7469
0002ba 6974
          	.DB  0x6E,0x67,0x20,0x74,0x68,0x65,0x6D,0x20
0002bb 676e
0002bc 7420
0002bd 6568
0002be 206d
          	.DB  0x75,0x70,0x20,0x62,0x65,0x63,0x61,0x75
0002bf 7075
0002c0 6220
0002c1 6365
0002c2 7561
          	.DB  0x73,0x65,0x20,0x61,0x20,0x6C,0x6F,0x74
0002c3 6573
0002c4 6120
0002c5 6c20
0002c6 746f
          	.DB  0x20,0x6D,0x6F,0x72,0x65,0x20,0x64,0x6F
0002c7 6d20
0002c8 726f
0002c9 2065
0002ca 6f64
          	.DB  0x63,0x75,0x6D,0x65,0x6E,0x74,0x61,0x74
0002cb 7563
0002cc 656d
0002cd 746e
0002ce 7461
          	.DB  0x69,0x6F,0x6E,0x20,0x63,0x61,0x6E,0x20
0002cf 6f69
0002d0 206e
0002d1 6163
0002d2 206e
          	.DB  0x65,0x78,0x69,0x73,0x74,0x20,0x61,0x74
0002d3 7865
0002d4 7369
0002d5 2074
0002d6 7461
          	.DB  0x20,0x74,0x68,0x65,0x20,0x74,0x6F,0x69
0002d7 7420
0002d8 6568
0002d9 7420
0002da 696f
          	.DB  0x70,0x20,0x6F,0x66,0x20,0x65,0x61,0x63
0002db 2070
0002dc 666f
0002dd 6520
0002de 6361
          	.DB  0x68,0x20,0x6F,0x66,0x20,0x74,0x68,0x65
0002df 2068
0002e0 666f
0002e1 7420
0002e2 6568
          	.DB  0x20,0x66,0x69,0x6C,0x65,0x73,0x2E,0x20
0002e3 6620
0002e4 6c69
0002e5 7365
0002e6 202e
          	.DB  0x20,0x46,0x49,0x6E,0x61,0x6C,0x6C,0x79
0002e7 4620
0002e8 6e49
0002e9 6c61
0002ea 796c
          	.DB  0x2C,0x20,0x77,0x65,0x20,0x68,0x61,0x76
0002eb 202c
0002ec 6577
0002ed 6820
0002ee 7661
          	.DB  0x65,0x20,0x2C,0x20,0x74,0x68,0x65,0x72
0002ef 2065
0002f0 202c
0002f1 6874
0002f2 7265
          	.DB  0x65,0x66,0x6F,0x72,0x65,0x2C,0x20,0x62
0002f3 6665
0002f4 726f
0002f5 2c65
0002f6 6220
          	.DB  0x75,0x69,0x6C,0x74,0x20,0x75,0x70,0x20
0002f7 6975
0002f8 746c
0002f9 7520
0002fa 2070
          	.DB  0x61,0x20,0x6C,0x69,0x62,0x72,0x61,0x72
0002fb 2061
0002fc 696c
0002fd 7262
0002fe 7261
          	.DB  0x79,0x20,0x6F,0x66,0x20,0x49,0x6E,0x74
0002ff 2079
000300 666f
000301 4920
000302 746e
          	.DB  0x65,0x72,0x6E,0x65,0x74,0x20,0x70,0x72
000303 7265
000304 656e
000305 2074
000306 7270
          	.DB  0x6F,0x74,0x6F,0x63,0x6F,0x6C,0x73,0x2E
000307 746f
000308 636f
000309 6c6f
00030a 2e73
          	.DB  0x20,0x20,0x53,0x6F,0x6D,0x65,0x6F,0x6E
00030b 2020
00030c 6f53
00030d 656d
00030e 6e6f
          	.DB  0x65,0x20,0x65,0x6C,0x73,0x65,0x20,0x6D
00030f 2065
000310 6c65
000311 6573
000312 6d20
          	.DB  0x61,0x79,0x20,0x74,0x61,0x6B,0x65,0x20
000313 7961
000314 7420
000315 6b61
000316 2065
          	.DB  0x6F,0x75,0x72,0x20,0x6C,0x69,0x62,0x72
000317 756f
000318 2072
000319 696c
00031a 7262
          	.DB  0x61,0x72,0x79,0x20,0x66,0x69,0x6C,0x65
00031b 7261
00031c 2079
00031d 6966
00031e 656c
          	.DB  0x73,0x20,0x61,0x6E,0x64,0x20,0x69,0x6D
00031f 2073
000320 6e61
000321 2064
000322 6d69
          	.DB  0x70,0x6C,0x65,0x6D,0x65,0x6E,0x74,0x20
000323 6c70
000324 6d65
000325 6e65
000326 2074
          	.DB  0x6F,0x6E,0x6C,0x79,0x20,0x74,0x68,0x6F
000327 6e6f
000328 796c
000329 7420
00032a 6f68
          	.DB  0x73,0x65,0x20,0x70,0x72,0x6F,0x74,0x6F
00032b 6573
00032c 7020
00032d 6f72
00032e 6f74
          	.DB  0x63,0x6F,0x6C,0x73,0x20,0x77,0x68,0x69
00032f 6f63
000330 736c
000331 7720
000332 6968
          	.DB  0x63,0x68,0x20,0x61,0x72,0x65,0x20,0x69
000333 6863
000334 6120
000335 6572
000336 6920
          	.DB  0x6D,0x70,0x6F,0x72,0x74,0x61,0x6E,0x74
000337 706d
000338 726f
000339 6174
00033a 746e
          	.DB  0x20,0x74,0x6F,0x20,0x74,0x68,0x61,0x74
00033b 7420
00033c 206f
00033d 6874
00033e 7461
          	.DB  0x20,0x73,0x70,0x65,0x63,0x69,0x66,0x69
00033f 7320
000340 6570
000341 6963
000342 6966
          	.DB  0x63,0x20,0x70,0x72,0x6F,0x6A,0x65,0x63
000343 2063
000344 7270
000345 6a6f
000346 6365
          	.DB  0x74,0x20,0x69,0x6E,0x73,0x74,0x65,0x61
000347 2074
000348 6e69
000349 7473
00034a 6165
          	.DB  0x64,0x20,0x6F,0x66,0x20,0x68,0x61,0x76
00034b 2064
00034c 666f
00034d 6820
00034e 7661
          	.DB  0x69,0x6E,0x67,0x20,0x74,0x6F,0x20,0x69
00034f 6e69
000350 2067
000351 6f74
000352 6920
          	.DB  0x6D,0x70,0x6C,0x65,0x6D,0x65,0x6E,0x74
000353 706d
000354 656c
000355 656d
000356 746e
          	.DB  0x20,0x61,0x20,0x66,0x75,0x6C,0x6C,0x2D
000357 6120
000358 6620
000359 6c75
00035a 2d6c
          	.DB  0x62,0x6C,0x6F,0x77,0x6E,0x20,0x77,0x65
00035b 6c62
00035c 776f
00035d 206e
00035e 6577
          	.DB  0x62,0x73,0x65,0x72,0x76,0x65,0x72,0x2E
00035f 7362
000360 7265
000361 6576
000362 2e72
          	.DB  0x3C,0x2F,0x62,0x6F,0x64,0x79,0x3E,0x3C
000363 2f3c
000364 6f62
000365 7964
000366 3c3e
          	.DB  0x2F,0x68,0x74,0x6D,0x6C,0x3E,0xD,0xA
000367 682f
000368 6d74
000369 3e6c
00036a 0a0d
          	.DB  0xD,0xA,0x0
00036b 0a0d
00036c 0000
          __about:
          	.DW  _about
00036d 0264
          	.DW  0x2
00036e 0002
          	.DW  (__about)*2+0x06
00036f 06e0
          	.DB  0x48,0x54,0x54,0x50,0x2F,0x31,0x2E,0x30
000370 5448
000371 5054
000372 312f
000373 302e
          	.DB  0x20,0x32,0x30,0x30,0x20,0x4F,0x4B,0xD
000374 3220
000375 3030
000376 4f20
000377 0d4b
          	.DB  0xA,0x53,0x65,0x72,0x76,0x65,0x72,0x3A
000378 530a
000379 7265
00037a 6576
00037b 3a72
          	.DB  0x20,0x4B,0x69,0x63,0x6B,0x41,0x73,0x73
00037c 4b20
00037d 6369
00037e 416b
00037f 7373
          	.DB  0x20,0x53,0x65,0x72,0x76,0x65,0x72,0xD
000380 5320
000381 7265
000382 6576
000383 0d72
          	.DB  0xA,0x43,0x6F,0x6E,0x74,0x65,0x6E,0x74
000384 430a
000385 6e6f
000386 6574
000387 746e
          	.DB  0x2D,0x74,0x79,0x70,0x65,0x3A,0x20,0x74
000388 742d
000389 7079
00038a 3a65
00038b 7420
          	.DB  0x65,0x78,0x74,0x2F,0x68,0x74,0x6D,0x6C
00038c 7865
00038d 2f74
00038e 7468
00038f 6c6d
          	.DB  0xD,0xA,0xD,0xA,0x3C,0x68,0x74,0x6D
000390 0a0d
000391 0a0d
000392 683c
000393 6d74
          	.DB  0x6C,0x3E,0x3C,0x68,0x65,0x61,0x64,0x3E
000394 3e6c
000395 683c
000396 6165
000397 3e64
          	.DB  0x3C,0x6D,0x65,0x74,0x61,0x20,0x48,0x54
000398 6d3c
000399 7465
00039a 2061
00039b 5448
          	.DB  0x54,0x50,0x2D,0x45,0x51,0x55,0x49,0x56
00039c 5054
00039d 452d
00039e 5551
00039f 5649
          	.DB  0x3D,0x22,0x63,0x6F,0x6E,0x74,0x65,0x6E
0003a0 223d
0003a1 6f63
0003a2 746e
0003a3 6e65
          	.DB  0x74,0x2D,0x74,0x79,0x70,0x65,0x22,0x20
0003a4 2d74
0003a5 7974
0003a6 6570
0003a7 2022
          	.DB  0x43,0x4F,0x4E,0x54,0x45,0x4E,0x54,0x3D
0003a8 4f43
0003a9 544e
0003aa 4e45
0003ab 3d54
          	.DB  0x22,0x74,0x65,0x78,0x74,0x2F,0x68,0x74
0003ac 7422
0003ad 7865
0003ae 2f74
0003af 7468
          	.DB  0x6D,0x6C,0x3B,0x20,0x63,0x68,0x61,0x72
0003b0 6c6d
0003b1 203b
0003b2 6863
0003b3 7261
          	.DB  0x73,0x65,0x74,0x3D,0x69,0x73,0x6F,0x2D
0003b4 6573
0003b5 3d74
0003b6 7369
0003b7 2d6f
          	.DB  0x38,0x38,0x35,0x39,0x2D,0x31,0x22,0x3E
0003b8 3838
0003b9 3935
0003ba 312d
0003bb 3e22
          	.DB  0x3C,0x74,0x69,0x74,0x6C,0x65,0x3E,0x61
0003bc 743c
0003bd 7469
0003be 656c
0003bf 613e
          	.DB  0x62,0x6F,0x75,0x74,0x3C,0x2F,0x74,0x69
0003c0 6f62
0003c1 7475
0003c2 2f3c
0003c3 6974
          	.DB  0x74,0x6C,0x65,0x3E,0x3C,0x6C,0x69,0x6E
0003c4 6c74
0003c5 3e65
0003c6 6c3c
0003c7 6e69
          	.DB  0x6B,0x20,0x72,0x65,0x6C,0x3D,0x22,0x73
0003c8 206b
0003c9 6572
0003ca 3d6c
0003cb 7322
          	.DB  0x68,0x6F,0x72,0x74,0x63,0x75,0x74,0x20
0003cc 6f68
0003cd 7472
0003ce 7563
0003cf 2074
          	.DB  0x69,0x63,0x6F,0x6E,0x22,0x20,0x68,0x72
0003d0 6369
0003d1 6e6f
0003d2 2022
0003d3 7268
          	.DB  0x65,0x66,0x3D,0x22,0x2F,0x66,0x61,0x76
0003d4 6665
0003d5 223d
0003d6 662f
0003d7 7661
          	.DB  0x69,0x63,0x6F,0x6E,0x2E,0x69,0x63,0x6F
0003d8 6369
0003d9 6e6f
0003da 692e
0003db 6f63
          	.DB  0x22,0x20,0x74,0x79,0x70,0x65,0x3D,0x22
0003dc 2022
0003dd 7974
0003de 6570
0003df 223d
          	.DB  0x69,0x6D,0x61,0x67,0x65,0x2F,0x78,0x2D
0003e0 6d69
0003e1 6761
0003e2 2f65
0003e3 2d78
          	.DB  0x69,0x63,0x6F,0x6E,0x22,0x20,0x3E,0x3C
0003e4 6369
0003e5 6e6f
0003e6 2022
0003e7 3c3e
          	.DB  0x2F,0x68,0x65,0x61,0x64,0x3E,0x3C,0x62
0003e8 682f
0003e9 6165
0003ea 3e64
0003eb 623c
          	.DB  0x6F,0x64,0x79,0x3E,0x45,0x72,0x69,0x63
0003ec 646f
0003ed 3e79
0003ee 7245
0003ef 6369
          	.DB  0x20,0x61,0x6E,0x64,0x20,0x52,0x69,0x63
0003f0 6120
0003f1 646e
0003f2 5220
0003f3 6369
          	.DB  0x68,0x61,0x72,0x64,0x2C,0x20,0x61,0x6C
0003f4 6168
0003f5 6472
0003f6 202c
0003f7 6c61
          	.DB  0x73,0x6F,0x20,0x6B,0x6E,0x6F,0x77,0x6E
0003f8 6f73
0003f9 6b20
0003fa 6f6e
0003fb 6e77
          	.DB  0x20,0x61,0x73,0x20,0x74,0x68,0x65,0x20
0003fc 6120
0003fd 2073
0003fe 6874
0003ff 2065
          	.DB  0x4B,0x69,0x6E,0x67,0x73,0x20,0x6F,0x66
000400 694b
000401 676e
000402 2073
000403 666f
          	.DB  0x20,0x41,0x74,0x6D,0x65,0x6C,0x2C,0x20
000404 4120
000405 6d74
000406 6c65
000407 202c
          	.DB  0x68,0x61,0x76,0x65,0x20,0x74,0x61,0x6B
000408 6168
000409 6576
00040a 7420
00040b 6b61
          	.DB  0x65,0x6E,0x20,0x73,0x6F,0x6D,0x65,0x20
00040c 6e65
00040d 7320
00040e 6d6f
00040f 2065
          	.DB  0x74,0x69,0x6D,0x65,0x20,0x6F,0x75,0x74
000410 6974
000411 656d
000412 6f20
000413 7475
          	.DB  0x20,0x6F,0x66,0x20,0x74,0x68,0x65,0x69
000414 6f20
000415 2066
000416 6874
000417 6965
          	.DB  0x72,0x20,0x62,0x75,0x73,0x79,0x20,0x73
000418 2072
000419 7562
00041a 7973
00041b 7320
          	.DB  0x63,0x68,0x65,0x64,0x75,0x6C,0x65,0x20
00041c 6863
00041d 6465
00041e 6c75
00041f 2065
          	.DB  0x74,0x6F,0x20,0x77,0x6F,0x72,0x6B,0x20
000420 6f74
000421 7720
000422 726f
000423 206b
          	.DB  0x6F,0x6E,0x20,0x74,0x68,0x69,0x73,0x20
000424 6e6f
000425 7420
000426 6968
000427 2073
          	.DB  0x6C,0x69,0x74,0x74,0x6C,0x65,0x20,0x70
000428 696c
000429 7474
00042a 656c
00042b 7020
          	.DB  0x72,0x6F,0x6A,0x65,0x63,0x74,0x2E,0x3C
00042c 6f72
00042d 656a
00042e 7463
00042f 3c2e
          	.DB  0x62,0x72,0x20,0x2F,0x3E,0x3C,0x61,0x20
000430 7262
000431 2f20
000432 3c3e
000433 2061
          	.DB  0x68,0x72,0x65,0x66,0x3D,0x22,0x69,0x6E
000434 7268
000435 6665
000436 223d
000437 6e69
          	.DB  0x64,0x65,0x78,0x2E,0x68,0x74,0x6D,0x6C
000438 6564
000439 2e78
00043a 7468
00043b 6c6d
          	.DB  0x22,0x3E,0x69,0x6E,0x64,0x65,0x78,0x3C
00043c 3e22
00043d 6e69
00043e 6564
00043f 3c78
          	.DB  0x2F,0x61,0x3E,0x3C,0x2F,0x62,0x6F,0x64
000440 612f
000441 3c3e
000442 622f
000443 646f
          	.DB  0x79,0x3E,0x3C,0x2F,0x68,0x74,0x6D,0x6C
000444 3e79
000445 2f3c
000446 7468
000447 6c6d
          	.DB  0x3E,0xD,0xA,0xD,0xA,0x0
000448 0d3e
000449 0d0a
00044a 000a
          _favicon:
          	.DB  0x48,0x54,0x54,0x50,0x2F,0x31,0x2E,0x30
00044b 5448
00044c 5054
00044d 312f
00044e 302e
          	.DB  0x20,0x32,0x30,0x30,0x20,0x4F,0x4B,0xD
00044f 3220
000450 3030
000451 4f20
000452 0d4b
          	.DB  0xA,0x53,0x65,0x72,0x76,0x65,0x72,0x3A
000453 530a
000454 7265
000455 6576
000456 3a72
          	.DB  0x20,0x4B,0x69,0x63,0x6B,0x41,0x73,0x73
000457 4b20
000458 6369
000459 416b
00045a 7373
          	.DB  0x20,0x53,0x65,0x72,0x76,0x65,0x72,0xD
00045b 5320
00045c 7265
00045d 6576
00045e 0d72
          	.DB  0xA,0x43,0x6F,0x6E,0x74,0x65,0x6E,0x74
00045f 430a
000460 6e6f
000461 6574
000462 746e
          	.DB  0x2D,0x74,0x79,0x70,0x65,0x3A,0x20,0x69
000463 742d
000464 7079
000465 3a65
000466 6920
          	.DB  0x6D,0x61,0x67,0x65,0x2F,0x78,0x2D,0x69
000467 616d
000468 6567
000469 782f
00046a 692d
          	.DB  0x63,0x6F,0x6E,0xD,0xA,0xD,0xA,0x0
00046b 6f63
00046c 0d6e
00046d 0d0a
00046e 000a
          	.DB  0x0,0x1,0x0,0x1,0x0,0x10,0x10,0x2
00046f 0100
000470 0100
000471 1000
000472 0210
          	.DB  0x0,0x1,0x0,0x1,0x0,0xB0,0x0,0x0
000473 0100
000474 0100
000475 b000
000476 0000
          	.DB  0x0,0x16,0x0,0x0,0x0,0x28,0x0,0x0
000477 1600
000478 0000
000479 2800
00047a 0000
          	.DB  0x0,0x10,0x0,0x0,0x0,0x20,0x0,0x0
00047b 1000
00047c 0000
00047d 2000
00047e 0000
          	.DB  0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0
00047f 0100
000480 0100
000481 0000
000482 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000483 0000
000484 0000
000485 0000
000486 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000487 0000
000488 0000
000489 0000
00048a 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x6B,0x3C,0x6A
00048b 0000
00048c 0000
00048d 6b00
00048e 6a3c
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00048f 0000
000490 0000
000491 0000
000492 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000493 0000
000494 0000
000495 0000
000496 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000497 0000
000498 0000
000499 0000
00049a 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00049b 0000
00049c 0000
00049d 0000
00049e 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00049f 0000
0004a0 0000
0004a1 0000
0004a2 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0004a3 0000
0004a4 0000
0004a5 0000
0004a6 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0004a7 0000
0004a8 0000
0004a9 0000
0004aa 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0004ab 0000
0004ac 0000
0004ad 0000
0004ae 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0004af 0000
0004b0 0000
0004b1 0000
0004b2 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0004b3 0000
0004b4 0000
0004b5 0000
0004b6 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0004b7 0000
0004b8 0000
0004b9 0000
0004ba 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0004bb 0000
0004bc 0000
0004bd 0000
0004be 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0004bf 0000
0004c0 0000
0004c1 0000
0004c2 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0004c3 0000
0004c4 0000
0004c5 0000
0004c6 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0004c7 0000
0004c8 0000
0004c9 0000
0004ca 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0004cb 0000
0004cc 0000
0004cd 0000
0004ce 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0004cf 0000
0004d0 0000
0004d1 0000
0004d2 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0004d3 0000
0004d4 0000
0004d5 0000
0004d6 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0004d7 0000
0004d8 0000
0004d9 0000
0004da 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0004db 0000
0004dc 0000
0004dd 0000
0004de 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0004df 0000
0004e0 0000
0004e1 0000
0004e2 0000
          	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0004e3 0000
0004e4 0000
0004e5 0000
0004e6 0000
          	.DB  0x0,0x0,0x0,0x0,0x0
0004e7 0000
0004e8 0000
0004e9 0000
          __error400:
          	.DW  _error400
0004ea 0266
          	.DW  0x2
0004eb 0002
          	.DW  (__error400)*2+0x06
0004ec 09da
          	.DB  0x48,0x54,0x54,0x50,0x2F,0x31,0x2E,0x30
0004ed 5448
0004ee 5054
0004ef 312f
0004f0 302e
          	.DB  0x20,0x34,0x30,0x30,0x20,0x42,0x61,0x64
0004f1 3420
0004f2 3030
0004f3 4220
0004f4 6461
          	.DB  0x20,0x52,0x65,0x71,0x75,0x65,0x73,0x74
0004f5 5220
0004f6 7165
0004f7 6575
0004f8 7473
          	.DB  0xD,0xA,0x53,0x65,0x72,0x76,0x65,0x72
0004f9 0a0d
0004fa 6553
0004fb 7672
0004fc 7265
          	.DB  0x3A,0x20,0x4B,0x69,0x63,0x6B,0x41,0x73
0004fd 203a
0004fe 694b
0004ff 6b63
000500 7341
          	.DB  0x73,0x20,0x53,0x65,0x72,0x76,0x65,0x72
000501 2073
000502 6553
000503 7672
000504 7265
          	.DB  0xD,0xA,0x43,0x6F,0x6E,0x74,0x65,0x6E
000505 0a0d
000506 6f43
000507 746e
000508 6e65
          	.DB  0x74,0x2D,0x74,0x79,0x70,0x65,0x3A,0x20
000509 2d74
00050a 7974
00050b 6570
00050c 203a
          	.DB  0x74,0x65,0x78,0x74,0x2F,0x68,0x74,0x6D
00050d 6574
00050e 7478
00050f 682f
000510 6d74
          	.DB  0x6C,0xD,0xA,0xD,0xA,0x3C,0x68,0x74
000511 0d6c
000512 0d0a
000513 3c0a
000514 7468
          	.DB  0x6D,0x6C,0x3E,0x3C,0x68,0x65,0x61,0x64
000515 6c6d
000516 3c3e
000517 6568
000518 6461
          	.DB  0x3E,0x3C,0x6D,0x65,0x74,0x61,0x20,0x48
000519 3c3e
00051a 656d
00051b 6174
00051c 4820
          	.DB  0x54,0x54,0x50,0x2D,0x45,0x51,0x55,0x49
00051d 5454
00051e 2d50
00051f 5145
000520 4955
          	.DB  0x56,0x3D,0x22,0x63,0x6F,0x6E,0x74,0x65
000521 3d56
000522 6322
000523 6e6f
000524 6574
          	.DB  0x6E,0x74,0x2D,0x74,0x79,0x70,0x65,0x22
000525 746e
000526 742d
000527 7079
000528 2265
          	.DB  0x20,0x43,0x4F,0x4E,0x54,0x45,0x4E,0x54
000529 4320
00052a 4e4f
00052b 4554
00052c 544e
          	.DB  0x3D,0x22,0x74,0x65,0x78,0x74,0x2F,0x68
00052d 223d
00052e 6574
00052f 7478
000530 682f
          	.DB  0x74,0x6D,0x6C,0x3B,0x20,0x63,0x68,0x61
000531 6d74
000532 3b6c
000533 6320
000534 6168
          	.DB  0x72,0x73,0x65,0x74,0x3D,0x69,0x73,0x6F
000535 7372
000536 7465
000537 693d
000538 6f73
          	.DB  0x2D,0x38,0x38,0x35,0x39,0x2D,0x31,0x22
000539 382d
00053a 3538
00053b 2d39
00053c 2231
          	.DB  0x3E,0x3C,0x74,0x69,0x74,0x6C,0x65,0x3E
00053d 3c3e
00053e 6974
00053f 6c74
000540 3e65
          	.DB  0x65,0x72,0x72,0x6F,0x72,0x34,0x30,0x30
000541 7265
000542 6f72
000543 3472
000544 3030
          	.DB  0x3C,0x2F,0x74,0x69,0x74,0x6C,0x65,0x3E
000545 2f3c
000546 6974
000547 6c74
000548 3e65
          	.DB  0x3C,0x2F,0x68,0x65,0x61,0x64,0x3E,0x3C
000549 2f3c
00054a 6568
00054b 6461
00054c 3c3e
          	.DB  0x62,0x6F,0x64,0x79,0x3E,0x45,0x72,0x72
00054d 6f62
00054e 7964
00054f 453e
000550 7272
          	.DB  0x6F,0x72,0x34,0x30,0x30,0x3A,0x20,0x4F
000551 726f
000552 3034
000553 3a30
000554 4f20
          	.DB  0x70,0x70,0x73,0x2C,0x20,0x79,0x6F,0x75
000555 7070
000556 2c73
000557 7920
000558 756f
          	.DB  0x20,0x62,0x72,0x6F,0x6B,0x65,0x20,0x69
000559 6220
00055a 6f72
00055b 656b
00055c 6920
          	.DB  0x74,0x20,0x28,0x42,0x61,0x64,0x20,0x52
00055d 2074
00055e 4228
00055f 6461
000560 5220
          	.DB  0x65,0x71,0x75,0x65,0x73,0x74,0x29,0x2E
000561 7165
000562 6575
000563 7473
000564 2e29
          	.DB  0x3C,0x2F,0x62,0x6F,0x64,0x79,0x3E,0x3C
000565 2f3c
000566 6f62
000567 7964
000568 3c3e
          	.DB  0x2F,0x68,0x74,0x6D,0x6C,0x3E,0xD,0xA
000569 682f
00056a 6d74
00056b 3e6c
00056c 0a0d
          	.DB  0xD,0xA,0x0
00056d 0a0d
00056e 0000
          __error404:
          	.DW  _error404
00056f 0268
          	.DW  0x2
000570 0002
          	.DW  (__error404)*2+0x06
000571 0ae4
          	.DB  0x48,0x54,0x54,0x50,0x2F,0x31,0x2E,0x30
000572 5448
000573 5054
000574 312f
000575 302e
          	.DB  0x20,0x34,0x30,0x34,0x20,0x4E,0x6F,0x74
000576 3420
000577 3430
000578 4e20
000579 746f
          	.DB  0x20,0x46,0x6F,0x75,0x6E,0x64,0xD,0xA
00057a 4620
00057b 756f
00057c 646e
00057d 0a0d
          	.DB  0x53,0x65,0x72,0x76,0x65,0x72,0x3A,0x20
00057e 6553
00057f 7672
000580 7265
000581 203a
          	.DB  0x4B,0x69,0x63,0x6B,0x41,0x73,0x73,0x20
000582 694b
000583 6b63
000584 7341
000585 2073
          	.DB  0x53,0x65,0x72,0x76,0x65,0x72,0xD,0xA
000586 6553
000587 7672
000588 7265
000589 0a0d
          	.DB  0x43,0x6F,0x6E,0x74,0x65,0x6E,0x74,0x2D
00058a 6f43
00058b 746e
00058c 6e65
00058d 2d74
          	.DB  0x74,0x79,0x70,0x65,0x3A,0x20,0x74,0x65
00058e 7974
00058f 6570
000590 203a
000591 6574
          	.DB  0x78,0x74,0x2F,0x68,0x74,0x6D,0x6C,0xD
000592 7478
000593 682f
000594 6d74
000595 0d6c
          	.DB  0xA,0xD,0xA,0x3C,0x68,0x74,0x6D,0x6C
000596 0d0a
000597 3c0a
000598 7468
000599 6c6d
          	.DB  0x3E,0x3C,0x68,0x65,0x61,0x64,0x3E,0x3C
00059a 3c3e
00059b 6568
00059c 6461
00059d 3c3e
          	.DB  0x6D,0x65,0x74,0x61,0x20,0x48,0x54,0x54
00059e 656d
00059f 6174
0005a0 4820
0005a1 5454
          	.DB  0x50,0x2D,0x45,0x51,0x55,0x49,0x56,0x3D
0005a2 2d50
0005a3 5145
0005a4 4955
0005a5 3d56
          	.DB  0x22,0x63,0x6F,0x6E,0x74,0x65,0x6E,0x74
0005a6 6322
0005a7 6e6f
0005a8 6574
0005a9 746e
          	.DB  0x2D,0x74,0x79,0x70,0x65,0x22,0x20,0x43
0005aa 742d
0005ab 7079
0005ac 2265
0005ad 4320
          	.DB  0x4F,0x4E,0x54,0x45,0x4E,0x54,0x3D,0x22
0005ae 4e4f
0005af 4554
0005b0 544e
0005b1 223d
          	.DB  0x74,0x65,0x78,0x74,0x2F,0x68,0x74,0x6D
0005b2 6574
0005b3 7478
0005b4 682f
0005b5 6d74
          	.DB  0x6C,0x3B,0x20,0x63,0x68,0x61,0x72,0x73
0005b6 3b6c
0005b7 6320
0005b8 6168
0005b9 7372
          	.DB  0x65,0x74,0x3D,0x69,0x73,0x6F,0x2D,0x38
0005ba 7465
0005bb 693d
0005bc 6f73
0005bd 382d
          	.DB  0x38,0x35,0x39,0x2D,0x31,0x22,0x3E,0x3C
0005be 3538
0005bf 2d39
0005c0 2231
0005c1 3c3e
          	.DB  0x74,0x69,0x74,0x6C,0x65,0x3E,0x65,0x72
0005c2 6974
0005c3 6c74
0005c4 3e65
0005c5 7265
          	.DB  0x72,0x6F,0x72,0x34,0x30,0x34,0x3C,0x2F
0005c6 6f72
0005c7 3472
0005c8 3430
0005c9 2f3c
          	.DB  0x74,0x69,0x74,0x6C,0x65,0x3E,0x3C,0x2F
0005ca 6974
0005cb 6c74
0005cc 3e65
0005cd 2f3c
          	.DB  0x68,0x65,0x61,0x64,0x3E,0x3C,0x62,0x6F
0005ce 6568
0005cf 6461
0005d0 3c3e
0005d1 6f62
          	.DB  0x64,0x79,0x3E,0x45,0x72,0x72,0x6F,0x72
0005d2 7964
0005d3 453e
0005d4 7272
0005d5 726f
          	.DB  0x34,0x30,0x34,0x3A,0x20,0x4F,0x70,0x70
0005d6 3034
0005d7 3a34
0005d8 4f20
0005d9 7070
          	.DB  0x73,0x2C,0x20,0x79,0x6F,0x75,0x20,0x62
0005da 2c73
0005db 7920
0005dc 756f
0005dd 6220
          	.DB  0x72,0x6F,0x6B,0x65,0x20,0x69,0x74,0x20
0005de 6f72
0005df 656b
0005e0 6920
0005e1 2074
          	.DB  0x28,0x4E,0x6F,0x74,0x20,0x46,0x6F,0x75
0005e2 4e28
0005e3 746f
0005e4 4620
0005e5 756f
          	.DB  0x6E,0x64,0x29,0x2E,0x3C,0x2F,0x62,0x6F
0005e6 646e
0005e7 2e29
0005e8 2f3c
0005e9 6f62
          	.DB  0x64,0x79,0x3E,0x3C,0x2F,0x68,0x74,0x6D
0005ea 7964
0005eb 3c3e
0005ec 682f
0005ed 6d74
          	.DB  0x6C,0x3E,0xD,0xA,0xD,0xA,0x0
0005ee 3e6c
0005ef 0a0d
0005f0 0a0d
0005f1 0000
          __error501:
          	.DW  _error501
0005f2 026a
          	.DW  0x2
0005f3 0002
          	.DW  (__error501)*2+0x06
0005f4 0bea
          	.DB  0x48,0x54,0x54,0x50,0x2F,0x31,0x2E,0x30
0005f5 5448
0005f6 5054
0005f7 312f
0005f8 302e
          	.DB  0x20,0x35,0x30,0x31,0x20,0x4E,0x6F,0x74
0005f9 3520
0005fa 3130
0005fb 4e20
0005fc 746f
          	.DB  0x20,0x49,0x6D,0x70,0x6C,0x65,0x6D,0x65
0005fd 4920
0005fe 706d
0005ff 656c
000600 656d
          	.DB  0x6E,0x74,0x65,0x64,0xD,0xA,0x53,0x65
000601 746e
000602 6465
000603 0a0d
000604 6553
          	.DB  0x72,0x76,0x65,0x72,0x3A,0x20,0x4B,0x69
000605 7672
000606 7265
000607 203a
000608 694b
          	.DB  0x63,0x6B,0x41,0x73,0x73,0x20,0x53,0x65
000609 6b63
00060a 7341
00060b 2073
00060c 6553
          	.DB  0x72,0x76,0x65,0x72,0xD,0xA,0x43,0x6F
00060d 7672
00060e 7265
00060f 0a0d
000610 6f43
          	.DB  0x6E,0x74,0x65,0x6E,0x74,0x2D,0x74,0x79
000611 746e
000612 6e65
000613 2d74
000614 7974
          	.DB  0x70,0x65,0x3A,0x20,0x74,0x65,0x78,0x74
000615 6570
000616 203a
000617 6574
000618 7478
          	.DB  0x2F,0x68,0x74,0x6D,0x6C,0xD,0xA,0xD
000619 682f
00061a 6d74
00061b 0d6c
00061c 0d0a
          	.DB  0xA,0x3C,0x68,0x74,0x6D,0x6C,0x3E,0x3C
00061d 3c0a
00061e 7468
00061f 6c6d
000620 3c3e
          	.DB  0x68,0x65,0x61,0x64,0x3E,0x3C,0x6D,0x65
000621 6568
000622 6461
000623 3c3e
000624 656d
          	.DB  0x74,0x61,0x20,0x48,0x54,0x54,0x50,0x2D
000625 6174
000626 4820
000627 5454
000628 2d50
          	.DB  0x45,0x51,0x55,0x49,0x56,0x3D,0x22,0x63
000629 5145
00062a 4955
00062b 3d56
00062c 6322
          	.DB  0x6F,0x6E,0x74,0x65,0x6E,0x74,0x2D,0x74
00062d 6e6f
00062e 6574
00062f 746e
000630 742d
          	.DB  0x79,0x70,0x65,0x22,0x20,0x43,0x4F,0x4E
000631 7079
000632 2265
000633 4320
000634 4e4f
          	.DB  0x54,0x45,0x4E,0x54,0x3D,0x22,0x74,0x65
000635 4554
000636 544e
000637 223d
000638 6574
          	.DB  0x78,0x74,0x2F,0x68,0x74,0x6D,0x6C,0x3B
000639 7478
00063a 682f
00063b 6d74
00063c 3b6c
          	.DB  0x20,0x63,0x68,0x61,0x72,0x73,0x65,0x74
00063d 6320
00063e 6168
00063f 7372
000640 7465
          	.DB  0x3D,0x69,0x73,0x6F,0x2D,0x38,0x38,0x35
000641 693d
000642 6f73
000643 382d
000644 3538
          	.DB  0x39,0x2D,0x31,0x22,0x3E,0x3C,0x74,0x69
000645 2d39
000646 2231
000647 3c3e
000648 6974
          	.DB  0x74,0x6C,0x65,0x3E,0x65,0x72,0x72,0x6F
000649 6c74
00064a 3e65
00064b 7265
00064c 6f72
          	.DB  0x72,0x35,0x30,0x31,0x3C,0x2F,0x74,0x69
00064d 3572
00064e 3130
00064f 2f3c
000650 6974
          	.DB  0x74,0x6C,0x65,0x3E,0x3C,0x2F,0x68,0x65
000651 6c74
000652 3e65
000653 2f3c
000654 6568
          	.DB  0x61,0x64,0x3E,0x3C,0x62,0x6F,0x64,0x79
000655 6461
000656 3c3e
000657 6f62
000658 7964
          	.DB  0x3E,0x45,0x72,0x72,0x6F,0x72,0x35,0x30
000659 453e
00065a 7272
00065b 726f
00065c 3035
          	.DB  0x31,0x3A,0x20,0x4F,0x70,0x70,0x73,0x2C
00065d 3a31
00065e 4f20
00065f 7070
000660 2c73
          	.DB  0x20,0x79,0x6F,0x75,0x20,0x62,0x72,0x6F
000661 7920
000662 756f
000663 6220
000664 6f72
          	.DB  0x6B,0x65,0x20,0x69,0x74,0x20,0x28,0x4E
000665 656b
000666 6920
000667 2074
000668 4e28
          	.DB  0x6F,0x74,0x20,0x49,0x6D,0x70,0x6C,0x65
000669 746f
00066a 4920
00066b 706d
00066c 656c
          	.DB  0x6D,0x65,0x6E,0x74,0x65,0x64,0x29,0x2E
00066d 656d
00066e 746e
00066f 6465
000670 2e29
          	.DB  0x3C,0x2F,0x62,0x6F,0x64,0x79,0x3E,0x3C
000671 2f3c
000672 6f62
000673 7964
000674 3c3e
          	.DB  0x2F,0x68,0x74,0x6D,0x6C,0x3E,0xD,0xA
000675 682f
000676 6d74
000677 3e6c
000678 0a0d
          	.DB  0xD,0xA,0x0
000679 0a0d
00067a 0000
          	.DEF _http_state=R6
          	.DEF _sendflag=R8
          	.DEF _pageendflag=R10
          	.DEF _rollback=R12
          __MYIP:
          	.DW  _MYIP
00067b 026e
          	.DW  0x4
00067c 0004
          	.DB  0xC0,0xA8,0x2,0xFF
00067d a8c0
00067e ff02
          __MYMAC:
          	.DW  _MYMAC
00067f 027a
          	.DW  0x6
000680 0006
          	.DB  0x4A,0x65,0x73,0x74,0x65,0x72
000681 654a
000682 7473
000683 7265
          __waitcount:
          	.DW  _waitcount
000684 0548
          	.DW  0x2
000685 0002
          	.DW  0x320
000686 0320
          	.DEF _flags=R14
          _260:
          	.DB  0x0,0x0,0x0,0x0
000687 0000
000688 0000
          _327:
          	.DB  0x47,0x45,0x54,0x0,0x2F,0x0,0x2F,0x69
000689 4547
00068a 0054
00068b 002f
00068c 692f
          	.DB  0x6E,0x64,0x65,0x78,0x2E,0x68,0x74,0x6D
00068d 646e
00068e 7865
00068f 682e
000690 6d74
          	.DB  0x6C,0x0,0x2F,0x61,0x62,0x6F,0x75,0x74
000691 006c
000692 612f
000693 6f62
000694 7475
          	.DB  0x2E,0x68,0x74,0x6D,0x6C,0x0,0x2F,0x69
000695 682e
000696 6d74
000697 006c
000698 692f
          	.DB  0x6E,0x64,0x65,0x78,0x32,0x2E,0x68,0x74
000699 646e
00069a 7865
00069b 2e32
00069c 7468
          	.DB  0x6D,0x6C,0x0,0x2F,0x66,0x61,0x76,0x69
00069d 6c6d
00069e 2f00
00069f 6166
0006a0 6976
          	.DB  0x63,0x6F,0x6E,0x2E,0x69,0x63,0x6F,0x0
0006a1 6f63
0006a2 2e6e
0006a3 6369
0006a4 006f
          	.DB  0x48,0x45,0x41,0x44,0x0,0x50,0x4F,0x53
0006a5 4548
0006a6 4441
0006a7 5000
0006a8 534f
          	.DB  0x54,0x0,0x54,0x52,0x41,0x43,0x45,0x0
0006a9 0054
0006aa 5254
0006ab 4341
0006ac 0045
         
          __GLOBAL_INI_TBL:
          	.DW  __index*2
0006ad 0054
          	.DW  __index2*2
0006ae 0388
          	.DW  __about*2
0006af 06da
          	.DW  __error400*2
0006b0 09d4
          	.DW  __error404*2
0006b1 0ade
          	.DW  __error501*2
0006b2 0be4
          	.DW  __MYIP*2
0006b3 0cf6
          	.DW  __MYMAC*2
0006b4 0cfe
          	.DW  __waitcount*2
0006b5 0d08
          	.DW  0
0006b6 0000
         
          __RESET:
0006b7 94f8      	CLI
0006b8 27ee      	CLR  R30
0006b9 bbec      	OUT  EECR,R30
         
         ;INTERRUPT VECTORS ARE PLACED
         ;AT THE START OF FLASH
0006ba e0f1      	LDI  R31,1
0006bb bffb      	OUT  GICR,R31
0006bc bfeb      	OUT  GICR,R30
0006bd bfe5      	OUT  MCUCR,R30
         
         ;DISABLE WATCHDOG
0006be e1f8      	LDI  R31,0x18
0006bf bdf1      	OUT  WDTCR,R31
0006c0 e1f0      	LDI  R31,0x10
0006c1 bdf1      	OUT  WDTCR,R31
         
         ;CLEAR R2-R14
0006c2 e08d      	LDI  R24,13
0006c3 e0a2      	LDI  R26,2
0006c4 27bb      	CLR  R27
          __CLEAR_REG:
0006c5 93ed      	ST   X+,R30
0006c6 958a      	DEC  R24
0006c7 f7e9      	BRNE __CLEAR_REG
         
         ;CLEAR SRAM
0006c8 e080      	LDI  R24,LOW(0x800)
0006c9 e098      	LDI  R25,HIGH(0x800)
0006ca e6a0      	LDI  R26,0x60
          __CLEAR_SRAM:
0006cb 93ed      	ST   X+,R30
0006cc 9701      	SBIW R24,1
0006cd f7e9      	BRNE __CLEAR_SRAM
         
         ;GLOBAL VARIABLES INITIALIZATION
0006ce e5ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0006cf e0fd      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
          __GLOBAL_INI_NEXT:
0006d0 9005      	LPM  R0,Z+
0006d1 9015      	LPM  R1,Z+
0006d2 01bf      	MOVW R22,R30
0006d3 01f0      	MOVW R30,R0
0006d4 9730      	SBIW R30,0
0006d5 f051      	BREQ __GLOBAL_INI_END
0006d6 91a5      	LPM  R26,Z+
0006d7 91b5      	LPM  R27,Z+
0006d8 9185      	LPM  R24,Z+
0006d9 9195      	LPM  R25,Z+
          __GLOBAL_INI_LOOP:
0006da 9005      	LPM  R0,Z+
0006db 920d      	ST   X+,R0
0006dc 9701      	SBIW R24,1
0006dd f7e1      	BRNE __GLOBAL_INI_LOOP
0006de 01fb      	MOVW R30,R22
0006df cff0      	RJMP __GLOBAL_INI_NEXT
          __GLOBAL_INI_END:
         
         ;STACK POINTER INITIALIZATION
0006e0 e5ef      	LDI  R30,LOW(0x85F)
0006e1 bfed      	OUT  SPL,R30
0006e2 e0e8      	LDI  R30,HIGH(0x85F)
0006e3 bfee      	OUT  SPH,R30
         
         ;DATA STACK POINTER INITIALIZATION
0006e4 e6c0      	LDI  R28,LOW(0x260)
0006e5 e0d2      	LDI  R29,HIGH(0x260)
         
0006e6 940c 141c 	JMP  _main
         
          	.ESEG
          	.ORG 0
          	.DB  0 ; FIRST EEPROM LOCATION NOT USED, SEE ATMEL ERRATA SHEETS
000000 00
         
          	.DSEG
          	.ORG 0x260
         ;       1 /*Project:  AVR Web Server
         ;       2 by: Eric Mesa and Richard West
         ;       3 based upon version 0.93 beta 
         ;       4 by: Jeremy                                                             
         ;       5            
         ;       6 **********************************************************************
         ;       7 * DESCRIPTION
         ;       8 **********************************************************************
         ;       9 This project is a webserver running on an Atmel Mega32.  It supports
         ;      10 ping, dhcp, 
         ;      11 
         ;      12 **********************************************************************
         ;      13 * CHANGELOG
         ;      14 ***********************************************************************
         ;      15 Current working version 0.96
         ;      16 
         ;      17 Version 0.96 - The Compliance Wars - 13 Apr 2005
         ;      18 The goal of version 0.96 is to shore up compliance
         ;      19 issues with the original code.  It is already 
         ;      20 functional with all broswers, but we want to 
         ;      21 allow error checking, better HTML parsing, and 
         ;      22 generally a heckuva lot more compliant versions
         ;      23 of the code.
         ;      24 
         ;      25 1) Added HTTP errors if the wrong page is asked for
         ;      26 2) Fixed TCP_data variable because Jeremy had been
         ;      27 pointing into the options and padding area
         ;      28 3) Added favicon.ico to be compliant with requests for
         ;      29 page icons - lack of the icon had prevented it from following links
         ;      30 (at least in Firefox)
         ;      31 **********************************************************************
         ;      32 
         ;      33 **********************************************************************
         ;      34 Version 0.95 - The Modular Version - 13 Apr 2005
         ;      35 The goal of version 0.95 is to modularize the functions 
         ;      36 by moving them over to their own library and header files.  
         ;      37 This enables a code that is much easier to read as well
         ;      38 as easier to maintain.  This, and the subsquent optimization 
         ;      39 of the code, is our greatest change to the code
         ;      40 
         ;      41 1) Moved arp-related functions over to their own library/header files
         ;      42 2) Moved icmp-related functions over to their own library/header files
         ;      43 3) Moved udp-related functions over to their own library/header files
         ;      44 4) Moved dhcp-related functions over to their own library/header files
         ;      45 5) Moved tcp-related functions over to their own library/header files
         ;      46 6) Moved ack-related functions over to their own library/header files
         ;      47 7) Moved tcp_send-related functions over to their own library/header 
         ;      48 files
         ;      49 8) Moved nic communication-related functions over to their own 
         ;      50 library/header files
         ;      51 9) Moved ring buffer related functions over to their own library/header f
         ;      52 iles
         ;      53 10) Moved packet echoing related functions over to their own library/
         ;      54 header files
         ;      55 11) Moved ring related functions over to their own library/header files
         ;      56 12) Moved IP address related functions over to their own library/header 
         ;      57 files
         ;      58 13) Moved Checksum related functions over to their own library/header 
         ;      59 files
         ;      60 14) Moved RTL8019AS initialization related functions over to their own 
         ;      61 library/header files
         ;      62 
         ;      63 Also, changed HTTP to HTTP1.0 from 1.1 to allow the code to be 
         ;      64 retrieved multiple times. Prior to this the server could only be 
         ;      65 connected to once per hard reset.
         ;      66 **********************************************************************
         ;      67 
         ;      68 **********************************************************************
         ;      69 Version 0.94.1 9 Apr 2005
         ;      70 1) Eliminated minor redundancies (eg x++ instead of x=x+1)
         ;      71 
         ;      72 
         ;      73 Version 0.94 9 Apr 2005
         ;      74 1) Fixed browser compatibility problems by correctly padding the html 
         ;      75 header.  This involved adding 12 spaces at the front and a \r\n at the
         ;      76  end
         ;      77 **********************************************************************
         ;      78 
         ;      79 **********************************************************************
         ;      80 Version 0.93.1 6 April 2005
         ;      81 1) Fixed typoes in copying from PDF
         ;      82 
         ;      83 
         ;      84 Version 0.93 4 March 2004
         ;      85 1) Added Checksum for incoming TCP packets (fixed)
         ;      86 2) Added TCP data sending function (only sends 1 packet at a time Window 
         ;      87 functionality should be done)
         ;      88 3)Increased packet size from 96 - 300 (since we can have 576 max 
         ;      89 packet length)
         ;      90 4)Added HTTP functions and HTTP sample
         ;      91 5)Added DHCP functionality
         ;      92 6)Need to tweak the TCP_close() functionality
         ;      93 7) Note: The webbrowesers use the RST fucntion whenever it is closed.  
         ;      94 Don't think will need the TCP_close()
         ;      95 *****TESTING*****
         ;      96 6) DHCP WORKING!
         ;      97 7) IMCP working!!
         ;      98 7) HTTP up!!
         ;      99 8) TCP resend lost data working (tested)
         ;     100 8) (fixed) didn't do the setting of packets properly only set the 1st 
         ;     101 byte must do all bytes
         ;     102 **********************************************************************
         ;     103 */
         ;     104 
         ;     105 //**********************************************************************
         ;     106 //*
         ;     107 //*  END OF CHANGELOG, BEGIN CODE
         ;     108 //*
         ;     109 //**********************************************************************
         ;     110 
         ;     111 //*******************************************
         ;     112 //*            PORT MAP
         ;     113 //*******************************************
         ;     114 //PORT C = rtldata - data bus RCTL8019 and AVR
         ;     115 // 0 SD0
         ;     116 // 1 SD1
         ;     117 // 2 SD2
         ;     118 // 3 SD3
         ;     119 // 4 SD4
         ;     120 // 5 SD5
         ;     121 // 6 SD6
         ;     122 // 7 SD7
         ;     123 // PORT B
         ;     124 // 0 SA0
         ;     125 // 1 SA1
         ;     126 // 2 SA2
         ;     127 // 3 SA3
         ;     128 // 4 SA4
         ;     129 // 5
         ;     130 // 6
         ;     131 // 7 make this the rst_pin
         ;     132 // PORT A
         ;     133 // temperature sensor port
         ;     134 
         ;     135 //PORT D
         ;     136 //0 RXD
         ;     137 //1 TXD 
         ;     138 //2 INT0 --> for EEPROM only
         ;     139 // 3 EESK
         ;     140 //4 EEDI
         ;     141 //5 EEDO
         ;     142 //6 ior_pin
         ;     143 //7 iow_pin
         ;     144 
         ;     145 #include<mega32.h>
         ;     146 #include<string.h>
         ;     147 #include<stdio.h>
         ;     148 #include<delay.h>
         ;     149 #include<stdlib.h>
         ;     150 
         ;     151 #define ISO_G 0x47
         ;     152 #define ISO_E 0x45
         ;     153 #define ISO_T 0x54
         ;     154 #define ISO_slash 0x2f
         ;     155 #define ISO_c 0x63
         ;     156 #define ISO_g 0x67
         ;     157 #define ISO_i 0x69
         ;     158 #define ISO_space 0x20
         ;     159 #define ISO_nl 0x0a
         ;     160 #define ISO_cr 0x0d
         ;     161 #define ISO_a 0x61
         ;     162 #define ISO_t 0x74
         ;     163 #define ISO_hash 0x23
         ;     164 #define ISO_period 0x2e
         ;     165 
         ;     166 //define the connection structure for a single TCP socket (multiple connections)
         ;     167 unsigned int page_size;                                                                                           
         ;     168 
         ;     169 //**********************************************************************
         ;     170 //* Stored Web Pages
         ;     171 //**********************************************************************
         ;     172 
warning : Line is truncated (the line is too long)
         ;     173 flash unsigned char *index = "HTTP/1.0 200 OK\r\nServer: KickAss Server\r\nContent-type: text/html\r\n\r\n<html><head><meta HTTP-EQUIV=\"content-type\" CONTENT=\"text/html; charset=iso-8859-1\"><title>index</title><link rel=\"shortcut icon\" href=\"/favicon.ico\" type=\"image/x-icon\" ></head><body><h1>Atmel Mega32 Webserver</h1><br /><a href=\"about.html\">by Eric Mesa and Richard West</a></h1><br>based on source code by Jeremy Tan<br><h2>Sound Bite</h2><br>Our project is a fully web-standar
          _index:
000260      	.BYTE 0x2
warning : Line is truncated (the line is too long)
         ;     174 flash unsigned char *index2 = "HTTP/1.0 200 OK\r\nServer: KickAss Server\r\nContent-type: text/html\r\n\r\n<html><head><meta HTTP-EQUIV=\"content-type\" CONTENT=\"text/html; charset=iso-8859-1\"><title>index2</title><link rel=\"shortcut icon\" href=\"/favicon.ico\" type=\"image/x-icon\" ></head><body>By splitting up the code, instead of keeping all 2000 lines in one file, someone who wishes to maintain a specific function wouldn't have to hunt for it throughout the file.  Documentation of eac
          _index2:
000262      	.BYTE 0x2
         ;     175 
         ;     176 flash unsigned char *about = "HTTP/1.0 200 OK\r\nServer: KickAss Server\r\nContent-type: text/html\r\n\r\n<html><head><meta HTTP-EQUIV=\"content-type\" CONTENT=\"text/html; charset=iso-8859-1\"><title>about</title><link rel=\"shortcut icon\" href=\"/favicon.ico\" type=\"image/x-icon\" ></head><body>Eric and Richard, also known as the Kings of Atmel, have taken some time out of their busy schedule to work on this little project.<br /><a href=\"index.html\">index</a></body></html>\r\n\r\n";
          _about:
000264      	.BYTE 0x2
         ;     177 // favicon is parsed and sent correctly, but it always appears as a white icon.
         ;     178 // it is a legitimate ico file since none of the browsers complain when it is received
         ;     179 flash unsigned char favicon[256+71-10] = {'H','T','T','P','/','1','.','0',' ','2','0','0',' ','O','K','\r','\n','S','e','r','v','e','r',':',' ','K','i','c','k','A','s','s',' ','S','e','r','v','e','r','\r','\n','C','o','n','t','e','n','t','-','t','y','p','e',':',' ','i','m','a','g','e','/','x','-','i','c','o','n','\r','\n','\r','\n',
         
          	.CSEG
         ;     180 0x00,0x00,0x01,0x00,0x01,0x00,0x10,0x10,0x02,0x00,0x01,0x00,0x01,0x00,0xb0,0x00,
         ;     181 0x00,0x00,0x16,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x20,0x00,
         ;     182 0x00,0x00,0x01,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
         ;     183 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6b,0x3C,
         ;     184 0x6A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
         ;     185 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
         ;     186 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
         ;     187 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
         ;     188 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
         ;     189 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
         ;     190 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
         ;     191 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
         ;     192 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
         ;     193 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
         ;     194 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
         ;     195 0x00,0x00,0x00,0x00,0x00,0x00};
         ;     196 
         ;     197 flash unsigned char *error400 = "HTTP/1.0 400 Bad Request\r\nServer: KickAss Server\r\nContent-type: text/html\r\n\r\n<html><head><meta HTTP-EQUIV=\"content-type\" CONTENT=\"text/html; charset=iso-8859-1\"><title>error400</title></head><body>Error400: Opps, you broke it (Bad Request).</body></html>\r\n\r\n";
         
          	.DSEG
          _error400:
000266      	.BYTE 0x2
         ;     198 flash unsigned char *error404 = "HTTP/1.0 404 Not Found\r\nServer: KickAss Server\r\nContent-type: text/html\r\n\r\n<html><head><meta HTTP-EQUIV=\"content-type\" CONTENT=\"text/html; charset=iso-8859-1\"><title>error404</title></head><body>Error404: Opps, you broke it (Not Found).</body></html>\r\n\r\n";
          _error404:
000268      	.BYTE 0x2
         ;     199 flash unsigned char *error501 = "HTTP/1.0 501 Not Implemented\r\nServer: KickAss Server\r\nContent-type: text/html\r\n\r\n<html><head><meta HTTP-EQUIV=\"content-type\" CONTENT=\"text/html; charset=iso-8859-1\"><title>error501</title></head><body>Error501: Opps, you broke it (Not Implemented).</body></html>\r\n\r\n";
          _error501:
00026a      	.BYTE 0x2
         ;     200 
         ;     201 //**********************************************************************
         ;     202 //* END STORED WEB PAGES
         ;     203 //**********************************************************************
         ;     204 
         ;     205 unsigned int http_state = 0;
         ;     206 unsigned int sendflag = 0;
         ;     207 unsigned int pageendflag = 0;
         ;     208 
         ;     209 //*****************************
         ;     210 //*    FUNCTION PROTOTYPES
         ;     211 //*****************************
         ;     212 void http_server(void);
         ;     213 void tcp(void);
         ;     214 void tcp_close(void);
         ;     215 void assemble_ack(void);
         ;     216 void write_rtl(unsigned char regaddr, unsigned char regdata);
         ;     217 void read_rtl(unsigned char regaddr);
         ;     218 void get_packet(void);
         ;     219 void setipaddrs(void);
         ;     220 void cksum(void);
         ;     221 void echo_packet(void);
         ;     222 #define INDEX 0
         ;     223 unsigned int rollback = 0;
         ;     224 signed int counter = 0;
          _counter:
00026c      	.BYTE 0x2
         ;     225 
         ;     226 
         ;     227 //end of pack html function
         ;     228 void send_tcp_packet(void);
         ;     229 
         ;     230 void udp(void);
         ;     231 void udp_send(void);
         ;     232 //DHCP FUCNTIONS
         ;     233 void dhcp(void);
         ;     234 void dhcp_setip(void);
         ;     235 
         ;     236 //*******************************************
         ;     237 //*     IP ADDRESS DEFINITION
         ;     238 //* This is the Ethernet Module IP address
         ;     239 //* You may change this to any valid address
         ;     240 //*******************************************
         ;     241 unsigned char MYIP[4] = {192,168,2,255};
          _MYIP:
00026e      	.BYTE 0x4
         ;     242 unsigned char client[4];
          _client:
000272      	.BYTE 0x4
         ;     243 unsigned char serverid[4];
          _serverid:
000276      	.BYTE 0x4
         ;     244 //*****************************************
         ;     245 //*    HARDWARE (MAC) ADDRESS DEFINITION
         ;     246 //* This is the Ethernet Module hardware address
         ;     247 //* You may change this to any valid address
         ;     248 //*****************************************
         ;     249 char MYMAC[6]={'J','e','s','t','e','r'};
          _MYMAC:
00027a      	.BYTE 0x6
         ;     250 //*****************************************
         ;     251 //*  Recieve Ring Buffer Header Layout
         ;     252 //* This is the 4-byte header that resides in front of the
         ;     253 //* data packet in the receive buffer
         ;     254 //******************************************
         ;     255 unsigned char pageheader[4];
          _pageheader:
000280      	.BYTE 0x4
         ;     256 #define enetpacketstatus 0x00
         ;     257 #define nextblock_ptr 	 0x01
         ;     258 #define enetpacketLenL 	 0x02
         ;     259 #define enetpacketLenH 	 0x03
         ;     260 //*******************************************
         ;     261 //*    Ethernet Header Layout
         ;     262 //*******************************************
         ;     263 unsigned char packet[700]; //700 bytes of packet space
          _packet:
000284      	.BYTE 0x2BC
         ;     264 #define enetpacketDest0 0x00 
         ;     265 //destination mac address
         ;     266 #define enetpacketDest1 0x01
         ;     267 #define enetpacketDest2 0x02
         ;     268 #define enetpacketDest3 0x03
         ;     269 #define enetpacketDest4 0x04
         ;     270 #define enetpacketDest5 0x05
         ;     271 #define enetpacketSrc0  0x06
         ;     272 //source mac address
         ;     273 #define enetpacketSrc1  0x07
         ;     274 #define enetpacketSrc2  0x08
         ;     275 #define enetpacketSrc3  0x09
         ;     276 #define enetpacketSrc4  0x0A
         ;     277 #define enetpacketSrc5  0x0B
         ;     278 #define enetpacketType0 0x0C
         ;     279 //type/length field
         ;     280 #define enetpacketType1 0x0D
         ;     281 #define enetpacketData  0x0E
         ;     282 //IP data area begins here
         ;     283 //******************************************
         ;     284 //* ARP Layout
         ;     285 //******************************************
         ;     286 #define arp_hwtype  0x0E
         ;     287 #define arp_prtype  0x10
         ;     288 #define arp_hwlen   0x12
         ;     289 #define arp_prlen   0x13
         ;     290 #define arp_op      0x14
         ;     291 #define arp_shaddr  0x16
         ;     292 //arp source mac address
         ;     293 #define arp_sipaddr 0x1C
         ;     294 //arp source IP address
         ;     295 #define arp_thaddr 0x20 
         ;     296 //arp target mac address
         ;     297 #define arp_tipaddr 0x26
         ;     298 //arp target ip address
         ;     299 //****************************************
         ;     300 //* IP Header Layout
         ;     301 //****************************************
         ;     302 #define ip_vers_len    0x0E 
         ;     303 //IP version and header length
         ;     304 #define ip_tos 	       0x0F
         ;     305 //IP type of service
         ;     306 #define ip_pktlen      0x10
         ;     307 //packet length
         ;     308 #define ip_id          0x12
         ;     309 //datagram ID
         ;     310 #define ip_frag_offset 0x14
         ;     311 //fragment offset
         ;     312 #define ip_ttl 	       0x16 
         ;     313 //time to live
         ;     314 #define ip_proto       0x17
         ;     315 //protocol (ICMP=1, TCP=6, UDP=11)
         ;     316 #define ip_hdr_cksum   0x18 
         ;     317 //header checksum
         ;     318 #define ip_srcaddr     0x1A
         ;     319 //IP address of source
         ;     320 #define ip_destaddr    0x1E
         ;     321 //IP aaddress of destination
         ;     322 #define ip_data        0x22
         ;     323 //IP data area
         ;     324 //************************************
         ;     325 //* TCP Header Layout
         ;     326 //************************************
         ;     327 #define TCP_srcport   0x22 
         ;     328 //TCP source port
         ;     329 #define TCP_destport  0x24
         ;     330 //TCP destination port
         ;     331 #define TCP_seqnum    0x26
         ;     332 //sequence number
         ;     333 #define TCP_acknum    0x2A
         ;     334 //acknowledgement number
         ;     335 #define TCP_hdrflags  0x2E
         ;     336 //4-bit header len(DATA OFFSET) and flags
         ;     337 #define TCP_window    0x30 
         ;     338 //window size
         ;     339 #define TCP_cksum     0x32
         ;     340 //TCP checksum
         ;     341 #define TCP_urgentptr 0x34
         ;     342 //urgent pointer
         ;     343 #define TCP_options      0x36 
         ;     344 //option/data
         ;     345 #define TCP_data      0x42
         ;     346 //*********************************************
         ;     347 //* TCP Flags
         ;     348 //* IN flags represent incoming bits
         ;     349 //* OUT flags represent outgoing bits
         ;     350 //* 576 octets(8xbit) max datalength
         ;     351 //*********************************************
         ;     352 #define FIN_IN (packet[TCP_hdrflags+1] & 0x01)
         ;     353 #define SYN_IN (packet[TCP_hdrflags+1] & 0x02)
         ;     354 #define RST_IN (packet[TCP_hdrflags+1] & 0x04)
         ;     355 #define PSH_IN (packet[TCP_hdrflags+1] & 0x08)
         ;     356 #define ACK_IN (packet[TCP_hdrflags+1] & 0x10)
         ;     357 #define URG_IN (packet[TCP_hdrflags+1] & 0x20)
         ;     358 #define FIN_OUT packet[TCP_hdrflags+1] |= 0x01
         ;     359 //00000001
         ;     360 #define NO_FIN packet[TCP_hdrflags+1] &= 0x62
         ;     361 //00111110
         ;     362 #define SYN_OUT packet[TCP_hdrflags+1] |= 0x02
         ;     363 //00000010
         ;     364 #define NO_SYN packet[TCP_hdrflags+1] &= 0x61
         ;     365 //00111101
         ;     366 #define RST_OUT packet[TCP_hdrflags+1] |= 0x04
         ;     367 //00000100
         ;     368 #define PSH_OUT packet[TCP_hdrflags+1] |= 0x08
         ;     369 //00001000
         ;     370 #define ACK_OUT packet[TCP_hdrflags+1] |= 0x10
         ;     371 //00010000
         ;     372 #define NO_ACK packet[TCP_hdrflags+1] &= 0x47
         ;     373 //00101111
         ;     374 #define URG_OUT packet[TCP_hdrflags+1] |= 0x20
         ;     375 //00100000
         ;     376 //*******************************************
         ;     377 //* Port Definitions
         ;     378 //* This address is used by TCP for HTTP server function
         ;     379 //* This can be changed to any valid port number
         ;     380 //* as long as you modify your code to recognize
         ;     381 //* the new port number
         ;     382 //*******************************************
         ;     383 #define MY_PORT_ADDRESS 0x50
         ;     384 //80 decimal for internet
         ;     385 //*******************************************
         ;     386 //*  IP Protocol Types
         ;     387 //*******************************************
         ;     388 #define PROT_ICMP 0x01
         ;     389 #define PROT_TCP  0x06
         ;     390 #define PROT_UDP  0x11
         ;     391 //*******************************************
         ;     392 //* ICMP Header
         ;     393 //*******************************************
         ;     394 #define ICMP_type    ip_data
         ;     395 #define ICMP_code    ICMP_type+1
         ;     396 #define ICMP_cksum   ICMP_code+1
         ;     397 #define ICMP_id      ICMP_chsum+2
         ;     398 #define ICMP_seqnum  ICMP_id+2
         ;     399 #define ICMP_data    ICMP_seqnum+2
         ;     400 //******************************************
         ;     401 //*  UDP Header and DHCP headers
         ;     402 //******************************************
         ;     403 #define UDP_srcport 	ip_data
         ;     404 #define UDP_destport 	UDP_srcport + 2
         ;     405 #define UDP_len 	UDP_destport + 2
         ;     406 #define UDP_cksum 	UDP_len + 2
         ;     407 #define UDP_data  	UDP_cksum + 2
         ;     408 #define DHCP_op 	UDP_cksum + 2
         ;     409 #define DHCP_htype 	DHCP_op + 1
         ;     410 #define DHCP_hlen 	DHCP_htype+1
         ;     411 #define DHCP_hops 	DHCP_hlen+1
         ;     412 #define DHCP_xid 	DHCP_hops + 1
         ;     413 #define DHCP_secs 	DHCP_xid + 4
         ;     414 #define DHCP_flags 	DHCP_secs + 2
         ;     415 #define DHCP_ciaddr 	DHCP_flags + 2
         ;     416 #define DHCP_yiaddr 	DHCP_ciaddr + 4
         ;     417 #define DHCP_siaddr 	DHCP_yiaddr + 4
         ;     418 #define DHCP_giaddr 	DHCP_siaddr + 4
         ;     419 #define DHCP_chaddr 	DHCP_giaddr+4
         ;     420 #define DHCP_sname 	DHCP_chaddr + 16
         ;     421 #define DHCP_file 	DHCP_sname + 64
         ;     422 #define DHCP_options 	DHCP_file + 128
         ;     423 //DHCP states
         ;     424 #define DHCP_DIS 0
         ;     425 #define DHCP_OFF 1
         ;     426 #define DHCP_ACK 2
         ;     427 unsigned int dhcpstate = DHCP_DIS;
          _dhcpstate:
000540      	.BYTE 0x2
         ;     428 
         ;     429 //****************************************
         ;     430 //* REALTEK CONTROL REGISTER OFFSETS
         ;     431 //* All offsets in Page 0 unless otherwise specified
         ;     432 //****************************************
         ;     433 #define CR 		0x00
         ;     434 #define PSTART 		0x01
         ;     435 #define PAR0 		0x01
         ;     436 //Page 1
         ;     437 #define CR9346 		0x01
         ;     438 //Page 3
         ;     439 #define PSTOP 		0x02
         ;     440 #define BNRY 		0x03
         ;     441 #define TSR 		0x04
         ;     442 #define TPSR 		0x04
         ;     443 #define TBCR0 		0x05
         ;     444 #define NCR 		0x05
         ;     445 #define TBCR1 		0x06
         ;     446 #define ISR 		0x07
         ;     447 #define CURR 		0x07
         ;     448 //Page 1
         ;     449 #define RSAR0 		0x08
         ;     450 #define CRDA0 		0x08
         ;     451 #define RSAR1 		0x09
         ;     452 #define CRDAL 		0x09
         ;     453 #define RBCR0 		0x0A
         ;     454 #define RBCR1 		0x0B
         ;     455 #define RSR 		0x0C
         ;     456 #define RCR 		0x0C
         ;     457 #define TCR	 	0x0D
         ;     458 #define CNTR0 		0x0D
         ;     459 #define DCR 		0x0E
         ;     460 #define CNTR1 		0x0E
         ;     461 #define IMR 		0x0F
         ;     462 #define CNTR2 		0x0F
         ;     463 #define RDMAPORT 	0x10
         ;     464 #define RSTPORT  	0x18
         ;     465 
         ;     466 //************************************************************
         ;     467 //* RTL8019AS INITIAL REGISTER VALUES
         ;     468 //************************************************************
         ;     469 #define rcrval 	0x04
         ;     470 #define tcrval 	0x00
         ;     471 #define dcrval 	0x58
         ;     472 //was 0x48
         ;     473 #define imrval 	0x11
         ;     474 //PRX and OVW interrupt enabled
         ;     475 #define txstart 0x40
         ;     476 #define rxstart 0x46
         ;     477 #define rxstop 	0x60
         ;     478 
         ;     479 //*************************************************************
         ;     480 //* RTL8019AS DATA/ADDRESS PIN DEFINITION
         ;     481 //*************************************************************
         ;     482 #define rtladdr PORTB
         ;     483 #define rtldata PORTC
         ;     484 #define tortl 	DDRC = 0xFF
         ;     485 #define fromrtl DDRC = 0x00
         ;     486 
         ;     487 //*************************************************************
         ;     488 //* RTL8019AS 9346 EEPROM PIN DEFINITIONS
         ;     489 //*************************************************************
         ;     490 #define EESK 0x08
         ;     491 //PORTD3 00001000
         ;     492 #define EEDI 0x10 
         ;     493 //PORTD4 00010000
         ;     494 #define EEDO 0x20
         ;     495 //PORTD5 00100000
         ;     496 
         ;     497 //*************************************************************
         ;     498 //* RTL8019AS PIN DEFINITIONS
         ;     499 //**************************************************************
         ;     500 #define ior_pin 0x40
         ;     501 //PORTD6 01000000
         ;     502 #define iow_pin 0x80
         ;     503 //PORTD7 10000000
         ;     504 #define rst_pin 0x80
         ;     505 //PORTB7 10000000
         ;     506 #define INT0_pin 0x04 
         ;     507 //PORTD2 00000100
         ;     508 
         ;     509 //*************************************************************
         ;     510 //* RTL8019AS ISR REGISTER DEFINITIONS
         ;     511 //*************************************************************
         ;     512 #define RST 0x80
         ;     513 //10000000
         ;     514 #define RDC 0x40
         ;     515 //01000000
         ;     516 #define OVW 0x10
         ;     517 //00010000
         ;     518 #define PRX 0x01
         ;     519 //00000001
         ;     520 
         ;     521 //*************************************************************
         ;     522 //* AVR RAM Definitions
         ;     523 //*************************************************************
         ;     524 //unsigned char aux_data[400]; //tcp received data area (200 char)
         ;     525 unsigned char req_ip[4];
          _req_ip:
000542      	.BYTE 0x4
         ;     526 unsigned int DHCP_wait = 0;
          _DHCP_wait:
000546      	.BYTE 0x2
         ;     527 int waitcount = 800;
          _waitcount:
000548      	.BYTE 0x2
         ;     528 unsigned char *addr,flags;
          _addr:
00054a      	.BYTE 0x2
         ;     529 unsigned char byte_read,data_H,data_L;
          _byte_read:
00054c      	.BYTE 0x1
          _data_H:
00054d      	.BYTE 0x1
          _data_L:
00054e      	.BYTE 0x1
         ;     530 unsigned char resend;
          _resend:
00054f      	.BYTE 0x1
         ;     531 unsigned int txlen,rxlen,chksum16,hdrlen,tcplen,tcpdatalen_in,dhcpoptlen;
          _txlen:
000550      	.BYTE 0x2
          _rxlen:
000552      	.BYTE 0x2
          _chksum16:
000554      	.BYTE 0x2
          _hdrlen:
000556      	.BYTE 0x2
          _tcplen:
000558      	.BYTE 0x2
          _tcpdatalen_in:
00055a      	.BYTE 0x2
          _dhcpoptlen:
00055c      	.BYTE 0x2
         ;     532 unsigned int tcpdatalen_out,ISN,portaddr,ip_packet_len;
          _tcpdatalen_out:
00055e      	.BYTE 0x2
          _ISN:
000560      	.BYTE 0x2
          _portaddr:
000562      	.BYTE 0x2
          _ip_packet_len:
000564      	.BYTE 0x2
         ;     533 unsigned long ic_chksum,hdr_chksum,my_seqnum,client_seqnum,incoming_ack,expected_ack;
          _ic_chksum:
000566      	.BYTE 0x4
          _hdr_chksum:
00056a      	.BYTE 0x4
          _my_seqnum:
00056e      	.BYTE 0x4
          _client_seqnum:
000572      	.BYTE 0x4
          _incoming_ack:
000576      	.BYTE 0x4
          _expected_ack:
00057a      	.BYTE 0x4
         ;     534 
         ;     535 //**********************************************************
         ;     536 //* Flags
         ;     537 //**********************************************************
         ;     538 #define synflag 	0x01
         ;     539 //00000001
         ;     540 #define finflag 	0x02
         ;     541 //00000010
         ;     542 #define synflag_bit 	flags & synflag
         ;     543 #define finflag_bit	flags & finflag
         ;     544 //either we are sending an ack or sending data
         ;     545 unsigned int ackflag = 0;
          _ackflag:
00057e      	.BYTE 0x2
         ;     546 // for TCP close operations
         ;     547 unsigned int closeflag = 0;
          _closeflag:
000580      	.BYTE 0x2
         ;     548 #define iorwport 	PORTD
         ;     549 #define eeprom 		PORTD
         ;     550 #define resetport 	PORTB
         ;     551 
         ;     552 //*******************************************************
         ;     553 //* RTL8019AS PIN MACROS
         ;     554 //*******************************************************
         ;     555 #define set_ior_pin 	iorwport |= ior_pin
         ;     556 #define clr_ior_pin 	iorwport &= ~ior_pin
         ;     557 #define set_iow_pin 	iorwport |= iow_pin
         ;     558 #define clr_iow_pin 	iorwport &= ~iow_pin
         ;     559 #define set_rst_pin 	resetport |= rst_pin
         ;     560 #define clr_rst_pin 	resetport &= ~rst_pin
         ;     561 
         ;     562 #define clr_EEDO 	eeprom &= ~EEDO
         ;     563 #define set_EEDO 	eeprom |= EEDO
         ;     564 #define clr_synflag 	flags &= ~synflag
         ;     565 #define set_synflag 	flags |= synflag
         ;     566 #define clr_finflag 	flags &= ~finflag
         ;     567 #define set_finflag 	flags |= finflag
         ;     568 
         ;     569 #define set_packet32(d,s) packet[d] = make8(s,3); \
         ;     570 	packet[d+1] = make8(s,2); \
         ;     571 	packet[d+2] = make8(s,1); \
         ;     572 	packet[d+3] = make8(s,0); 
         ;     573 
         ;     574 //converts decimal into words (8bit0
         ;     575 #define make8(var,offset) (var >> (offset*8)) & 0xFF
         ;     576 
         ;     577 //joins two 8bit binary into a 16bit binary and converts it to decimal
         ;     578 #define make16(varhigh,varlow) ((varhigh & 0xFF)*0x100) + (varlow & 0xFF)
         ;     579                                             
         ;     580 
         ;     581 //joins 4 8 bit numbers to form a 32bit number
         ;     582 #define make32(var1,var2,var3,var4) ((unsigned long)var1<<24)+((unsigned long)var2<<16)+ ((unsigned long)var3<<8)+((unsigned long)var4)
         ;     583 	
         ;     584 
         ;     585 //includes involving header and library files
         ;     586 #include "arp.h"
         ;     587 /*arp.c library source file
         ;     588 created by Eric Mesa
         ;     589 
         ;     590 *********************************
         ;     591 ver 0.1 10 Apr 2005
         ;     592 created arp.c
         ;     593 simply an implementation
         ;     594 of what Jeremy had written
         ;     595 without any extra optimizations
         ;     596 outside of what we had fixed
         ;     597 as of atmelwebserver.c ver 0.94.1
         ;     598 *********************************
         ;     599 
         ;     600 goes along with arp.h
         ;     601 header file
         ;     602 */
         ;     603 
         ;     604 /*
         ;     605 *******************************************************
         ;     606 * Perform ARP Response
         ;     607 * This routine supplies a requesting computer with the
         ;     608 * Ethernet module's MAC (hardware) address
         ;     609 *******************************************************
         ;     610 */
         ;     611 
         ;     612 //it's not standard C
         ;     613 //but this compiler is silly
         ;     614 //you include the .c file
         ;     615 //in the .h file instead
         ;     616 //of the other way around
         ;     617 //#include arp.h"
         ;     618 
         ;     619 void arp()
         ;     620 {
         
          	.CSEG
          _arp:
         ;     621 	unsigned char i;
         ;     622 
         ;     623 	//start the NIC
         ;     624 	write_rtl(CR,0x22);
0006e8 940e 14a3 	CALL SUBOPT_0x0
         ;	i -> R16
         ;     625 	
         ;     626 	//load beginning page for transmit buffer
         ;     627 	write_rtl(TPSR,txstart);
         ;     628 	
         ;     629 	//set start address for remote DMA operation
         ;     630 	write_rtl(RSAR0,0x00);
         ;     631 	write_rtl(RSAR1,0x40);
         ;     632 	
         ;     633 	//clear the interrupts
         ;     634 	write_rtl(ISR,0xFF);
         ;     635 	
         ;     636 	//load data byte count for remote DMA
         ;     637 	write_rtl(RBCR0,0x3C);
0006ea 940e 14c5 	CALL SUBOPT_0x1
         ;     638 	write_rtl(RBCR1,0x00);
0006ec 940e 14c9 	CALL SUBOPT_0x2
         ;     639 	
         ;     640 	//do remote write operation
         ;     641 	write_rtl(CR,0x12);
0006ee 940e 14cf 	CALL SUBOPT_0x3
         ;     642 	
         ;     643 	//write destination MAC address
         ;     644 	for(i=0;i<6;++i)
0006f0 e000      	LDI  R16,LOW(0)
          _0x4E:
0006f1 3006      	CPI  R16,6
0006f2 f430      	BRSH _0x4F
         ;     645 		write_rtl(RDMAPORT,packet[enetpacketSrc0+i]);
0006f3 940e 14d5 	CALL SUBOPT_0x4
0006f5 940e 14d9 	CALL SUBOPT_0x5
0006f7 5f0f      	SUBI R16,-LOW(1)
0006f8 cff8      	RJMP _0x4E
          _0x4F:
         ;     646 		
         ;     647 	//write source MAC address
         ;     648 	for(i=0;i<6;++i)
0006f9 e000      	LDI  R16,LOW(0)
          _0x51:
0006fa 3006      	CPI  R16,6
0006fb f430      	BRSH _0x52
         ;     649 		write_rtl(RDMAPORT,MYMAC[i]);
0006fc 940e 14d5 	CALL SUBOPT_0x4
0006fe 940e 14e1 	CALL SUBOPT_0x6
000700 5f0f      	SUBI R16,-LOW(1)
000701 cff8      	RJMP _0x51
          _0x52:
         ;     650 		
         ;     651 	//write typelen hwtype prtype hwlen prlen op:
         ;     652 	addr = &packet[enetpacketType0];
000702   +  	__POINTW1MN _packet,12
000702 e9e0      	LDI  R30,LOW(_packet+0xc)
000703 e0f2      	LDI  R31,HIGH(_packet+0xc)
          	.ENDM
000704 93e0 054a 	STS  _addr,R30
000706 93f0 054b 	STS  _addr+1,R31
         ;     653 	packet[arp_op+1] = 0x02;
000708 e0e2      	LDI  R30,LOW(2)
000709   +  	__PUTB1MN _packet,21
000709 93e0 0299 	STS  _packet+0x15,R30
          	.ENDM
         ;     654 	for(i=0;i<10;++i)
00070b e000      	LDI  R16,LOW(0)
          _0x54:
00070c 300a      	CPI  R16,10
00070d f448      	BRSH _0x55
         ;     655 		write_rtl(RDMAPORT,*addr++);
00070e e1e0      	LDI  R30,LOW(16)
00070f 93ea      	ST   -Y,R30
000710 940e 14e8 	CALL SUBOPT_0x7
000712 93ea      	ST   -Y,R30
000713 940e 1013 	CALL _write_rtl
000715 5f0f      	SUBI R16,-LOW(1)
000716 cff5      	RJMP _0x54
          _0x55:
         ;     656 	
         ;     657 	//write ethernet module MAC address
         ;     658 	for(i=0;i<6;++i)
000717 e000      	LDI  R16,LOW(0)
          _0x57:
000718 3006      	CPI  R16,6
000719 f430      	BRSH _0x58
         ;     659 		write_rtl(RDMAPORT,MYMAC[i]);
00071a 940e 14d5 	CALL SUBOPT_0x4
00071c 940e 14e1 	CALL SUBOPT_0x6
00071e 5f0f      	SUBI R16,-LOW(1)
00071f cff8      	RJMP _0x57
          _0x58:
         ;     660 	
         ;     661 	//write ethernet module IP address
         ;     662 	for(i=0;i<4;++i)
000720 e000      	LDI  R16,LOW(0)
          _0x5A:
000721 3004      	CPI  R16,4
000722 f448      	BRSH _0x5B
         ;     663 		write_rtl(RDMAPORT,MYIP[i]);
000723 940e 14d5 	CALL SUBOPT_0x4
000725 27ff      	CLR  R31
000726 59e2      	SUBI R30,LOW(-_MYIP)
000727 4ffd      	SBCI R31,HIGH(-_MYIP)
000728 940e 14f2 	CALL SUBOPT_0x8
00072a 5f0f      	SUBI R16,-LOW(1)
00072b cff5      	RJMP _0x5A
          _0x5B:
         ;     664 	
         ;     665 	//write remote MAC address
         ;     666 	for(i=0;i<6;++i)
00072c e000      	LDI  R16,LOW(0)
          _0x5D:
00072d 3006      	CPI  R16,6
00072e f430      	BRSH _0x5E
         ;     667 		write_rtl(RDMAPORT,packet[enetpacketSrc0+i]);
00072f 940e 14d5 	CALL SUBOPT_0x4
000731 940e 14d9 	CALL SUBOPT_0x5
000733 5f0f      	SUBI R16,-LOW(1)
000734 cff8      	RJMP _0x5D
          _0x5E:
         ;     668 		
         ;     669 	//write remote IP address
         ;     670 	for(i=0;i<4;++i)
000735 e000      	LDI  R16,LOW(0)
          _0x60:
000736 3004      	CPI  R16,4
000737 f450      	BRSH _0x61
         ;     671 		write_rtl(RDMAPORT,packet[arp_sipaddr+i]);
000738 940e 14d5 	CALL SUBOPT_0x4
00073a 5ee4      	SUBI R30,-LOW(28)
00073b 27ff      	CLR  R31
00073c 57ec      	SUBI R30,LOW(-_packet)
00073d 4ffd      	SBCI R31,HIGH(-_packet)
00073e 940e 14f2 	CALL SUBOPT_0x8
000740 5f0f      	SUBI R16,-LOW(1)
000741 cff4      	RJMP _0x60
          _0x61:
         ;     672 		
         ;     673 	//write some pad characeters to fill out the packet to 
         ;     674 	//the minimum length
         ;     675 	for(i=0;i<0x12;++i)
000742 e000      	LDI  R16,LOW(0)
          _0x63:
000743 3102      	CPI  R16,18
000744 f428      	BRSH _0x64
         ;     676 		write_rtl(RDMAPORT,0x00);
000745 e1e0      	LDI  R30,LOW(16)
000746 940e 14f6 	CALL SUBOPT_0x9
000748 5f0f      	SUBI R16,-LOW(1)
000749 cff9      	RJMP _0x63
          _0x64:
         ;     677 		
         ;     678 	//make sure the DMA operation has successfully completed
         ;     679 	byte_read=0;
00074a 27ee      	CLR  R30
00074b 93e0 054c 	STS  _byte_read,R30
         ;     680 	while(!(byte_read & RDC))
          _0x65:
00074d 91e0 054c 	LDS  R30,_byte_read
00074f 74e0      	ANDI R30,LOW(0x40)
000750 f419      	BRNE _0x67
         ;     681 		read_rtl(ISR);
000751 940e 14fb 	CALL SUBOPT_0xA
000753 cff9      	RJMP _0x65
          _0x67:
         ;     682 	
         ;     683 	//load number of bytes to be transmitted
         ;     684 	write_rtl(TBCR0,0x3C);
000754 e0e5      	LDI  R30,LOW(5)
000755 93ea      	ST   -Y,R30
000756 940e 14c5 	CALL SUBOPT_0x1
         ;     685 	write_rtl(TBCR1,0x00);
000758 e0e6      	LDI  R30,LOW(6)
000759 940e 14f6 	CALL SUBOPT_0x9
         ;     686 	
         ;     687 	//send the contents of the transmit buffer onto the network
         ;     688 	write_rtl(CR,0x24);
00075b 940e 14ff 	CALL SUBOPT_0xB
         ;     689 }
00075d c3e5      	RJMP _0x1A9
         ;     690 #include "icmp.h"
         ;     691 /*icmp.c library source file
         ;     692 created by Eric Mesa
         ;     693 
         ;     694 *********************************
         ;     695 ver 0.1 10 Apr 2005
         ;     696 created icmp.c
         ;     697 simply an implementation
         ;     698 of what Jeremy had written
         ;     699 without any extra optimizations
         ;     700 outside of what we had fixed
         ;     701 as of atmelwebserver.c ver 0.94.1
         ;     702 *********************************
         ;     703 
         ;     704 goes along with icmp.h
         ;     705 header file
         ;     706 */
         ;     707 
         ;     708 /*
         ;     709 *******************************************************
         ;     710 * Perform ARP Response
         ;     711 * This routine supplies a requesting computer with the
         ;     712 * Ethernet module's MAC (hardware) address
         ;     713 *******************************************************
         ;     714 */
         ;     715 
         ;     716 //it's not standard C
         ;     717 //but this compiler is silly
         ;     718 //you include the .c file
         ;     719 //in the .h file instead
         ;     720 //of the other way around
         ;     721 //#include icmp.h"
         ;     722 
         ;     723 /*
         ;     724 ********************************************************
         ;     725 * Perform ICMP Function
         ;     726 * This routine responds to a ping
         ;     727 ********************************************************
         ;     728 */
         ;     729 
         ;     730 void icmp()
         ;     731 {
          _icmp:
         ;     732 	//set echo reply
         ;     733 	packet[ICMP_type] = 0x00;
00075e 27ee      	CLR  R30
00075f   +  	__PUTB1MN _packet,34
00075f 93e0 02a6 	STS  _packet+0x22,R30
          	.ENDM
         ;     734 	packet[ICMP_code] = 0x00;
000761   +  	__PUTB1MN _packet,35
000761 93e0 02a7 	STS  _packet+0x23,R30
          	.ENDM
         ;     735 	
         ;     736 	//clear the ICMP checksum
         ;     737 	packet[ICMP_cksum] = 0x00;
000763   +  	__PUTB1MN _packet,36
000763 93e0 02a8 	STS  _packet+0x24,R30
          	.ENDM
         ;     738 	packet[ICMP_cksum+1] = 0x00;
000765   +  	__PUTB1MN _packet,37
000765 93e0 02a9 	STS  _packet+0x25,R30
          	.ENDM
         ;     739 	
         ;     740 	//setup the IP header
         ;     741 	setipaddrs();
000767 940e 1253 	CALL _setipaddrs
         ;     742 	
         ;     743 	//calculate the ICMP checksum
         ;     744 	hdr_chksum = 0;
000769 27ee      	CLR  R30
00076a 93e0 056a 	STS  _hdr_chksum,R30
00076c 93e0 056b 	STS  _hdr_chksum+1,R30
00076e 93e0 056c 	STS  _hdr_chksum+2,R30
000770 93e0 056d 	STS  _hdr_chksum+3,R30
         ;     745 	hdrlen = (make16(packet[ip_pktlen],packet[ip_pktlen+1])) - \
         ;     746 	//((packet[ip_vers_len] & 0x0F) * 4);
         ;     747 	((packet[ip_vers_len] & 0x0F) << 2);
000772   +  	__GETB1MN _packet,16
000772 91e0 0294 	LDS  R30,_packet+0x10
          	.ENDM
000774 940e 1505 	CALL SUBOPT_0xC
000776 93ff      	PUSH R31
000777 93ef      	PUSH R30
000778   +  	__GETB1MN _packet,17
000778 91e0 0295 	LDS  R30,_packet+0x11
          	.ENDM
00077a 91af      	POP  R26
00077b 91bf      	POP  R27
00077c 27ff      	CLR  R31
00077d 0fea      	ADD  R30,R26
00077e 1ffb      	ADC  R31,R27
00077f 93ff      	PUSH R31
000780 93ef      	PUSH R30
000781   +  	__GETB1MN _packet,14
000781 91e0 0292 	LDS  R30,_packet+0xe
          	.ENDM
000783 70ef      	ANDI R30,LOW(0xF)
000784 0fee      	LSL  R30
000785 0fee      	LSL  R30
000786 91af      	POP  R26
000787 91bf      	POP  R27
000788 27ff      	CLR  R31
000789 1bae      	SUB  R26,R30
00078a 0bbf      	SBC  R27,R31
00078b 93a0 0556 	STS  _hdrlen,R26
00078d 93b0 0557 	STS  _hdrlen+1,R27
         ;     748 	addr = &packet[ICMP_type];
00078f   +  	__POINTW1MN _packet,34
00078f eae6      	LDI  R30,LOW(_packet+0x22)
000790 e0f2      	LDI  R31,HIGH(_packet+0x22)
          	.ENDM
000791 940e 150c 	CALL SUBOPT_0xD
         ;     749 	cksum();
         ;     750 	chksum16 = ~(hdr_chksum + ((hdr_chksum & 0xFFFF0000) >> 16));
         ;     751 	packet[ICMP_cksum] = make8(chksum16,1);
000793 940e 152f 	CALL SUBOPT_0xE
000795   +  	__PUTB1MN _packet,36
000795 93e0 02a8 	STS  _packet+0x24,R30
          	.ENDM
         ;     752 	packet[ICMP_cksum+1] = make8(chksum16,0);
000797 91e0 0554 	LDS  R30,_chksum16
000799 91f0 0555 	LDS  R31,_chksum16+1
00079b 7fef      	ANDI R30,LOW(0xFF)
00079c 70f0      	ANDI R31,HIGH(0xFF)
00079d   +  	__PUTB1MN _packet,37
00079d 93e0 02a9 	STS  _packet+0x25,R30
          	.ENDM
         ;     753 	
         ;     754 	//send the ICMP packet along on its way
         ;     755 	echo_packet();
00079f 940e 10ee 	CALL _echo_packet
         ;     756 }
0007a1 9508      	RET
         ;     757 #include "udp.h"
         ;     758 /*udp.c library source file
         ;     759 created by Eric Mesa
         ;     760 
         ;     761 *********************************
         ;     762 ver 0.1 10 Apr 2005
         ;     763 created udp.c
         ;     764 simply an implementation
         ;     765 of what Jeremy had written
         ;     766 without any extra optimizations
         ;     767 outside of what we had fixed
         ;     768 as of atmelwebserver.c ver 0.94.1
         ;     769 *********************************
         ;     770 
         ;     771 goes along with udp.h
         ;     772 header file
         ;     773 */
         ;     774 
         ;     775 //****************************************************
         ;     776 //* UDP Function (To be used with DHCP)
         ;     777 //* UDP_srcport = 0, destination is either 67 or 68 IP is
         ;     778 //* 0000000 and 255.255.255.255.255
         ;     779 //****************************************************
         ;     780 void udp()
         ;     781 {
          _udp:
         ;     782 	//use port 68 DHCP
         ;     783 	if(packet[UDP_destport] == 0x00 && packet[UDP_destport+1] == 0x44)
0007a2   +  	__GETB1MN _packet,36
0007a2 91e0 02a8 	LDS  R30,_packet+0x24
          	.ENDM
0007a4 30e0      	CPI  R30,0
0007a5 f421      	BRNE _0x6F
0007a6   +  	__GETB1MN _packet,37
0007a6 91e0 02a9 	LDS  R30,_packet+0x25
          	.ENDM
0007a8 34e4      	CPI  R30,LOW(0x44)
0007a9 f009      	BREQ _0x70
          _0x6F:
0007aa c039      	RJMP _0x6E
          _0x70:
         ;     784 	{
         ;     785 		ic_chksum = make16(packet[UDP_cksum],packet[UDP_cksum+1]);
0007ab   +  	__GETB1MN _packet,40
0007ab 91e0 02ac 	LDS  R30,_packet+0x28
          	.ENDM
0007ad 940e 1505 	CALL SUBOPT_0xC
0007af 93ff      	PUSH R31
0007b0 93ef      	PUSH R30
0007b1   +  	__GETB1MN _packet,41
0007b1 91e0 02ad 	LDS  R30,_packet+0x29
          	.ENDM
0007b3 91af      	POP  R26
0007b4 91bf      	POP  R27
0007b5 940e 1535 	CALL SUBOPT_0xF
         ;     786 		//calculate the UDP checksum
         ;     787 		packet[UDP_cksum] = 0x00;
0007b7   +  	__PUTB1MN _packet,40
0007b7 93e0 02ac 	STS  _packet+0x28,R30
          	.ENDM
         ;     788 		packet[UDP_cksum+1] = 0x00;
0007b9 27ee      	CLR  R30
0007ba   +  	__PUTB1MN _packet,41
0007ba 93e0 02ad 	STS  _packet+0x29,R30
          	.ENDM
         ;     789 		
         ;     790 		hdr_chksum = 0;
0007bc 940e 1544 	CALL SUBOPT_0x10
         ;     791 		hdrlen = 0x08;
         ;     792 		addr = &packet[ip_srcaddr];
0007be   +  	__POINTW1MN _packet,26
0007be e9ee      	LDI  R30,LOW(_packet+0x1a)
0007bf e0f2      	LDI  R31,HIGH(_packet+0x1a)
          	.ENDM
0007c0 93e0 054a 	STS  _addr,R30
0007c2 93f0 054b 	STS  _addr+1,R31
         ;     793 		cksum();
0007c4 d622      	RCALL _cksum
         ;     794 		hdr_chksum = hdr_chksum + packet[ip_proto];
0007c5   +  	__GETB1MN _packet,23
0007c5 91e0 029b 	LDS  R30,_packet+0x17
          	.ENDM
0007c7 940e 1554 	CALL SUBOPT_0x11
         ;     795 		hdrlen = 0x02;
         ;     796 		addr = &packet[UDP_len];
0007c9   +  	__POINTW1MN _packet,38
0007c9 eaea      	LDI  R30,LOW(_packet+0x26)
0007ca e0f2      	LDI  R31,HIGH(_packet+0x26)
          	.ENDM
0007cb 93e0 054a 	STS  _addr,R30
0007cd 93f0 054b 	STS  _addr+1,R31
         ;     797 		cksum();
0007cf d617      	RCALL _cksum
         ;     798 		hdrlen = make16(packet[UDP_len],packet[UDP_len+1]);
0007d0   +  	__GETB1MN _packet,38
0007d0 91e0 02aa 	LDS  R30,_packet+0x26
          	.ENDM
0007d2 940e 1505 	CALL SUBOPT_0xC
0007d4 93ff      	PUSH R31
0007d5 93ef      	PUSH R30
0007d6   +  	__GETB1MN _packet,39
0007d6 91e0 02ab 	LDS  R30,_packet+0x27
          	.ENDM
0007d8 91af      	POP  R26
0007d9 91bf      	POP  R27
0007da 940e 1570 	CALL SUBOPT_0x12
         ;     799 		addr = &packet[UDP_srcport];
0007dc   +  	__POINTW1MN _packet,34
0007dc eae6      	LDI  R30,LOW(_packet+0x22)
0007dd e0f2      	LDI  R31,HIGH(_packet+0x22)
          	.ENDM
0007de 940e 150c 	CALL SUBOPT_0xD
         ;     800 		cksum();
         ;     801 		chksum16 = ~(hdr_chksum + ((hdr_chksum & 0xFFFF0000) >> 16));
         ;     802 		//perform checksum
         ;     803 		if(chksum16 == ic_chksum)
0007e0 940e 1578 	CALL SUBOPT_0x13
0007e2 f409      	BRNE _0x71
         ;     804 			dhcp();
0007e3 d0fb      	RCALL _dhcp
         ;     805 	}
          _0x71:
         ;     806 }
          _0x6E:
0007e4 9508      	RET
         ;     807 void udp_send()
         ;     808 {
          _udp_send:
         ;     809 	unsigned int i;
         ;     810 	ip_packet_len = 20+make16(packet[UDP_len],packet[UDP_len+1]);
0007e5 931a      	ST   -Y,R17
0007e6 930a      	ST   -Y,R16
         ;	i -> R16,R17
0007e7   +  	__GETB1MN _packet,38
0007e7 91e0 02aa 	LDS  R30,_packet+0x26
          	.ENDM
0007e9 940e 1505 	CALL SUBOPT_0xC
0007eb 9674      	ADIW R30,20
0007ec 93ff      	PUSH R31
0007ed 93ef      	PUSH R30
0007ee   +  	__GETB1MN _packet,39
0007ee 91e0 02ab 	LDS  R30,_packet+0x27
          	.ENDM
0007f0 91af      	POP  R26
0007f1 91bf      	POP  R27
0007f2 940e 1589 	CALL SUBOPT_0x14
         ;     811 	
         ;     812 	packet[ip_pktlen] = make8(ip_packet_len,1);
0007f4 940e 1591 	CALL SUBOPT_0x15
0007f6   +  	__PUTB1MN _packet,16
0007f6 93e0 0294 	STS  _packet+0x10,R30
          	.ENDM
         ;     813 	packet[ip_pktlen+1] = make8(ip_packet_len,0);
0007f8 91e0 0564 	LDS  R30,_ip_packet_len
0007fa 91f0 0565 	LDS  R31,_ip_packet_len+1
0007fc 7fef      	ANDI R30,LOW(0xFF)
0007fd 70f0      	ANDI R31,HIGH(0xFF)
0007fe   +  	__PUTB1MN _packet,17
0007fe 93e0 0295 	STS  _packet+0x11,R30
          	.ENDM
         ;     814 	packet[ip_proto] = PROT_UDP;
000800 e1e1      	LDI  R30,LOW(17)
000801   +  	__PUTB1MN _packet,23
000801 93e0 029b 	STS  _packet+0x17,R30
          	.ENDM
         ;     815 	
         ;     816 	//calculate the IP header checksum
         ;     817 	packet[ip_hdr_cksum] = 0x00;
000803 27ee      	CLR  R30
000804   +  	__PUTB1MN _packet,24
000804 93e0 029c 	STS  _packet+0x18,R30
          	.ENDM
         ;     818 	packet[ip_hdr_cksum+1] = 0x00;
000806   +  	__PUTB1MN _packet,25
000806 93e0 029d 	STS  _packet+0x19,R30
          	.ENDM
         ;     819 	hdr_chksum = 0;
000808 27ee      	CLR  R30
000809 93e0 056a 	STS  _hdr_chksum,R30
00080b 93e0 056b 	STS  _hdr_chksum+1,R30
00080d 93e0 056c 	STS  _hdr_chksum+2,R30
00080f 93e0 056d 	STS  _hdr_chksum+3,R30
         ;     820 	chksum16 = 0;
000811 27ee      	CLR  R30
000812 93e0 0554 	STS  _chksum16,R30
000814 93e0 0555 	STS  _chksum16+1,R30
         ;     821 	hdrlen = (packet[ip_vers_len] & 0x0F)<<2;
000816   +  	__GETB1MN _packet,14
000816 91e0 0292 	LDS  R30,_packet+0xe
          	.ENDM
000818 940e 1597 	CALL SUBOPT_0x16
         ;     822 	addr = &packet[ip_vers_len];
00081a   +  	__POINTW1MN _packet,14
00081a e9e2      	LDI  R30,LOW(_packet+0xe)
00081b e0f2      	LDI  R31,HIGH(_packet+0xe)
          	.ENDM
00081c 940e 150c 	CALL SUBOPT_0xD
         ;     823 	cksum();
         ;     824 	chksum16 = ~(hdr_chksum + ((hdr_chksum & 0xFFFF0000) >> 16));
         ;     825 	packet[ip_hdr_cksum] = make8(chksum16,1);
00081e 940e 152f 	CALL SUBOPT_0xE
000820   +  	__PUTB1MN _packet,24
000820 93e0 029c 	STS  _packet+0x18,R30
          	.ENDM
         ;     826 	packet[ip_hdr_cksum+1] = make8(chksum16,0);
000822 91e0 0554 	LDS  R30,_chksum16
000824 91f0 0555 	LDS  R31,_chksum16+1
000826 7fef      	ANDI R30,LOW(0xFF)
000827 70f0      	ANDI R31,HIGH(0xFF)
000828   +  	__PUTB1MN _packet,25
000828 93e0 029d 	STS  _packet+0x19,R30
          	.ENDM
         ;     827 	
         ;     828 	//set the source port to 68 (client)
         ;     829 	packet[UDP_srcport] = 0x00;
00082a 27ee      	CLR  R30
00082b   +  	__PUTB1MN _packet,34
00082b 93e0 02a6 	STS  _packet+0x22,R30
          	.ENDM
         ;     830 	packet[UDP_srcport+1] = 0x44;
00082d e4e4      	LDI  R30,LOW(68)
00082e   +  	__PUTB1MN _packet,35
00082e 93e0 02a7 	STS  _packet+0x23,R30
          	.ENDM
         ;     831 	
         ;     832 	//set the destination port to 67 (server)
         ;     833 	packet[UDP_destport] = 0x00;
000830 27ee      	CLR  R30
000831   +  	__PUTB1MN _packet,36
000831 93e0 02a8 	STS  _packet+0x24,R30
          	.ENDM
         ;     834 	packet[UDP_destport+1] = 0x43;
000833 e4e3      	LDI  R30,LOW(67)
000834   +  	__PUTB1MN _packet,37
000834 93e0 02a9 	STS  _packet+0x25,R30
          	.ENDM
         ;     835 	
         ;     836 	//calculate the UDP checksum
         ;     837 	packet[UDP_cksum] = 0x00;
000836 27ee      	CLR  R30
000837   +  	__PUTB1MN _packet,40
000837 93e0 02ac 	STS  _packet+0x28,R30
          	.ENDM
         ;     838 	packet[UDP_cksum+1] = 0x00;
000839   +  	__PUTB1MN _packet,41
000839 93e0 02ad 	STS  _packet+0x29,R30
          	.ENDM
         ;     839 	
         ;     840 	hdr_chksum = 0;
00083b 940e 1544 	CALL SUBOPT_0x10
         ;     841 	hdrlen = 0x08;
         ;     842 	addr = &packet[ip_srcaddr];
00083d   +  	__POINTW1MN _packet,26
00083d e9ee      	LDI  R30,LOW(_packet+0x1a)
00083e e0f2      	LDI  R31,HIGH(_packet+0x1a)
          	.ENDM
00083f 93e0 054a 	STS  _addr,R30
000841 93f0 054b 	STS  _addr+1,R31
         ;     843 	cksum();
000843 d5a3      	RCALL _cksum
         ;     844 	hdr_chksum = hdr_chksum + packet[ip_proto];
000844   +  	__GETB1MN _packet,23
000844 91e0 029b 	LDS  R30,_packet+0x17
          	.ENDM
000846 940e 1554 	CALL SUBOPT_0x11
         ;     845 	hdrlen = 0x02;
         ;     846 	addr = &packet[UDP_len];
000848   +  	__POINTW1MN _packet,38
000848 eaea      	LDI  R30,LOW(_packet+0x26)
000849 e0f2      	LDI  R31,HIGH(_packet+0x26)
          	.ENDM
00084a 93e0 054a 	STS  _addr,R30
00084c 93f0 054b 	STS  _addr+1,R31
         ;     847 	cksum();
00084e d598      	RCALL _cksum
         ;     848 	hdrlen = make16(packet[UDP_len],packet[UDP_len+1]);
00084f   +  	__GETB1MN _packet,38
00084f 91e0 02aa 	LDS  R30,_packet+0x26
          	.ENDM
000851 940e 1505 	CALL SUBOPT_0xC
000853 93ff      	PUSH R31
000854 93ef      	PUSH R30
000855   +  	__GETB1MN _packet,39
000855 91e0 02ab 	LDS  R30,_packet+0x27
          	.ENDM
000857 91af      	POP  R26
000858 91bf      	POP  R27
000859 940e 1570 	CALL SUBOPT_0x12
         ;     849 	addr = &packet[UDP_srcport];
00085b   +  	__POINTW1MN _packet,34
00085b eae6      	LDI  R30,LOW(_packet+0x22)
00085c e0f2      	LDI  R31,HIGH(_packet+0x22)
          	.ENDM
00085d 940e 150c 	CALL SUBOPT_0xD
         ;     850 	cksum();
         ;     851 	chksum16 = ~(hdr_chksum + ((hdr_chksum & 0xFFFF0000) >> 16));
         ;     852 		
         ;     853 	packet[UDP_cksum] = make8(chksum16,1);
00085f 940e 152f 	CALL SUBOPT_0xE
000861   +  	__PUTB1MN _packet,40
000861 93e0 02ac 	STS  _packet+0x28,R30
          	.ENDM
         ;     854 	packet[UDP_cksum+1] = make8(chksum16,0);
000863 91e0 0554 	LDS  R30,_chksum16
000865 91f0 0555 	LDS  R31,_chksum16+1
000867 7fef      	ANDI R30,LOW(0xFF)
000868 70f0      	ANDI R31,HIGH(0xFF)
000869   +  	__PUTB1MN _packet,41
000869 93e0 02ad 	STS  _packet+0x29,R30
          	.ENDM
         ;     855 	
         ;     856 	txlen = ip_packet_len + 14;
00086b 940e 15a0 	CALL SUBOPT_0x17
         ;     857 	//transmit length
         ;     858 	if(txlen < 60)
00086d f430      	BRSH _0x73
         ;     859 		txlen = 60;
00086e e3ec      	LDI  R30,LOW(60)
00086f e0f0      	LDI  R31,HIGH(60)
000870 93e0 0550 	STS  _txlen,R30
000872 93f0 0551 	STS  _txlen+1,R31
         ;     860 	data_L = make8(txlen,0);
          _0x73:
000874 940e 15b1 	CALL SUBOPT_0x18
         ;     861 	data_H = make8(txlen,1);
         ;     862 	write_rtl(CR,0x22);
         ;     863 	read_rtl(CR);
         ;     864 	while(byte_read & 0x04)
          _0x74:
000876 91e0 054c 	LDS  R30,_byte_read
000878 70e4      	ANDI R30,LOW(0x4)
000879 f019      	BREQ _0x76
         ;     865 		read_rtl(CR);
00087a 940e 15ca 	CALL SUBOPT_0x19
00087c cff9      	RJMP _0x74
          _0x76:
         ;     866 	write_rtl(TPSR,txstart);
00087d 940e 15ce 	CALL SUBOPT_0x1A
         ;     867 	write_rtl(RSAR0,0x00);
         ;     868 	write_rtl(RSAR1,0x40);
00087f 940e 15d6 	CALL SUBOPT_0x1B
         ;     869 	write_rtl(ISR,0xFF);
         ;     870 	write_rtl(RBCR0, data_L);
         ;     871 	write_rtl(RBCR1, data_H);
         ;     872 	write_rtl(CR,0x12);
         ;     873 	//the actual send operation
         ;     874 	for(i=0;i<txlen;++i)         
000881   +  	__GETWRN 16,17,0
000881 e000      	LDI  R0x10,LOW(0x0)
000882 e010      	LDI  R0x11,HIGH(0x0)
          	.ENDM
          _0x78:
000883 91e0 0550 	LDS  R30,_txlen
000885 91f0 0551 	LDS  R31,_txlen+1
000887 170e      	CP   R16,R30
000888 071f      	CPC  R17,R31
000889 f428      	BRSH _0x79
         ;     875 		write_rtl(RDMAPORT,packet[enetpacketDest0+i]);
00088a 940e 15f1 	CALL SUBOPT_0x1C
00088c   +  	__ADDWRN 16,17,1
00088c 5f0f      	SUBI R0x10,LOW(-0x1)
00088d 4f1f      	SBCI R0x11,HIGH(-0x1)
          	.ENDM
00088e cff4      	RJMP _0x78
          _0x79:
         ;     876 	byte_read = 0;
00088f 27ee      	CLR  R30
000890 93e0 054c 	STS  _byte_read,R30
         ;     877 	while(!(byte_read & RDC))
          _0x7A:
000892 91e0 054c 	LDS  R30,_byte_read
000894 74e0      	ANDI R30,LOW(0x40)
000895 f419      	BRNE _0x7C
         ;     878 		read_rtl(ISR);
000896 940e 14fb 	CALL SUBOPT_0xA
000898 cff9      	RJMP _0x7A
          _0x7C:
         ;     879 	write_rtl(TBCR0, data_L);
000899 940e 15f9 	CALL SUBOPT_0x1D
         ;     880 	write_rtl(TBCR1, data_H);
         ;     881 	write_rtl(CR,0x24);
         ;     882 }
00089b 9109      	LD   R16,Y+
00089c 9119      	LD   R17,Y+
00089d 9508      	RET
         ;     883 void dhcp_setip()
         ;     884 {
          _dhcp_setip:
         ;     885 	//build the IP header
         ;     886 	//destination ip = 255.255.255.255
         ;     887 	packet[ip_destaddr] = 0xFF;
00089e efef      	LDI  R30,LOW(255)
00089f   +  	__PUTB1MN _packet,30
00089f 93e0 02a2 	STS  _packet+0x1e,R30
          	.ENDM
         ;     888 	packet[ip_destaddr + 1] = 0xFF;
0008a1   +  	__PUTB1MN _packet,31
0008a1 93e0 02a3 	STS  _packet+0x1f,R30
          	.ENDM
         ;     889 	packet[ip_destaddr + 2] = 0xFF;
0008a3   +  	__PUTB1MN _packet,32
0008a3 93e0 02a4 	STS  _packet+0x20,R30
          	.ENDM
         ;     890 	packet[ip_destaddr + 3] = 0xFF;
0008a5   +  	__PUTB1MN _packet,33
0008a5 93e0 02a5 	STS  _packet+0x21,R30
          	.ENDM
         ;     891 	//source IP = 0.0.0.0
         ;     892 	packet[ip_srcaddr] =  	  0;
0008a7 27ee      	CLR  R30
0008a8   +  	__PUTB1MN _packet,26
0008a8 93e0 029e 	STS  _packet+0x1a,R30
          	.ENDM
         ;     893 	packet[ip_srcaddr + 1] =  0;
0008aa   +  	__PUTB1MN _packet,27
0008aa 93e0 029f 	STS  _packet+0x1b,R30
          	.ENDM
         ;     894 	packet[ip_srcaddr + 2] =  0;
0008ac   +  	__PUTB1MN _packet,28
0008ac 93e0 02a0 	STS  _packet+0x1c,R30
          	.ENDM
         ;     895 	packet[ip_srcaddr + 3] =  0;
0008ae   +  	__PUTB1MN _packet,29
0008ae 93e0 02a1 	STS  _packet+0x1d,R30
          	.ENDM
         ;     896 	//you don't know the destination MAC
         ;     897 	packet[enetpacketDest0] = 255;
0008b0 efef      	LDI  R30,LOW(255)
0008b1 93e0 0284 	STS  _packet,R30
         ;     898 	packet[enetpacketDest1] = 255;
0008b3   +  	__PUTB1MN _packet,1
0008b3 93e0 0285 	STS  _packet+0x1,R30
          	.ENDM
         ;     899 	packet[enetpacketDest2] = 255;
0008b5   +  	__PUTB1MN _packet,2
0008b5 93e0 0286 	STS  _packet+0x2,R30
          	.ENDM
         ;     900 	packet[enetpacketDest3] = 255;
0008b7   +  	__PUTB1MN _packet,3
0008b7 93e0 0287 	STS  _packet+0x3,R30
          	.ENDM
         ;     901 	packet[enetpacketDest4] = 255;
0008b9   +  	__PUTB1MN _packet,4
0008b9 93e0 0288 	STS  _packet+0x4,R30
          	.ENDM
         ;     902 	packet[enetpacketDest5] = 255;
0008bb   +  	__PUTB1MN _packet,5
0008bb 93e0 0289 	STS  _packet+0x5,R30
          	.ENDM
         ;     903 	//make ethernet module mac address the source address
         ;     904 	packet[enetpacketSrc0] = MYMAC[0];
0008bd 91e0 027a 	LDS  R30,_MYMAC
0008bf   +  	__PUTB1MN _packet,6
0008bf 93e0 028a 	STS  _packet+0x6,R30
          	.ENDM
         ;     905 	packet[enetpacketSrc1] = MYMAC[1];
0008c1   +  	__GETB1MN _MYMAC,1
0008c1 91e0 027b 	LDS  R30,_mymac+0x1
          	.ENDM
0008c3   +  	__PUTB1MN _packet,7
0008c3 93e0 028b 	STS  _packet+0x7,R30
          	.ENDM
         ;     906 	packet[enetpacketSrc2] = MYMAC[2];
0008c5   +  	__GETB1MN _MYMAC,2
0008c5 91e0 027c 	LDS  R30,_mymac+0x2
          	.ENDM
0008c7   +  	__PUTB1MN _packet,8
0008c7 93e0 028c 	STS  _packet+0x8,R30
          	.ENDM
         ;     907 	packet[enetpacketSrc3] = MYMAC[3];
0008c9   +  	__GETB1MN _MYMAC,3
0008c9 91e0 027d 	LDS  R30,_mymac+0x3
          	.ENDM
0008cb   +  	__PUTB1MN _packet,9
0008cb 93e0 028d 	STS  _packet+0x9,R30
          	.ENDM
         ;     908 	packet[enetpacketSrc4] = MYMAC[4];
0008cd   +  	__GETB1MN _MYMAC,4
0008cd 91e0 027e 	LDS  R30,_mymac+0x4
          	.ENDM
0008cf   +  	__PUTB1MN _packet,10
0008cf 93e0 028e 	STS  _packet+0xa,R30
          	.ENDM
         ;     909 	packet[enetpacketSrc5] = MYMAC[5];
0008d1   +  	__GETB1MN _MYMAC,5
0008d1 91e0 027f 	LDS  R30,_mymac+0x5
          	.ENDM
0008d3   +  	__PUTB1MN _packet,11
0008d3 93e0 028f 	STS  _packet+0xb,R30
          	.ENDM
         ;     910 	//calculate IP packet length done by the respective protocols
         ;     911 	packet[enetpacketType0] = 0x08;
0008d5 e0e8      	LDI  R30,LOW(8)
0008d6   +  	__PUTB1MN _packet,12
0008d6 93e0 0290 	STS  _packet+0xc,R30
          	.ENDM
         ;     912 	packet[enetpacketType1] = 0x00;
0008d8 27ee      	CLR  R30
0008d9   +  	__PUTB1MN _packet,13
0008d9 93e0 0291 	STS  _packet+0xd,R30
          	.ENDM
         ;     913 	//set IP header length to 20 bytes
         ;     914 	packet[ip_vers_len] = 0x45;
0008db e4e5      	LDI  R30,LOW(69)
0008dc   +  	__PUTB1MN _packet,14
0008dc 93e0 0292 	STS  _packet+0xe,R30
          	.ENDM
         ;     915 	//1st step in getting an IP address
         ;     916 }
0008de 9508      	RET
         ;     917 #include "dhcp.h"
         ;     918 /*dhcp.c library source file
         ;     919 created by Eric Mesa
         ;     920 
         ;     921 *********************************
         ;     922 ver 0.1 10 Apr 2005
         ;     923 created dhcp.c
         ;     924 simply an implementation
         ;     925 of what Jeremy had written
         ;     926 without any extra optimizations
         ;     927 outside of what we had fixed
         ;     928 as of atmelwebserver.c ver 0.94.1
         ;     929 *********************************
         ;     930 
         ;     931 goes along with dchp.h
         ;     932 header file
         ;     933 */
         ;     934 
         ;     935 /*
         ;     936 ******************************************************
         ;     937 * DHCP for obtaining IP from router port 67~68 using UDP
         ;     938 ******************************************************
         ;     939 */
         ;     940 
         ;     941 void dhcp()
         ;     942 {
          _dhcp:
         ;     943 	unsigned char i;
         ;     944 	if(dhcpstate == DHCP_DIS)
0008df 930a      	ST   -Y,R16
         ;	i -> R16
0008e0 91e0 0540 	LDS  R30,_dhcpstate
0008e2 91f0 0541 	LDS  R31,_dhcpstate+1
0008e4 9730      	SBIW R30,0
0008e5 f011      	BREQ PC+3
0008e6 940c 0976 	JMP _0x80
         ;     945 	{
         ;     946 		//listen to broadcast
         ;     947 		for(i=0;i<4;i++)
0008e8 e000      	LDI  R16,LOW(0)
          _0x82:
0008e9 3004      	CPI  R16,4
0008ea f420      	BRSH _0x83
         ;     948 			MYIP[i] = 255;
0008eb 940e 1608 	CALL SUBOPT_0x1E
0008ed 5f0f      	SUBI R16,-1
0008ee cffa      	RJMP _0x82
          _0x83:
         ;     949 		packet[DHCP_op] = 1;
0008ef e0e1      	LDI  R30,LOW(1)
0008f0   +  	__PUTB1MN _packet,42
0008f0 93e0 02ae 	STS  _packet+0x2a,R30
          	.ENDM
         ;     950 		packet[DHCP_htype] = 1;
0008f2   +  	__PUTB1MN _packet,43
0008f2 93e0 02af 	STS  _packet+0x2b,R30
          	.ENDM
         ;     951 		packet[DHCP_hlen] = 6;
0008f4 e0e6      	LDI  R30,LOW(6)
0008f5   +  	__PUTB1MN _packet,44
0008f5 93e0 02b0 	STS  _packet+0x2c,R30
          	.ENDM
         ;     952 		packet[DHCP_hops] = 0;
0008f7 27ee      	CLR  R30
0008f8   +  	__PUTB1MN _packet,45
0008f8 93e0 02b1 	STS  _packet+0x2d,R30
          	.ENDM
         ;     953 		packet[DHCP_xid] = make8(0x31257A1D,3);
0008fa e3e1      	LDI  R30,LOW(49)
0008fb   +  	__PUTB1MN _packet,46
0008fb 93e0 02b2 	STS  _packet+0x2e,R30
          	.ENDM
         ;     954 		packet[DHCP_xid+1] = make8(0x31257A1D,2);
0008fd e2e5      	LDI  R30,LOW(37)
0008fe   +  	__PUTB1MN _packet,47
0008fe 93e0 02b3 	STS  _packet+0x2f,R30
          	.ENDM
         ;     955 		packet[DHCP_xid+2] = make8(0x31257A1D,1);
000900 e7ea      	LDI  R30,LOW(122)
000901   +  	__PUTB1MN _packet,48
000901 93e0 02b4 	STS  _packet+0x30,R30
          	.ENDM
         ;     956 		packet[DHCP_xid+3] = make8(0x31257A1D,0);
000903 e1ed      	LDI  R30,LOW(29)
000904   +  	__PUTB1MN _packet,49
000904 93e0 02b5 	STS  _packet+0x31,R30
          	.ENDM
         ;     957 		for(i=DHCP_secs;i<DHCP_chaddr;i++)
000906 e302      	LDI  R16,LOW(50)
          _0x85:
000907 3406      	CPI  R16,70
000908 f420      	BRSH _0x86
         ;     958 			packet[i]=0;
000909 940e 160f 	CALL SUBOPT_0x1F
00090b 5f0f      	SUBI R16,-1
00090c cffa      	RJMP _0x85
          _0x86:
         ;     959 		for(i=0;i<6;i++)
00090d e000      	LDI  R16,LOW(0)
          _0x88:
00090e 3006      	CPI  R16,6
00090f f458      	BRSH _0x89
         ;     960 			packet[DHCP_chaddr+i] = MYMAC[i];
000910 940e 1616 	CALL SUBOPT_0x20
000912 93ff      	PUSH R31
000913 93ef      	PUSH R30
000914 940e 161c 	CALL SUBOPT_0x21
000916 91af      	POP  R26
000917 91bf      	POP  R27
000918 93ec      	ST   X,R30
000919 5f0f      	SUBI R16,-1
00091a cff3      	RJMP _0x88
          _0x89:
         ;     961 		for(i=0;i<10;i++)
00091b e000      	LDI  R16,LOW(0)
          _0x8B:
00091c 300a      	CPI  R16,10
00091d f420      	BRSH _0x8C
         ;     962 			packet[DHCP_chaddr+6+i] = 0;
00091e 940e 1622 	CALL SUBOPT_0x22
000920 5f0f      	SUBI R16,-1
000921 cffa      	RJMP _0x8B
          _0x8C:
         ;     963 		for(i=0;i<192;i++)
000922 e000      	LDI  R16,LOW(0)
          _0x8E:
000923 3c00      	CPI  R16,192
000924 f420      	BRSH _0x8F
         ;     964 			packet[DHCP_sname+i]=0;
000925 940e 162b 	CALL SUBOPT_0x23
000927 5f0f      	SUBI R16,-1
000928 cffa      	RJMP _0x8E
          _0x8F:
         ;     965 		//magic cookie
         ;     966 		packet[DHCP_options] = 99;
000929 e6e3      	LDI  R30,LOW(99)
00092a   +  	__PUTB1MN _packet,278
00092a 93e0 039a 	STS  _packet+0x116,R30
          	.ENDM
         ;     967 		packet[DHCP_options+1] = 130;
00092c e8e2      	LDI  R30,LOW(130)
00092d   +  	__PUTB1MN _packet,279
00092d 93e0 039b 	STS  _packet+0x117,R30
          	.ENDM
         ;     968 		packet[DHCP_options+2] = 83;
00092f e5e3      	LDI  R30,LOW(83)
000930   +  	__PUTB1MN _packet,280
000930 93e0 039c 	STS  _packet+0x118,R30
          	.ENDM
         ;     969 		packet[DHCP_options+3] = 99;
000932 e6e3      	LDI  R30,LOW(99)
000933   +  	__PUTB1MN _packet,281
000933 93e0 039d 	STS  _packet+0x119,R30
          	.ENDM
         ;     970 		//message type
         ;     971 		packet[DHCP_options+4] = 53;
000935 e3e5      	LDI  R30,LOW(53)
000936   +  	__PUTB1MN _packet,282
000936 93e0 039e 	STS  _packet+0x11a,R30
          	.ENDM
         ;     972 		packet[DHCP_options+5] = 1;
000938 e0e1      	LDI  R30,LOW(1)
000939   +  	__PUTB1MN _packet,283
000939 93e0 039f 	STS  _packet+0x11b,R30
          	.ENDM
         ;     973 		//DHCP_DISCOVER
         ;     974 		packet[DHCP_options+6] = 1;
00093b   +  	__PUTB1MN _packet,284
00093b 93e0 03a0 	STS  _packet+0x11c,R30
          	.ENDM
         ;     975 		//Client Identifier
         ;     976 		packet[DHCP_options+7] = 61;
00093d e3ed      	LDI  R30,LOW(61)
00093e   +  	__PUTB1MN _packet,285
00093e 93e0 03a1 	STS  _packet+0x11d,R30
          	.ENDM
         ;     977 		packet[DHCP_options+8] = 7;
000940 e0e7      	LDI  R30,LOW(7)
000941   +  	__PUTB1MN _packet,286
000941 93e0 03a2 	STS  _packet+0x11e,R30
          	.ENDM
         ;     978 		packet[DHCP_options+9] = 1;
000943 e0e1      	LDI  R30,LOW(1)
000944   +  	__PUTB1MN _packet,287
000944 93e0 03a3 	STS  _packet+0x11f,R30
          	.ENDM
         ;     979 		for(i=0;i<6;i++)
000946 e000      	LDI  R16,LOW(0)
          _0x91:
000947 3006      	CPI  R16,6
000948 f458      	BRSH _0x92
         ;     980 			packet[DHCP_options+10+i] = MYMAC[i];
000949 940e 1634 	CALL SUBOPT_0x24
00094b 93ff      	PUSH R31
00094c 93ef      	PUSH R30
00094d 940e 161c 	CALL SUBOPT_0x21
00094f 91af      	POP  R26
000950 91bf      	POP  R27
000951 93ec      	ST   X,R30
000952 5f0f      	SUBI R16,-1
000953 cff3      	RJMP _0x91
          _0x92:
         ;     981 		//END OPTIONS
         ;     982 		packet[DHCP_options+16] = 255;
000954 efef      	LDI  R30,LOW(255)
000955   +  	__PUTB1MN _packet,294
000955 93e0 03aa 	STS  _packet+0x126,R30
          	.ENDM
         ;     983 		//lenght of UDP datagram = 8bytes; length of DHCP data = 236 bytes + options
         ;     984 		dhcpoptlen = 17;
000957 e1e1      	LDI  R30,LOW(17)
000958 e0f0      	LDI  R31,HIGH(17)
000959 940e 163d 	CALL SUBOPT_0x25
         ;     985 		packet[UDP_len] = make8(244+dhcpoptlen,1);
00095b   +  	__PUTB1MN _packet,38
00095b 93e0 02aa 	STS  _packet+0x26,R30
          	.ENDM
         ;     986 		packet[UDP_len+1] = make8(244+dhcpoptlen,0);
00095d 940e 1647 	CALL SUBOPT_0x26
00095f   +  	__PUTB1MN _packet,39
00095f 93e0 02ab 	STS  _packet+0x27,R30
          	.ENDM
         ;     987 		dhcp_setip();
000961 940e 089e 	CALL _dhcp_setip
         ;     988 		udp_send();
000963 940e 07e5 	CALL _udp_send
         ;     989 		for(i=0;i<4;i++)
000965 e000      	LDI  R16,LOW(0)
          _0x94:
000966 3004      	CPI  R16,4
000967 f420      	BRSH _0x95
         ;     990 			MYIP[i] = 255;
000968 940e 1608 	CALL SUBOPT_0x1E
00096a 5f0f      	SUBI R16,-1
00096b cffa      	RJMP _0x94
          _0x95:
         ;     991 		DHCP_wait = 1;
00096c e0e1      	LDI  R30,LOW(1)
00096d e0f0      	LDI  R31,HIGH(1)
00096e 93e0 0546 	STS  _DHCP_wait,R30
000970 93f0 0547 	STS  _DHCP_wait+1,R31
         ;     992 		//wait for DHCP offer
         ;     993 		dhcpstate = DHCP_OFF;
000972 93e0 0540 	STS  _dhcpstate,R30
000974 93f0 0541 	STS  _dhcpstate+1,R31
         ;     994 	}
         ;     995 	//if we have an offer from the server
         ;     996 	if(dhcpstate == DHCP_OFF) // && packet[ip_srcaddr] && packet[ip_srcaddr +1] && packet[ip_srcaddr + 2] && packet[ip_srcaddr+3])
          _0x80:
000976 91a0 0540 	LDS  R26,_dhcpstate
000978 91b0 0541 	LDS  R27,_dhcpstate+1
00097a 30a1      	CPI  R26,LOW(0x1)
00097b e0e0      	LDI  R30,HIGH(0x1)
00097c 07be      	CPC  R27,R30
00097d f011      	BREQ PC+3
00097e 940c 0abf 	JMP _0x96
         ;     997 	{
         ;     998 		//check transaction id adn message type
         ;     999 		if((DHCP_wait == 2) || ((make32(packet[DHCP_xid], packet[DHCP_xid+1], packet[DHCP_xid+2],packet[DHCP_xid+3]) == 0x31257A1D) && (packet[DHCP_options+4] == 53) && (packet[DHCP_options+5] == 1) && (packet[DHCP_options+6] ==2)))
000980 91a0 0546 	LDS  R26,_DHCP_wait
000982 91b0 0547 	LDS  R27,_DHCP_wait+1
000984 30a2      	CPI  R26,LOW(0x2)
000985 e0e0      	LDI  R30,HIGH(0x2)
000986 07be      	CPC  R27,R30
000987 f411      	BRNE PC+3
000988 940c 09d1 	JMP _0x98
00098a   +  	__GETB1MN _packet,46
00098a 91e0 02b2 	LDS  R30,_packet+0x2e
          	.ENDM
00098c 940e 1652 	CALL SUBOPT_0x27
00098e 937f      	PUSH R23
00098f 936f      	PUSH R22
000990 93ff      	PUSH R31
000991 93ef      	PUSH R30
000992   +  	__GETB1MN _packet,47
000992 91e0 02b3 	LDS  R30,_packet+0x2f
          	.ENDM
000994 27ff      	CLR  R31
000995 2766      	CLR  R22
000996 2777      	CLR  R23
000997 940e 1820 	CALL __LSLD16
000999 91af      	POP  R26
00099a 91bf      	POP  R27
00099b 918f      	POP  R24
00099c 919f      	POP  R25
00099d 940e 1800 	CALL __ADDD12
00099f 937f      	PUSH R23
0009a0 936f      	PUSH R22
0009a1 93ff      	PUSH R31
0009a2 93ef      	PUSH R30
0009a3   +  	__GETB1MN _packet,48
0009a3 91e0 02b4 	LDS  R30,_packet+0x30
          	.ENDM
0009a5 940e 165b 	CALL SUBOPT_0x28
0009a7 91af      	POP  R26
0009a8 91bf      	POP  R27
0009a9 918f      	POP  R24
0009aa 919f      	POP  R25
0009ab 940e 1800 	CALL __ADDD12
0009ad 937f      	PUSH R23
0009ae 936f      	PUSH R22
0009af 93ff      	PUSH R31
0009b0 93ef      	PUSH R30
0009b1   +  	__GETB1MN _packet,49
0009b1 91e0 02b5 	LDS  R30,_packet+0x31
          	.ENDM
0009b3 27ff      	CLR  R31
0009b4 2766      	CLR  R22
0009b5 2777      	CLR  R23
0009b6 91af      	POP  R26
0009b7 91bf      	POP  R27
0009b8 918f      	POP  R24
0009b9 919f      	POP  R25
0009ba 940e 1805 	CALL __ADDD21
0009bc   +  	__CPD2N 0x31257A1D
0009bc 31ad      	CPI  R26,LOW(0x31257a1d)
0009bd e7ea      	LDI  R30,HIGH(0x31257a1d)
0009be 07be      	CPC  R27,R30
0009bf e2e5      	LDI  R30,BYTE3(0x31257a1d)
0009c0 078e      	CPC  R24,R30
0009c1 e3e1      	LDI  R30,BYTE4(0x31257a1d)
0009c2 079e      	CPC  R25,R30
          	.ENDM
0009c3 f461      	BRNE _0x99
0009c4   +  	__GETB1MN _packet,282
0009c4 91e0 039e 	LDS  R30,_packet+0x11a
          	.ENDM
0009c6 33e5      	CPI  R30,LOW(0x35)
0009c7 f441      	BRNE _0x99
0009c8   +  	__GETB1MN _packet,283
0009c8 91e0 039f 	LDS  R30,_packet+0x11b
          	.ENDM
0009ca 30e1      	CPI  R30,LOW(0x1)
0009cb f421      	BRNE _0x99
0009cc   +  	__GETB1MN _packet,284
0009cc 91e0 03a0 	LDS  R30,_packet+0x11c
          	.ENDM
0009ce 30e2      	CPI  R30,LOW(0x2)
0009cf f009      	BREQ _0x98
          _0x99:
0009d0 c0ee      	RJMP _0x97
          _0x98:
         ;    1000 		{
         ;    1001 			if(DHCP_wait == 1)
0009d1 91a0 0546 	LDS  R26,_DHCP_wait
0009d3 91b0 0547 	LDS  R27,_DHCP_wait+1
0009d5 30a1      	CPI  R26,LOW(0x1)
0009d6 e0e0      	LDI  R30,HIGH(0x1)
0009d7 07be      	CPC  R27,R30
0009d8 f4e1      	BRNE _0x9C
         ;    1002 			for(i=0;i<4;i++)
0009d9 e000      	LDI  R16,LOW(0)
          _0x9E:
0009da 3004      	CPI  R16,4
0009db f4c8      	BRSH _0x9F
         ;    1003 			{
         ;    1004 				req_ip[i] = packet[DHCP_yiaddr+i];
0009dc 940e 1664 	CALL SUBOPT_0x29
0009de 93ff      	PUSH R31
0009df 93ef      	PUSH R30
0009e0 940e 1669 	CALL SUBOPT_0x2A
0009e2 81e0      	LD   R30,Z
0009e3 91af      	POP  R26
0009e4 91bf      	POP  R27
0009e5 93ec      	ST   X,R30
         ;    1005 				serverid[i]= packet[ip_srcaddr+i];
0009e6 940e 166f 	CALL SUBOPT_0x2B
0009e8 93ff      	PUSH R31
0009e9 93ef      	PUSH R30
0009ea 2fe0      	MOV  R30,R16
0009eb 5ee6      	SUBI R30,-LOW(26)
0009ec 27ff      	CLR  R31
0009ed 57ec      	SUBI R30,LOW(-_packet)
0009ee 4ffd      	SBCI R31,HIGH(-_packet)
0009ef 81e0      	LD   R30,Z
0009f0 91af      	POP  R26
0009f1 91bf      	POP  R27
0009f2 93ec      	ST   X,R30
         ;    1006 			}
0009f3 5f0f      	SUBI R16,-1
0009f4 cfe5      	RJMP _0x9E
          _0x9F:
         ;    1007 			//stop resending discover
         ;    1008 			DHCP_wait = 2;
          _0x9C:
0009f5 e0e2      	LDI  R30,LOW(2)
0009f6 e0f0      	LDI  R31,HIGH(2)
0009f7 93e0 0546 	STS  _DHCP_wait,R30
0009f9 93f0 0547 	STS  _DHCP_wait+1,R31
         ;    1009 			// listen to broadcast
         ;    1010 			for(i=0;i<4;i++)
0009fb e000      	LDI  R16,LOW(0)
          _0xA1:
0009fc 3004      	CPI  R16,4
0009fd f420      	BRSH _0xA2
         ;    1011 				MYIP[i] = 255;
0009fe 940e 1608 	CALL SUBOPT_0x1E
000a00 5f0f      	SUBI R16,-1
000a01 cffa      	RJMP _0xA1
          _0xA2:
         ;    1012 			//assemble DHCP_req
         ;    1013 			packet[DHCP_op] = 1;
000a02 e0e1      	LDI  R30,LOW(1)
000a03   +  	__PUTB1MN _packet,42
000a03 93e0 02ae 	STS  _packet+0x2a,R30
          	.ENDM
         ;    1014 			packet[DHCP_htype] = 1;
000a05   +  	__PUTB1MN _packet,43
000a05 93e0 02af 	STS  _packet+0x2b,R30
          	.ENDM
         ;    1015 			packet[DHCP_hlen] = 6;
000a07 e0e6      	LDI  R30,LOW(6)
000a08   +  	__PUTB1MN _packet,44
000a08 93e0 02b0 	STS  _packet+0x2c,R30
          	.ENDM
         ;    1016 			packet[DHCP_hops] = 0;
000a0a 27ee      	CLR  R30
000a0b   +  	__PUTB1MN _packet,45
000a0b 93e0 02b1 	STS  _packet+0x2d,R30
          	.ENDM
         ;    1017 			packet[DHCP_xid] = make8(0x31257A1D,3);
000a0d e3e1      	LDI  R30,LOW(49)
000a0e   +  	__PUTB1MN _packet,46
000a0e 93e0 02b2 	STS  _packet+0x2e,R30
          	.ENDM
         ;    1018 			packet[DHCP_xid+1] = make8(0x31257A1D,2);
000a10 e2e5      	LDI  R30,LOW(37)
000a11   +  	__PUTB1MN _packet,47
000a11 93e0 02b3 	STS  _packet+0x2f,R30
          	.ENDM
         ;    1019 			packet[DHCP_xid+2] = make8(0x31257A1D,1);
000a13 e7ea      	LDI  R30,LOW(122)
000a14   +  	__PUTB1MN _packet,48
000a14 93e0 02b4 	STS  _packet+0x30,R30
          	.ENDM
         ;    1020 			//fixed typeo, this was +1 and should be +3, fixed 7 Apr 2005
         ;    1021 			packet[DHCP_xid+3] = make8(0x31257A1D,0);
000a16 e1ed      	LDI  R30,LOW(29)
000a17   +  	__PUTB1MN _packet,49
000a17 93e0 02b5 	STS  _packet+0x31,R30
          	.ENDM
         ;    1022 			for(i=DHCP_secs;i<DHCP_yiaddr;i++)
000a19 e302      	LDI  R16,LOW(50)
          _0xA4:
000a1a 330a      	CPI  R16,58
000a1b f420      	BRSH _0xA5
         ;    1023 				packet[i]=0;
000a1c 940e 160f 	CALL SUBOPT_0x1F
000a1e 5f0f      	SUBI R16,-1
000a1f cffa      	RJMP _0xA4
          _0xA5:
         ;    1024 			for(i=DHCP_siaddr;i<DHCP_chaddr;i++)
000a20 e30e      	LDI  R16,LOW(62)
          _0xA7:
000a21 3406      	CPI  R16,70
000a22 f420      	BRSH _0xA8
         ;    1025 			           packet[i]=0;
000a23 940e 160f 	CALL SUBOPT_0x1F
000a25 5f0f      	SUBI R16,-1
000a26 cffa      	RJMP _0xA7
          _0xA8:
         ;    1026 			for(i=0;i<6;i++)
000a27 e000      	LDI  R16,LOW(0)
          _0xAA:
000a28 3006      	CPI  R16,6
000a29 f458      	BRSH _0xAB
         ;    1027 				packet[DHCP_chaddr+i] = MYMAC[i];
000a2a 940e 1616 	CALL SUBOPT_0x20
000a2c 93ff      	PUSH R31
000a2d 93ef      	PUSH R30
000a2e 940e 161c 	CALL SUBOPT_0x21
000a30 91af      	POP  R26
000a31 91bf      	POP  R27
000a32 93ec      	ST   X,R30
000a33 5f0f      	SUBI R16,-1
000a34 cff3      	RJMP _0xAA
          _0xAB:
         ;    1028 			for(i=0;i<10;i++)
000a35 e000      	LDI  R16,LOW(0)
          _0xAD:
000a36 300a      	CPI  R16,10
000a37 f420      	BRSH _0xAE
         ;    1029 				packet[DHCP_chaddr+6+i] = 0;
000a38 940e 1622 	CALL SUBOPT_0x22
000a3a 5f0f      	SUBI R16,-1
000a3b cffa      	RJMP _0xAD
          _0xAE:
         ;    1030 			for(i=0;i<192;i++)
000a3c e000      	LDI  R16,LOW(0)
          _0xB0:
000a3d 3c00      	CPI  R16,192
000a3e f420      	BRSH _0xB1
         ;    1031 				packet[DHCP_sname+i]=0;
000a3f 940e 162b 	CALL SUBOPT_0x23
000a41 5f0f      	SUBI R16,-1
000a42 cffa      	RJMP _0xB0
          _0xB1:
         ;    1032 			//magic cookie
         ;    1033 			packet[DHCP_options] = 99;
000a43 e6e3      	LDI  R30,LOW(99)
000a44   +  	__PUTB1MN _packet,278
000a44 93e0 039a 	STS  _packet+0x116,R30
          	.ENDM
         ;    1034 			packet[DHCP_options+1] = 130;
000a46 e8e2      	LDI  R30,LOW(130)
000a47   +  	__PUTB1MN _packet,279
000a47 93e0 039b 	STS  _packet+0x117,R30
          	.ENDM
         ;    1035 			packet[DHCP_options+2] = 83;
000a49 e5e3      	LDI  R30,LOW(83)
000a4a   +  	__PUTB1MN _packet,280
000a4a 93e0 039c 	STS  _packet+0x118,R30
          	.ENDM
         ;    1036 			packet[DHCP_options+3] = 99;
000a4c e6e3      	LDI  R30,LOW(99)
000a4d   +  	__PUTB1MN _packet,281
000a4d 93e0 039d 	STS  _packet+0x119,R30
          	.ENDM
         ;    1037 			//message type
         ;    1038 			packet[DHCP_options+4] = 53;
000a4f e3e5      	LDI  R30,LOW(53)
000a50   +  	__PUTB1MN _packet,282
000a50 93e0 039e 	STS  _packet+0x11a,R30
          	.ENDM
         ;    1039 			packet[DHCP_options+5] = 1;
000a52 e0e1      	LDI  R30,LOW(1)
000a53   +  	__PUTB1MN _packet,283
000a53 93e0 039f 	STS  _packet+0x11b,R30
          	.ENDM
         ;    1040 			//DHCP_REQUEST
         ;    1041 			packet[DHCP_options+6] =  3;
000a55 e0e3      	LDI  R30,LOW(3)
000a56   +  	__PUTB1MN _packet,284
000a56 93e0 03a0 	STS  _packet+0x11c,R30
          	.ENDM
         ;    1042 			//Client Identifier
         ;    1043 			packet[DHCP_options+7] = 61;
000a58 e3ed      	LDI  R30,LOW(61)
000a59   +  	__PUTB1MN _packet,285
000a59 93e0 03a1 	STS  _packet+0x11d,R30
          	.ENDM
         ;    1044 			packet[DHCP_options+8] = 7;
000a5b e0e7      	LDI  R30,LOW(7)
000a5c   +  	__PUTB1MN _packet,286
000a5c 93e0 03a2 	STS  _packet+0x11e,R30
          	.ENDM
         ;    1045 			packet[DHCP_options+9] = 1;
000a5e e0e1      	LDI  R30,LOW(1)
000a5f   +  	__PUTB1MN _packet,287
000a5f 93e0 03a3 	STS  _packet+0x11f,R30
          	.ENDM
         ;    1046 			for(i=0;i<6;i++)
000a61 e000      	LDI  R16,LOW(0)
          _0xB3:
000a62 3006      	CPI  R16,6
000a63 f458      	BRSH _0xB4
         ;    1047 				packet[DHCP_options+10+i] = MYMAC[i];
000a64 940e 1634 	CALL SUBOPT_0x24
000a66 93ff      	PUSH R31
000a67 93ef      	PUSH R30
000a68 940e 161c 	CALL SUBOPT_0x21
000a6a 91af      	POP  R26
000a6b 91bf      	POP  R27
000a6c 93ec      	ST   X,R30
000a6d 5f0f      	SUBI R16,-1
000a6e cff3      	RJMP _0xB3
          _0xB4:
         ;    1048 			//Requested IP address
         ;    1049 			packet[DHCP_options+16]=50;
000a6f e3e2      	LDI  R30,LOW(50)
000a70   +  	__PUTB1MN _packet,294
000a70 93e0 03aa 	STS  _packet+0x126,R30
          	.ENDM
         ;    1050 			packet[DHCP_options+17]=4;
000a72 e0e4      	LDI  R30,LOW(4)
000a73   +  	__PUTB1MN _packet,295
000a73 93e0 03ab 	STS  _packet+0x127,R30
          	.ENDM
         ;    1051 			for(i=0;i<4;i++)
000a75 e000      	LDI  R16,LOW(0)
          _0xB6:
000a76 3004      	CPI  R16,4
000a77 f478      	BRSH _0xB7
         ;    1052 				packet[DHCP_options+18+i] = req_ip[i];
000a78 2fe0      	MOV  R30,R16
000a79 e2a8      	LDI  R26,LOW(296)
000a7a e0b1      	LDI  R27,HIGH(296)
000a7b 940e 1674 	CALL SUBOPT_0x2C
000a7d 93ff      	PUSH R31
000a7e 93ef      	PUSH R30
000a7f 940e 1664 	CALL SUBOPT_0x29
000a81 81e0      	LD   R30,Z
000a82 91af      	POP  R26
000a83 91bf      	POP  R27
000a84 93ec      	ST   X,R30
000a85 5f0f      	SUBI R16,-1
000a86 cfef      	RJMP _0xB6
          _0xB7:
         ;    1053 			for(i=0;i<4;i++)
000a87 e000      	LDI  R16,LOW(0)
          _0xB9:
000a88 3004      	CPI  R16,4
000a89 f430      	BRSH _0xBA
         ;    1054 				packet[DHCP_yiaddr+i]=0;
000a8a 940e 1669 	CALL SUBOPT_0x2A
000a8c 940e 167a 	CALL SUBOPT_0x2D
000a8e 5f0f      	SUBI R16,-1
000a8f cff8      	RJMP _0xB9
          _0xBA:
         ;    1055 			//server ID
         ;    1056 			packet[DHCP_options+22] = 54;
000a90 e3e6      	LDI  R30,LOW(54)
000a91   +  	__PUTB1MN _packet,300
000a91 93e0 03b0 	STS  _packet+0x12c,R30
          	.ENDM
         ;    1057 			packet[DHCP_options+23] = 4;
000a93 e0e4      	LDI  R30,LOW(4)
000a94   +  	__PUTB1MN _packet,301
000a94 93e0 03b1 	STS  _packet+0x12d,R30
          	.ENDM
         ;    1058 			for(i=0;i<4;i++)
000a96 e000      	LDI  R16,LOW(0)
          _0xBC:
000a97 3004      	CPI  R16,4
000a98 f478      	BRSH _0xBD
         ;    1059 				packet[DHCP_options+24+i] = serverid[i];
000a99 2fe0      	MOV  R30,R16
000a9a e2ae      	LDI  R26,LOW(302)
000a9b e0b1      	LDI  R27,HIGH(302)
000a9c 940e 1674 	CALL SUBOPT_0x2C
000a9e 93ff      	PUSH R31
000a9f 93ef      	PUSH R30
000aa0 940e 166f 	CALL SUBOPT_0x2B
000aa2 81e0      	LD   R30,Z
000aa3 91af      	POP  R26
000aa4 91bf      	POP  R27
000aa5 93ec      	ST   X,R30
000aa6 5f0f      	SUBI R16,-1
000aa7 cfef      	RJMP _0xBC
          _0xBD:
         ;    1060 			//END OPTIONS
         ;    1061 			packet[DHCP_options + 28] = 255;
000aa8 efef      	LDI  R30,LOW(255)
000aa9   +  	__PUTB1MN _packet,306
000aa9 93e0 03b6 	STS  _packet+0x132,R30
          	.ENDM
         ;    1062 			//length of UDP datagram = 8bytes; length of DHCP data = 235 bytes + options
         ;    1063 			dhcpoptlen = 29;
000aab e1ed      	LDI  R30,LOW(29)
000aac e0f0      	LDI  R31,HIGH(29)
000aad 940e 163d 	CALL SUBOPT_0x25
         ;    1064 			packet[UDP_len] = make8(244+dhcpoptlen,1);
000aaf   +  	__PUTB1MN _packet,38
000aaf 93e0 02aa 	STS  _packet+0x26,R30
          	.ENDM
         ;    1065 			packet[UDP_len+1] = make8(244+dhcpoptlen,0);
000ab1 940e 1647 	CALL SUBOPT_0x26
000ab3   +  	__PUTB1MN _packet,39
000ab3 93e0 02ab 	STS  _packet+0x27,R30
          	.ENDM
         ;    1066 			//make a DHCP request
         ;    1067 			dhcp_setip();
000ab5 940e 089e 	CALL _dhcp_setip
         ;    1068 			udp_send();
000ab7 940e 07e5 	CALL _udp_send
         ;    1069 			//wait for DHCP ACK
         ;    1070 			dhcpstate = DHCP_ACK;
000ab9 e0e2      	LDI  R30,LOW(2)
000aba e0f0      	LDI  R31,HIGH(2)
000abb 93e0 0540 	STS  _dhcpstate,R30
000abd 93f0 0541 	STS  _dhcpstate+1,R31
         ;    1071 		}
         ;    1072 	}
          _0x97:
         ;    1073 	if((dhcpstate == DHCP_ACK) && (packet[ip_srcaddr] == serverid[0]) && (packet[ip_srcaddr+1] == serverid[1]) && (packet[ip_srcaddr+2] == serverid[2]) && (packet[ip_srcaddr + 3] == serverid[3]))
          _0x96:
000abf 91a0 0540 	LDS  R26,_dhcpstate
000ac1 91b0 0541 	LDS  R27,_dhcpstate+1
000ac3 30a2      	CPI  R26,LOW(0x2)
000ac4 e0e0      	LDI  R30,HIGH(0x2)
000ac5 07be      	CPC  R27,R30
000ac6 f4f1      	BRNE _0xBF
000ac7   +  	__GETB2MN _packet,26
000ac7 91a0 029e 	LDS  R26,_packet+0x1a
          	.ENDM
000ac9 91e0 0276 	LDS  R30,_serverid
000acb 17ea      	CP   R30,R26
000acc f4c1      	BRNE _0xBF
000acd   +  	__GETB1MN _packet,27
000acd 91e0 029f 	LDS  R30,_packet+0x1b
          	.ENDM
000acf 93ef      	PUSH R30
000ad0   +  	__GETB1MN _serverid,1
000ad0 91e0 0277 	LDS  R30,_serverid+0x1
          	.ENDM
000ad2 91af      	POP  R26
000ad3 17ea      	CP   R30,R26
000ad4 f481      	BRNE _0xBF
000ad5   +  	__GETB1MN _packet,28
000ad5 91e0 02a0 	LDS  R30,_packet+0x1c
          	.ENDM
000ad7 93ef      	PUSH R30
000ad8   +  	__GETB1MN _serverid,2
000ad8 91e0 0278 	LDS  R30,_serverid+0x2
          	.ENDM
000ada 91af      	POP  R26
000adb 17ea      	CP   R30,R26
000adc f441      	BRNE _0xBF
000add   +  	__GETB1MN _packet,29
000add 91e0 02a1 	LDS  R30,_packet+0x1d
          	.ENDM
000adf 93ef      	PUSH R30
000ae0   +  	__GETB1MN _serverid,3
000ae0 91e0 0279 	LDS  R30,_serverid+0x3
          	.ENDM
000ae2 91af      	POP  R26
000ae3 17ea      	CP   R30,R26
000ae4 f009      	BREQ _0xC0
          _0xBF:
000ae5 c05d      	RJMP _0xBE
          _0xC0:
         ;    1074 	{
         ;    1075 		//check if message type is an ack
         ;    1076 		if((make32(packet[DHCP_xid],packet[DHCP_xid+1],packet[DHCP_xid+2],packet[DHCP_xid+3]) == 0x31257A1D)&&(packet[DHCP_options+4]==53)&&(packet[DHCP_options+5] == 1)&&(packet[DHCP_options+6]==5))
000ae6   +  	__GETB1MN _packet,46
000ae6 91e0 02b2 	LDS  R30,_packet+0x2e
          	.ENDM
000ae8 940e 1652 	CALL SUBOPT_0x27
000aea 937f      	PUSH R23
000aeb 936f      	PUSH R22
000aec 93ff      	PUSH R31
000aed 93ef      	PUSH R30
000aee   +  	__GETB1MN _packet,47
000aee 91e0 02b3 	LDS  R30,_packet+0x2f
          	.ENDM
000af0 27ff      	CLR  R31
000af1 2766      	CLR  R22
000af2 2777      	CLR  R23
000af3 940e 1820 	CALL __LSLD16
000af5 91af      	POP  R26
000af6 91bf      	POP  R27
000af7 918f      	POP  R24
000af8 919f      	POP  R25
000af9 940e 1800 	CALL __ADDD12
000afb 937f      	PUSH R23
000afc 936f      	PUSH R22
000afd 93ff      	PUSH R31
000afe 93ef      	PUSH R30
000aff   +  	__GETB1MN _packet,48
000aff 91e0 02b4 	LDS  R30,_packet+0x30
          	.ENDM
000b01 940e 165b 	CALL SUBOPT_0x28
000b03 91af      	POP  R26
000b04 91bf      	POP  R27
000b05 918f      	POP  R24
000b06 919f      	POP  R25
000b07 940e 1800 	CALL __ADDD12
000b09 937f      	PUSH R23
000b0a 936f      	PUSH R22
000b0b 93ff      	PUSH R31
000b0c 93ef      	PUSH R30
000b0d   +  	__GETB1MN _packet,49
000b0d 91e0 02b5 	LDS  R30,_packet+0x31
          	.ENDM
000b0f 27ff      	CLR  R31
000b10 2766      	CLR  R22
000b11 2777      	CLR  R23
000b12 91af      	POP  R26
000b13 91bf      	POP  R27
000b14 918f      	POP  R24
000b15 919f      	POP  R25
000b16 940e 1805 	CALL __ADDD21
000b18   +  	__CPD2N 0x31257A1D
000b18 31ad      	CPI  R26,LOW(0x31257a1d)
000b19 e7ea      	LDI  R30,HIGH(0x31257a1d)
000b1a 07be      	CPC  R27,R30
000b1b e2e5      	LDI  R30,BYTE3(0x31257a1d)
000b1c 078e      	CPC  R24,R30
000b1d e3e1      	LDI  R30,BYTE4(0x31257a1d)
000b1e 079e      	CPC  R25,R30
          	.ENDM
000b1f f461      	BRNE _0xC2
000b20   +  	__GETB1MN _packet,282
000b20 91e0 039e 	LDS  R30,_packet+0x11a
          	.ENDM
000b22 33e5      	CPI  R30,LOW(0x35)
000b23 f441      	BRNE _0xC2
000b24   +  	__GETB1MN _packet,283
000b24 91e0 039f 	LDS  R30,_packet+0x11b
          	.ENDM
000b26 30e1      	CPI  R30,LOW(0x1)
000b27 f421      	BRNE _0xC2
000b28   +  	__GETB1MN _packet,284
000b28 91e0 03a0 	LDS  R30,_packet+0x11c
          	.ENDM
000b2a 30e5      	CPI  R30,LOW(0x5)
000b2b f009      	BREQ _0xC3
          _0xC2:
000b2c c016      	RJMP _0xC1
          _0xC3:
         ;    1077 		{
         ;    1078 			DHCP_wait = 0;
000b2d 27ee      	CLR  R30
000b2e 93e0 0546 	STS  _DHCP_wait,R30
000b30 93e0 0547 	STS  _DHCP_wait+1,R30
         ;    1079 			//take the IP address
         ;    1080 			for(i=0;i<4;i++)
000b32 e000      	LDI  R16,LOW(0)
          _0xC5:
000b33 3004      	CPI  R16,4
000b34 f470      	BRSH _0xC6
         ;    1081 				MYIP[i] = packet[DHCP_yiaddr+i];
000b35 2fe0      	MOV  R30,R16
000b36 27ff      	CLR  R31
000b37 59e2      	SUBI R30,LOW(-_MYIP)
000b38 4ffd      	SBCI R31,HIGH(-_MYIP)
000b39 93ff      	PUSH R31
000b3a 93ef      	PUSH R30
000b3b 940e 1669 	CALL SUBOPT_0x2A
000b3d 81e0      	LD   R30,Z
000b3e 91af      	POP  R26
000b3f 91bf      	POP  R27
000b40 93ec      	ST   X,R30
000b41 5f0f      	SUBI R16,-1
000b42 cff0      	RJMP _0xC5
          _0xC6:
         ;    1082 		}
         ;    1083 	}
          _0xC1:
         ;    1084 }
          _0xBE:
          _0x1A9:
000b43 9109      	LD   R16,Y+
000b44 9508      	RET
         ;    1085 #include "tcp.h"
         ;    1086 /*tcp.c library source file
         ;    1087 created by Eric Mesa
         ;    1088 
         ;    1089 *********************************
         ;    1090 ver 0.1 10 Apr 2005
         ;    1091 created tcp.c
         ;    1092 simply an implementation
         ;    1093 of what Jeremy had written
         ;    1094 without any extra optimizations
         ;    1095 outside of what we had fixed
         ;    1096 as of atmelwebserver.c ver 0.94.1
         ;    1097 *********************************
         ;    1098 
         ;    1099 goes along with tcp.h
         ;    1100 header file
         ;    1101 */
         ;    1102 
         ;    1103 /*
         ;    1104 *****************************************************
         ;    1105 * TCP Function
         ;    1106 * This function uses TCP protocol to interface with the browsser
         ;    1107 * using well known port 80.  The application function is called with
         ;    1108 * ever incoming character.
         ;    1109 ******************************************************
         ;    1110 */
         ;    1111 
         ;    1112 void tcp()
         ;    1113 {
          _tcp:
         ;    1114 	//assemble the destination port address (my) from from the incoming packet
         ;    1115 	portaddr = make16(packet[TCP_destport],packet[TCP_destport+1]);
000b45   +  	__GETB1MN _packet,36
000b45 91e0 02a8 	LDS  R30,_packet+0x24
          	.ENDM
000b47 940e 1505 	CALL SUBOPT_0xC
000b49 93ff      	PUSH R31
000b4a 93ef      	PUSH R30
000b4b   +  	__GETB1MN _packet,37
000b4b 91e0 02a9 	LDS  R30,_packet+0x25
          	.ENDM
000b4d 91af      	POP  R26
000b4e 91bf      	POP  R27
000b4f 27ff      	CLR  R31
000b50 0fea      	ADD  R30,R26
000b51 1ffb      	ADC  R31,R27
000b52 93e0 0562 	STS  _portaddr,R30
000b54 93f0 0563 	STS  _portaddr+1,R31
         ;    1116 	//calculate the length of teh data coming in with the packet
         ;    1117 	//incoming tcp header length
         ;    1118 	tcplen = ip_packet_len - ((packet[ip_vers_len] & 0x0F) << 2);
000b56   +  	__GETB1MN _packet,14
000b56 91e0 0292 	LDS  R30,_packet+0xe
          	.ENDM
000b58 940e 167e 	CALL SUBOPT_0x2E
         ;    1119 	//incoming data length =
         ;    1120 	tcpdatalen_in = (make16(packet[ip_pktlen],packet[ip_pktlen+1])) - \
         ;    1121 	((packet[ip_vers_len] & 0x0F) << 2)-(((packet[TCP_hdrflags] & 0xF0) >> 4) << 2);
000b5a   +  	__GETB1MN _packet,16
000b5a 91e0 0294 	LDS  R30,_packet+0x10
          	.ENDM
000b5c 940e 1505 	CALL SUBOPT_0xC
000b5e 93ff      	PUSH R31
000b5f 93ef      	PUSH R30
000b60   +  	__GETB1MN _packet,17
000b60 91e0 0295 	LDS  R30,_packet+0x11
          	.ENDM
000b62 91af      	POP  R26
000b63 91bf      	POP  R27
000b64 27ff      	CLR  R31
000b65 0fea      	ADD  R30,R26
000b66 1ffb      	ADC  R31,R27
000b67 93ff      	PUSH R31
000b68 93ef      	PUSH R30
000b69   +  	__GETB1MN _packet,14
000b69 91e0 0292 	LDS  R30,_packet+0xe
          	.ENDM
000b6b 70ef      	ANDI R30,LOW(0xF)
000b6c 0fee      	LSL  R30
000b6d 0fee      	LSL  R30
000b6e 91af      	POP  R26
000b6f 91bf      	POP  R27
000b70 27ff      	CLR  R31
000b71 940e 183f 	CALL __SWAPW12
000b73 1bea      	SUB  R30,R26
000b74 0bfb      	SBC  R31,R27
000b75 93ff      	PUSH R31
000b76 93ef      	PUSH R30
000b77   +  	__GETB1MN _packet,46
000b77 91e0 02b2 	LDS  R30,_packet+0x2e
          	.ENDM
000b79 7fe0      	ANDI R30,LOW(0xF0)
000b7a 95e2      	SWAP R30
000b7b 70ef      	ANDI R30,0xF
000b7c 0fee      	LSL  R30
000b7d 0fee      	LSL  R30
000b7e 91af      	POP  R26
000b7f 91bf      	POP  R27
000b80 27ff      	CLR  R31
000b81 1bae      	SUB  R26,R30
000b82 0bbf      	SBC  R27,R31
000b83 93a0 055a 	STS  _tcpdatalen_in,R26
000b85 93b0 055b 	STS  _tcpdatalen_in+1,R27
         ;    1122 	//convert the entire packet into a checksum
         ;    1123 	//checksum of entire datagram
         ;    1124 	ic_chksum = make16(packet[TCP_cksum],packet[TCP_cksum+1]);
000b87   +  	__GETB1MN _packet,50
000b87 91e0 02b6 	LDS  R30,_packet+0x32
          	.ENDM
000b89 940e 1505 	CALL SUBOPT_0xC
000b8b 93ff      	PUSH R31
000b8c 93ef      	PUSH R30
000b8d   +  	__GETB1MN _packet,51
000b8d 91e0 02b7 	LDS  R30,_packet+0x33
          	.ENDM
000b8f 91af      	POP  R26
000b90 91bf      	POP  R27
000b91 940e 1535 	CALL SUBOPT_0xF
         ;    1125 	packet[TCP_cksum] = 0x00;
000b93   +  	__PUTB1MN _packet,50
000b93 93e0 02b6 	STS  _packet+0x32,R30
          	.ENDM
         ;    1126 	packet[TCP_cksum+1] = 0x00;
000b95 27ee      	CLR  R30
000b96   +  	__PUTB1MN _packet,51
000b96 93e0 02b7 	STS  _packet+0x33,R30
          	.ENDM
         ;    1127 	hdr_chksum = 0;
000b98 940e 1544 	CALL SUBOPT_0x10
         ;    1128 	hdrlen = 0x08;
         ;    1129 	addr = &packet[ip_srcaddr];
000b9a   +  	__POINTW1MN _packet,26
000b9a e9ee      	LDI  R30,LOW(_packet+0x1a)
000b9b e0f2      	LDI  R31,HIGH(_packet+0x1a)
          	.ENDM
000b9c 93e0 054a 	STS  _addr,R30
000b9e 93f0 054b 	STS  _addr+1,R31
         ;    1130 	cksum();
000ba0 d246      	RCALL _cksum
         ;    1131 	hdr_chksum += packet[ip_proto];
000ba1   +  	__GETB1MN _packet,23
000ba1 91e0 029b 	LDS  R30,_packet+0x17
          	.ENDM
000ba3 940e 168d 	CALL SUBOPT_0x2F
         ;    1132 	hdr_chksum += tcplen;
000ba5 940e 16a3 	CALL SUBOPT_0x30
         ;    1133 	hdrlen = tcplen;
         ;    1134 	addr = &packet[TCP_srcport];
000ba7   +  	__POINTW1MN _packet,34
000ba7 eae6      	LDI  R30,LOW(_packet+0x22)
000ba8 e0f2      	LDI  R31,HIGH(_packet+0x22)
          	.ENDM
000ba9 940e 150c 	CALL SUBOPT_0xD
         ;    1135 	cksum();
         ;    1136 	chksum16 = ~(hdr_chksum + ((hdr_chksum & 0xFFFF0000) >>16));
         ;    1137 	if((chksum16 == ic_chksum)&&(portaddr==MY_PORT_ADDRESS))
000bab 940e 1578 	CALL SUBOPT_0x13
000bad f441      	BRNE _0xCC
000bae 91a0 0562 	LDS  R26,_portaddr
000bb0 91b0 0563 	LDS  R27,_portaddr+1
000bb2 35a0      	CPI  R26,LOW(0x50)
000bb3 e0e0      	LDI  R30,HIGH(0x50)
000bb4 07be      	CPC  R27,R30
000bb5 f009      	BREQ _0xCD
          _0xCC:
000bb6 c21d      	RJMP _0xCB
          _0xCD:
         ;    1138 	{
         ;    1139 		//The webserver can only connect to one client at a time
         ;    1140 		{
         ;    1141 			/*------3 Way handshake--*/
         ;    1142 			//this code segment processs the incoming SYN from the client
         ;    1143 			//and sends back the initial sequence number (ISN) and acknowledges
         ;    1144 			//the incoming SYN packet (step 1 and 2 of 3 way handshake)
         ;    1145 			if(SYN_IN && portaddr == MY_PORT_ADDRESS)
000bb7   +  	__GETB1MN _packet,47
000bb7 91e0 02b3 	LDS  R30,_packet+0x2f
          	.ENDM
000bb9 70e2      	ANDI R30,LOW(0x2)
000bba f041      	BREQ _0xCF
000bbb 91a0 0562 	LDS  R26,_portaddr
000bbd 91b0 0563 	LDS  R27,_portaddr+1
000bbf 35a0      	CPI  R26,LOW(0x50)
000bc0 e0e0      	LDI  R30,HIGH(0x50)
000bc1 07be      	CPC  R27,R30
000bc2 f009      	BREQ _0xD0
          _0xCF:
000bc3 c0df      	RJMP _0xCE
          _0xD0:
         ;    1146 			{
         ;    1147 				counter=0;
000bc4 27ee      	CLR  R30
000bc5 93e0 026c 	STS  _counter,R30
000bc7 93e0 026d 	STS  _counter+1,R30
         ;    1148 								
         ;    1149 				tcpdatalen_in=0x01;
000bc9 e0e1      	LDI  R30,LOW(1)
000bca e0f0      	LDI  R31,HIGH(1)
000bcb 93e0 055a 	STS  _tcpdatalen_in,R30
000bcd 93f0 055b 	STS  _tcpdatalen_in+1,R31
         ;    1150 				tcpdatalen_out = 0;
000bcf 27ee      	CLR  R30
000bd0 93e0 055e 	STS  _tcpdatalen_out,R30
000bd2 93e0 055f 	STS  _tcpdatalen_out+1,R30
         ;    1151 				set_synflag;
000bd4 2dee      	MOV  R30,R14
000bd5 60e1      	ORI  R30,1
000bd6 2eee      	MOV  R14,R30
         ;    1152 				client[0] = packet[ip_srcaddr];
000bd7   +  	__GETB1MN _packet,26
000bd7 91e0 029e 	LDS  R30,_packet+0x1a
          	.ENDM
000bd9 93e0 0272 	STS  _client,R30
         ;    1153 				client[1] = packet[ip_srcaddr+1];
000bdb   +  	__GETB1MN _packet,27
000bdb 91e0 029f 	LDS  R30,_packet+0x1b
          	.ENDM
000bdd   +  	__PUTB1MN _client,1
000bdd 93e0 0273 	STS  _client+0x1,R30
          	.ENDM
         ;    1154 				client[2] = packet[ip_srcaddr+2];
000bdf   +  	__GETB1MN _packet,28
000bdf 91e0 02a0 	LDS  R30,_packet+0x1c
          	.ENDM
000be1   +  	__PUTB1MN _client,2
000be1 93e0 0274 	STS  _client+0x2,R30
          	.ENDM
         ;    1155 				client[3] = packet[ip_srcaddr + 3];
000be3   +  	__GETB1MN _packet,29
000be3 91e0 02a1 	LDS  R30,_packet+0x1d
          	.ENDM
000be5   +  	__PUTB1MN _client,3
000be5 93e0 0275 	STS  _client+0x3,R30
          	.ENDM
         ;    1156 				//bulid IP header switch the dest and src IPs 
         ;    1157 				setipaddrs();
000be7 940e 1253 	CALL _setipaddrs
         ;    1158 				//set the header field to 24 bytes(MSS options)
         ;    1159 				//packet[TCP_hdrflags] = (0x6<<4)&0xF0
         ;    1160 				//set the ports
         ;    1161 				data_L = packet[TCP_srcport];
000be9   +  	__GETB1MN _packet,34
000be9 91e0 02a6 	LDS  R30,_packet+0x22
          	.ENDM
000beb 93e0 054e 	STS  _data_L,R30
         ;    1162 				
         ;    1163 				packet[TCP_srcport]=packet[TCP_destport];
000bed   +  	__GETB1MN _packet,36
000bed 91e0 02a8 	LDS  R30,_packet+0x24
          	.ENDM
000bef   +  	__PUTB1MN _packet,34
000bef 93e0 02a6 	STS  _packet+0x22,R30
          	.ENDM
         ;    1164 				packet[TCP_destport]=data_L;
000bf1   +  	__POINTW2MN _packet,36
000bf1 eaa8      	LDI  R26,LOW(_packet+0x24)
000bf2 e0b2      	LDI  R27,HIGH(_packet+0x24)
          	.ENDM
000bf3 91e0 054e 	LDS  R30,_data_L
000bf5 93ec      	ST   X,R30
         ;    1165 				
         ;    1166 				data_L=packet[TCP_srcport+1];
000bf6   +  	__GETB1MN _packet,35
000bf6 91e0 02a7 	LDS  R30,_packet+0x23
          	.ENDM
000bf8 93e0 054e 	STS  _data_L,R30
         ;    1167 				
         ;    1168 				packet[TCP_srcport+1] = packet[TCP_destport+1];
000bfa   +  	__GETB1MN _packet,37
000bfa 91e0 02a9 	LDS  R30,_packet+0x25
          	.ENDM
000bfc   +  	__PUTB1MN _packet,35
000bfc 93e0 02a7 	STS  _packet+0x23,R30
          	.ENDM
         ;    1169 				packet[TCP_destport+1] = data_L;
000bfe   +  	__POINTW2MN _packet,37
000bfe eaa9      	LDI  R26,LOW(_packet+0x25)
000bff e0b2      	LDI  R27,HIGH(_packet+0x25)
          	.ENDM
000c00 940e 16c4 	CALL SUBOPT_0x31
         ;    1170 				//ack = SEQ_IN + 1
         ;    1171 				assemble_ack();
         ;    1172 				//if the seqnum overflows (>16 bits)
         ;    1173 				if(++ISN == 0x0000 || ++ISN == 0xFFFF)
000c02 940e 16c9 	CALL SUBOPT_0x32
000c04 940e 1846 	CALL __CPW02
000c06 f031      	BREQ _0xD2
000c07 940e 16c9 	CALL SUBOPT_0x32
000c09 3faf      	CPI  R26,LOW(0xFFFF)
000c0a efef      	LDI  R30,HIGH(0xFFFF)
000c0b 07be      	CPC  R27,R30
000c0c f461      	BRNE _0xD1
          _0xD2:
         ;    1174 					my_seqnum=0x1234FFFF;
000c0d   +  	__GETD1N 0x1234FFFF
000c0d efef      	LDI  R30,LOW(0x1234ffff)
000c0e efff      	LDI  R31,HIGH(0x1234ffff)
000c0f e364      	LDI  R22,BYTE3(0x1234ffff)
000c10 e172      	LDI  R23,BYTE4(0x1234ffff)
          	.ENDM
000c11 93e0 056e 	STS  _my_seqnum,R30
000c13 93f0 056f 	STS  _my_seqnum+1,R31
000c15 9360 0570 	STS  _my_seqnum+2,R22
000c17 9370 0571 	STS  _my_seqnum+3,R23
         ;    1175 				//expected ackknowledgement
         ;    1176 				expected_ack=my_seqnum+1;
          _0xD1:
000c19 91e0 056e 	LDS  R30,_my_seqnum
000c1b 91f0 056f 	LDS  R31,_my_seqnum+1
000c1d 9160 0570 	LDS  R22,_my_seqnum+2
000c1f 9170 0571 	LDS  R23,_my_seqnum+3
000c21   +  	__ADDD1N 1
000c21 5fef      	SUBI R30,LOW(-0x1)
000c22 4fff      	SBCI R31,HIGH(-0x1)
000c23 4f6f      	SBCI R22,BYTE3(-0x1)
000c24 4f7f      	SBCI R23,BYTE4(-0x1)
          	.ENDM
000c25 93e0 057a 	STS  _expected_ack,R30
000c27 93f0 057b 	STS  _expected_ack+1,R31
000c29 9360 057c 	STS  _expected_ack+2,R22
000c2b 9370 057d 	STS  _expected_ack+3,R23
         ;    1177 				set_packet32(TCP_seqnum,my_seqnum);
000c2d 91e0 0571 	LDS  R30,_my_seqnum+3
000c2f   +  	__ANDD1N 0xFF
000c2f 7fef      	ANDI R30,LOW(0xff)
000c30 70f0      	ANDI R31,HIGH(0xff)
000c31 7060      	ANDI R22,BYTE3(0xff)
000c32 7070      	ANDI R23,BYTE4(0xff)
          	.ENDM
000c33   +  	__PUTB1MN _packet,38
000c33 93e0 02aa 	STS  _packet+0x26,R30
          	.ENDM
000c35 940e 16d3 	CALL SUBOPT_0x33
000c37   +  	__PUTB1MN _packet,39
000c37 93e0 02ab 	STS  _packet+0x27,R30
          	.ENDM
000c39 940e 16e2 	CALL SUBOPT_0x34
000c3b   +  	__PUTB1MN _packet,40
000c3b 93e0 02ac 	STS  _packet+0x28,R30
          	.ENDM
000c3d 91e0 056e 	LDS  R30,_my_seqnum
000c3f 91f0 056f 	LDS  R31,_my_seqnum+1
000c41 9160 0570 	LDS  R22,_my_seqnum+2
000c43 9170 0571 	LDS  R23,_my_seqnum+3
000c45   +  	__ANDD1N 0xFF
000c45 7fef      	ANDI R30,LOW(0xff)
000c46 70f0      	ANDI R31,HIGH(0xff)
000c47 7060      	ANDI R22,BYTE3(0xff)
000c48 7070      	ANDI R23,BYTE4(0xff)
          	.ENDM
000c49   +  	__PUTB1MN _packet,41
000c49 93e0 02ad 	STS  _packet+0x29,R30
          	.ENDM
         ;    1178 				packet[TCP_hdrflags+1] = 0x00;
000c4b 27ee      	CLR  R30
000c4c   +  	__PUTB1MN _packet,47
000c4c 93e0 02b3 	STS  _packet+0x2f,R30
          	.ENDM
         ;    1179 				SYN_OUT;
000c4e   +  	__POINTW1MN _packet,47
000c4e ebe3      	LDI  R30,LOW(_packet+0x2f)
000c4f e0f2      	LDI  R31,HIGH(_packet+0x2f)
          	.ENDM
000c50 93ff      	PUSH R31
000c51 93ef      	PUSH R30
000c52 81e0      	LD   R30,Z
000c53 60e2      	ORI  R30,2
000c54 91af      	POP  R26
000c55 91bf      	POP  R27
000c56 93ec      	ST   X,R30
         ;    1180 				ACK_OUT;
000c57   +  	__POINTW1MN _packet,47
000c57 ebe3      	LDI  R30,LOW(_packet+0x2f)
000c58 e0f2      	LDI  R31,HIGH(_packet+0x2f)
          	.ENDM
000c59 93ff      	PUSH R31
000c5a 93ef      	PUSH R30
000c5b 81e0      	LD   R30,Z
000c5c 61e0      	ORI  R30,0x10
000c5d 91af      	POP  R26
000c5e 91bf      	POP  R27
000c5f 93ec      	ST   X,R30
         ;    1181 				
         ;    1182 				packet[TCP_cksum] = 0x00;
000c60 27ee      	CLR  R30
000c61   +  	__PUTB1MN _packet,50
000c61 93e0 02b6 	STS  _packet+0x32,R30
          	.ENDM
         ;    1183 				packet[TCP_cksum+1] = 0x00;
000c63   +  	__PUTB1MN _packet,51
000c63 93e0 02b7 	STS  _packet+0x33,R30
          	.ENDM
         ;    1184 				
         ;    1185 				hdr_chksum = 0;
000c65 940e 1544 	CALL SUBOPT_0x10
         ;    1186 				hdrlen = 0x08;
         ;    1187 				addr = &packet[ip_srcaddr];
000c67   +  	__POINTW1MN _packet,26
000c67 e9ee      	LDI  R30,LOW(_packet+0x1a)
000c68 e0f2      	LDI  R31,HIGH(_packet+0x1a)
          	.ENDM
000c69 93e0 054a 	STS  _addr,R30
000c6b 93f0 054b 	STS  _addr+1,R31
         ;    1188 				cksum();
000c6d d179      	RCALL _cksum
         ;    1189 				hdr_chksum = hdr_chksum + packet[ip_proto];
000c6e   +  	__GETB1MN _packet,23
000c6e 91e0 029b 	LDS  R30,_packet+0x17
          	.ENDM
000c70 940e 168d 	CALL SUBOPT_0x2F
         ;    1190 				tcplen = make16(packet[ip_pktlen],packet[ip_pktlen+1]) - \
         ;    1191 				((packet[ip_vers_len]&0x0F)<<2);
000c72   +  	__GETB1MN _packet,16
000c72 91e0 0294 	LDS  R30,_packet+0x10
          	.ENDM
000c74 940e 1505 	CALL SUBOPT_0xC
000c76 93ff      	PUSH R31
000c77 93ef      	PUSH R30
000c78   +  	__GETB1MN _packet,17
000c78 91e0 0295 	LDS  R30,_packet+0x11
          	.ENDM
000c7a 91af      	POP  R26
000c7b 91bf      	POP  R27
000c7c 27ff      	CLR  R31
000c7d 0fea      	ADD  R30,R26
000c7e 1ffb      	ADC  R31,R27
000c7f 93ff      	PUSH R31
000c80 93ef      	PUSH R30
000c81   +  	__GETB1MN _packet,14
000c81 91e0 0292 	LDS  R30,_packet+0xe
          	.ENDM
000c83 70ef      	ANDI R30,LOW(0xF)
000c84 0fee      	LSL  R30
000c85 0fee      	LSL  R30
000c86 91af      	POP  R26
000c87 91bf      	POP  R27
000c88 27ff      	CLR  R31
000c89 1bae      	SUB  R26,R30
000c8a 0bbf      	SBC  R27,R31
000c8b 93a0 0558 	STS  _tcplen,R26
000c8d 93b0 0559 	STS  _tcplen+1,R27
         ;    1192 				hdr_chksum = hdr_chksum + tcplen;
000c8f 940e 16a3 	CALL SUBOPT_0x30
         ;    1193 				hdrlen = tcplen;
         ;    1194 				addr = &packet[TCP_srcport];
000c91   +  	__POINTW1MN _packet,34
000c91 eae6      	LDI  R30,LOW(_packet+0x22)
000c92 e0f2      	LDI  R31,HIGH(_packet+0x22)
          	.ENDM
000c93 940e 150c 	CALL SUBOPT_0xD
         ;    1195 				cksum();
         ;    1196 				chksum16 = ~(hdr_chksum + ((hdr_chksum & 0xFFFF0000) >> 16));
         ;    1197 				//write the checksum into the packet
         ;    1198 				packet[TCP_cksum] = make8(chksum16,1);
000c95 940e 152f 	CALL SUBOPT_0xE
000c97   +  	__PUTB1MN _packet,50
000c97 93e0 02b6 	STS  _packet+0x32,R30
          	.ENDM
         ;    1199 				packet[TCP_cksum+1] = make8(chksum16,0);
000c99 91e0 0554 	LDS  R30,_chksum16
000c9b 91f0 0555 	LDS  R31,_chksum16+1
000c9d 7fef      	ANDI R30,LOW(0xFF)
000c9e 70f0      	ANDI R31,HIGH(0xFF)
000c9f   +  	__PUTB1MN _packet,51
000c9f 93e0 02b7 	STS  _packet+0x33,R30
          	.ENDM
         ;    1200 				//send the packet with the same data it came with
         ;    1201 				echo_packet();
000ca1 940e 10ee 	CALL _echo_packet
         ;    1202 			}
         ;    1203 		}
          _0xCE:
         ;    1204 		//if we are waiting for an ack or waiting for data from the client we are connected to 
         ;    1205 		if((client[0]== packet[ip_srcaddr])&&(client[1]==packet[ip_srcaddr+1])&&(client[2]==packet[ip_srcaddr+2])&&(client[3]==packet[ip_srcaddr+3]))
000ca3   +  	__GETB1MN _packet,26
000ca3 91e0 029e 	LDS  R30,_packet+0x1a
          	.ENDM
000ca5 91a0 0272 	LDS  R26,_client
000ca7 17ea      	CP   R30,R26
000ca8 f4c1      	BRNE _0xD5
000ca9   +  	__GETB1MN _client,1
000ca9 91e0 0273 	LDS  R30,_client+0x1
          	.ENDM
000cab 93ef      	PUSH R30
000cac   +  	__GETB1MN _packet,27
000cac 91e0 029f 	LDS  R30,_packet+0x1b
          	.ENDM
000cae 91af      	POP  R26
000caf 17ea      	CP   R30,R26
000cb0 f481      	BRNE _0xD5
000cb1   +  	__GETB1MN _client,2
000cb1 91e0 0274 	LDS  R30,_client+0x2
          	.ENDM
000cb3 93ef      	PUSH R30
000cb4   +  	__GETB1MN _packet,28
000cb4 91e0 02a0 	LDS  R30,_packet+0x1c
          	.ENDM
000cb6 91af      	POP  R26
000cb7 17ea      	CP   R30,R26
000cb8 f441      	BRNE _0xD5
000cb9   +  	__GETB1MN _client,3
000cb9 91e0 0275 	LDS  R30,_client+0x3
          	.ENDM
000cbb 93ef      	PUSH R30
000cbc   +  	__GETB1MN _packet,29
000cbc 91e0 02a1 	LDS  R30,_packet+0x1d
          	.ENDM
000cbe 91af      	POP  R26
000cbf 17ea      	CP   R30,R26
000cc0 f009      	BREQ _0xD6
          _0xD5:
000cc1 c112      	RJMP _0xD4
          _0xD6:
         ;    1206 		{
         ;    1207 			//if an ack is received
         ;    1208 			if(ACK_IN)
000cc2   +  	__GETB1MN _packet,47
000cc2 91e0 02b3 	LDS  R30,_packet+0x2f
          	.ENDM
000cc4 71e0      	ANDI R30,LOW(0x10)
000cc5 f411      	BRNE PC+3
000cc6 940c 0dae 	JMP _0xD7
         ;    1209 			{
         ;    1210 				//assemble the acknowledgement number from the incoming packet
         ;    1211 				incoming_ack = make32(packet[TCP_acknum],packet[TCP_acknum+1],packet[TCP_acknum+2],packet[TCP_acknum+3]);
000cc8   +  	__GETB1MN _packet,42
000cc8 91e0 02ae 	LDS  R30,_packet+0x2a
          	.ENDM
000cca 940e 1652 	CALL SUBOPT_0x27
000ccc 937f      	PUSH R23
000ccd 936f      	PUSH R22
000cce 93ff      	PUSH R31
000ccf 93ef      	PUSH R30
000cd0   +  	__GETB1MN _packet,43
000cd0 91e0 02af 	LDS  R30,_packet+0x2b
          	.ENDM
000cd2 27ff      	CLR  R31
000cd3 2766      	CLR  R22
000cd4 2777      	CLR  R23
000cd5 940e 1820 	CALL __LSLD16
000cd7 91af      	POP  R26
000cd8 91bf      	POP  R27
000cd9 918f      	POP  R24
000cda 919f      	POP  R25
000cdb 940e 1800 	CALL __ADDD12
000cdd 937f      	PUSH R23
000cde 936f      	PUSH R22
000cdf 93ff      	PUSH R31
000ce0 93ef      	PUSH R30
000ce1   +  	__GETB1MN _packet,44
000ce1 91e0 02b0 	LDS  R30,_packet+0x2c
          	.ENDM
000ce3 940e 165b 	CALL SUBOPT_0x28
000ce5 91af      	POP  R26
000ce6 91bf      	POP  R27
000ce7 918f      	POP  R24
000ce8 919f      	POP  R25
000ce9 940e 1800 	CALL __ADDD12
000ceb 937f      	PUSH R23
000cec 936f      	PUSH R22
000ced 93ff      	PUSH R31
000cee 93ef      	PUSH R30
000cef   +  	__GETB1MN _packet,45
000cef 91e0 02b1 	LDS  R30,_packet+0x2d
          	.ENDM
000cf1 27ff      	CLR  R31
000cf2 2766      	CLR  R22
000cf3 2777      	CLR  R23
000cf4 91af      	POP  R26
000cf5 91bf      	POP  R27
000cf6 918f      	POP  R24
000cf7 919f      	POP  R25
000cf8 940e 1800 	CALL __ADDD12
000cfa 93e0 0576 	STS  _incoming_ack,R30
000cfc 93f0 0577 	STS  _incoming_ack+1,R31
000cfe 9360 0578 	STS  _incoming_ack+2,R22
000d00 9370 0579 	STS  _incoming_ack+3,R23
         ;    1212 				if(incoming_ack==expected_ack)
000d02 91e0 057a 	LDS  R30,_expected_ack
000d04 91f0 057b 	LDS  R31,_expected_ack+1
000d06 9160 057c 	LDS  R22,_expected_ack+2
000d08 9170 057d 	LDS  R23,_expected_ack+3
000d0a 91a0 0576 	LDS  R26,_incoming_ack
000d0c 91b0 0577 	LDS  R27,_incoming_ack+1
000d0e 9180 0578 	LDS  R24,_incoming_ack+2
000d10 9190 0579 	LDS  R25,_incoming_ack+3
000d12 940e 184a 	CALL __CPD12
000d14 f011      	BREQ PC+3
000d15 940c 0d67 	JMP _0xD8
         ;    1213 				{
         ;    1214 					my_seqnum=incoming_ack;
000d17 91e0 0576 	LDS  R30,_incoming_ack
000d19 91f0 0577 	LDS  R31,_incoming_ack+1
000d1b 9160 0578 	LDS  R22,_incoming_ack+2
000d1d 9170 0579 	LDS  R23,_incoming_ack+3
000d1f 93e0 056e 	STS  _my_seqnum,R30
000d21 93f0 056f 	STS  _my_seqnum+1,R31
000d23 9360 0570 	STS  _my_seqnum+2,R22
000d25 9370 0571 	STS  _my_seqnum+3,R23
         ;    1215 					//if it is the result of a close operations
         ;    1216 					//if the client is the one who initiated the close operation
         ;    1217 					if(closeflag==2)
000d27 91a0 0580 	LDS  R26,_closeflag
000d29 91b0 0581 	LDS  R27,_closeflag+1
000d2b 30a2      	CPI  R26,LOW(0x2)
000d2c e0e0      	LDI  R30,HIGH(0x2)
000d2d 07be      	CPC  R27,R30
000d2e f431      	BRNE _0xD9
         ;    1218 						closeflag=0;
000d2f 27ee      	CLR  R30
000d30 93e0 0580 	STS  _closeflag,R30
000d32 93e0 0581 	STS  _closeflag+1,R30
         ;    1219 					else if(closeflag==1)
000d34 c00e      	RJMP _0xDA
          _0xD9:
000d35 91a0 0580 	LDS  R26,_closeflag
000d37 91b0 0581 	LDS  R27,_closeflag+1
000d39 30a1      	CPI  R26,LOW(0x1)
000d3a e0e0      	LDI  R30,HIGH(0x1)
000d3b 07be      	CPC  R27,R30
000d3c f431      	BRNE _0xDB
         ;    1220 						closeflag=2;
000d3d e0e2      	LDI  R30,LOW(2)
000d3e e0f0      	LDI  R31,HIGH(2)
000d3f 93e0 0580 	STS  _closeflag,R30
000d41 93f0 0581 	STS  _closeflag+1,R31
         ;    1221 					if(synflag_bit)
          _0xDB:
          _0xDA:
000d43 fee0      	SBRS R14,0
000d44 c002      	RJMP _0xDC
         ;    1222 					{
         ;    1223 							clr_synflag;
000d45 940e 16ec 	CALL SUBOPT_0x35
         ;    1224 							//next step is to wait for a "get" request
         ;    1225 					}
         ;    1226 					if(tcpdatalen_in)
          _0xDC:
000d47 91e0 055a 	LDS  R30,_tcpdatalen_in
000d49 91f0 055b 	LDS  R31,_tcpdatalen_in+1
000d4b 9730      	SBIW R30,0
000d4c f081      	BREQ _0xDD
         ;    1227 					{
         ;    1228 						//if the packet is more than we can handle, we just take the 1st 200 bytes of data
         ;    1229 						//and then ack the 200 bytres so that the client can resend the excluded data
         ;    1230 						if(tcpdatalen_in > 400)
000d4d 91a0 055a 	LDS  R26,_tcpdatalen_in
000d4f 91b0 055b 	LDS  R27,_tcpdatalen_in+1
000d51 e9e0      	LDI  R30,LOW(400)
000d52 e0f1      	LDI  R31,HIGH(400)
000d53 17ea      	CP   R30,R26
000d54 07fb      	CPC  R31,R27
000d55 f420      	BRSH _0xDE
         ;    1231 							tcpdatalen_in=400;
000d56 93e0 055a 	STS  _tcpdatalen_in,R30
000d58 93f0 055b 	STS  _tcpdatalen_in+1,R31
         ;    1232 						ackflag=1;
          _0xDE:
000d5a 940e 16f0 	CALL SUBOPT_0x36
         ;    1233 						http_server();
         ;    1234 					}
         ;    1235 					else
000d5c c009      	RJMP _0xDF
          _0xDD:
         ;    1236 					{
         ;    1237 						if(sendflag == 1)
000d5d e0e1      	LDI  R30,LOW(1)
000d5e e0f0      	LDI  R31,HIGH(1)
000d5f 15e8      	CP   R30,R8
000d60 05f9      	CPC  R31,R9
000d61 f421      	BRNE _0xE0
         ;    1238 						{
         ;    1239 							sendflag = 0;
000d62 2488      	CLR  R8
000d63 2499      	CLR  R9
         ;    1240 							ackflag = 1;
000d64 940e 16f0 	CALL SUBOPT_0x36
         ;    1241 							//send next batch of data
         ;    1242 							http_server();
         ;    1243 						}
         ;    1244 					}
          _0xE0:
          _0xDF:
         ;    1245 				}
         ;    1246 				else if(incoming_ack<expected_ack)
000d66 c047      	RJMP _0xE1
          _0xD8:
000d67 91e0 057a 	LDS  R30,_expected_ack
000d69 91f0 057b 	LDS  R31,_expected_ack+1
000d6b 9160 057c 	LDS  R22,_expected_ack+2
000d6d 9170 057d 	LDS  R23,_expected_ack+3
000d6f 91a0 0576 	LDS  R26,_incoming_ack
000d71 91b0 0577 	LDS  R27,_incoming_ack+1
000d73 9180 0578 	LDS  R24,_incoming_ack+2
000d75 9190 0579 	LDS  R25,_incoming_ack+3
000d77 940e 184f 	CALL __CPD21
000d79 f5a0      	BRSH _0xE2
         ;    1247 				{
         ;    1248 					my_seqnum=expected_ack - (expected_ack - incoming_ack);
000d7a 940e 16f8 	CALL SUBOPT_0x37
000d7c 91a0 057a 	LDS  R26,_expected_ack
000d7e 91b0 057b 	LDS  R27,_expected_ack+1
000d80 9180 057c 	LDS  R24,_expected_ack+2
000d82 9190 057d 	LDS  R25,_expected_ack+3
000d84 940e 1839 	CALL __SWAPD12
000d86 940e 180a 	CALL __SUBD12
000d88 93e0 056e 	STS  _my_seqnum,R30
000d8a 93f0 056f 	STS  _my_seqnum+1,R31
000d8c 9360 0570 	STS  _my_seqnum+2,R22
000d8e 9370 0571 	STS  _my_seqnum+3,R23
         ;    1249 					sendflag=0;
000d90 2488      	CLR  R8
000d91 2499      	CLR  R9
         ;    1250 					ackflag=1;
000d92 e0e1      	LDI  R30,LOW(1)
000d93 e0f0      	LDI  R31,HIGH(1)
000d94 93e0 057e 	STS  _ackflag,R30
000d96 93f0 057f 	STS  _ackflag+1,R31
         ;    1251 					pageendflag=0;
000d98 24aa      	CLR  R10
000d99 24bb      	CLR  R11
         ;    1252 					rollback=1;
000d9a   +  	__PUTW1R 12,13
000d9a 2ece      	MOV  R0xc,R30
000d9b 2edf      	MOV  R0xd,R31
          	.ENDM
         ;    1253 					counter = counter - (expected_ack-incoming_ack);
000d9c 940e 16f8 	CALL SUBOPT_0x37
000d9e 91a0 026c 	LDS  R26,_counter
000da0 91b0 026d 	LDS  R27,_counter+1
000da2 940e 1825 	CALL __CWD2
000da4 940e 1839 	CALL __SWAPD12
000da6 940e 180a 	CALL __SUBD12
000da8 93e0 026c 	STS  _counter,R30
000daa 93f0 026d 	STS  _counter+1,R31
         ;    1254 					//resend data
         ;    1255 					http_server();
000dac 940e 13b4 	CALL _http_server
         ;    1256 				}
         ;    1257 			}
          _0xE2:
          _0xE1:
         ;    1258 			if(FIN_IN)
          _0xD7:
000dae   +  	__GETB1MN _packet,47
000dae 91e0 02b3 	LDS  R30,_packet+0x2f
          	.ENDM
000db0 70e1      	ANDI R30,LOW(0x1)
000db1 f111      	BREQ _0xE3
         ;    1259 			{
         ;    1260 				ackflag=1;
000db2 e0e1      	LDI  R30,LOW(1)
000db3 e0f0      	LDI  R31,HIGH(1)
000db4 93e0 057e 	STS  _ackflag,R30
000db6 93f0 057f 	STS  _ackflag+1,R31
         ;    1261 				send_tcp_packet();
000db8 d0df      	RCALL _send_tcp_packet
         ;    1262 				if(closeflag==0)
000db9 91e0 0580 	LDS  R30,_closeflag
000dbb 91f0 0581 	LDS  R31,_closeflag+1
000dbd 9730      	SBIW R30,0
000dbe f441      	BRNE _0xE4
         ;    1263 				{
         ;    1264 					closeflag=1;
000dbf e0e1      	LDI  R30,LOW(1)
000dc0 e0f0      	LDI  R31,HIGH(1)
000dc1 93e0 0580 	STS  _closeflag,R30
000dc3 93f0 0581 	STS  _closeflag+1,R31
         ;    1265 				   	tcp_close();
000dc5 d00f      	RCALL _tcp_close
         ;    1266 				}
         ;    1267 				else if(closeflag == 2)
000dc6 c00d      	RJMP _0xE5
          _0xE4:
000dc7 91a0 0580 	LDS  R26,_closeflag
000dc9 91b0 0581 	LDS  R27,_closeflag+1
000dcb 30a2      	CPI  R26,LOW(0x2)
000dcc e0e0      	LDI  R30,HIGH(0x2)
000dcd 07be      	CPC  R27,R30
000dce f429      	BRNE _0xE6
         ;    1268 					closeflag=0;
000dcf 27ee      	CLR  R30
000dd0 93e0 0580 	STS  _closeflag,R30
000dd2 93e0 0581 	STS  _closeflag+1,R30
         ;    1269 			}
          _0xE6:
          _0xE5:
         ;    1270 		}
          _0xE3:
         ;    1271 	}
          _0xD4:
         ;    1272 }
          _0xCB:
000dd4 9508      	RET
         ;    1273 
         ;    1274 //------------TCP CLOSE CONNECTION FUNCTION ----
         ;    1275 void tcp_close()
         ;    1276 {
          _tcp_close:
         ;    1277 	set_finflag;
000dd5 940e 170b 	CALL SUBOPT_0x38
         ;    1278 	tcpdatalen_out=0;
000dd7 27ee      	CLR  R30
000dd8 93e0 055e 	STS  _tcpdatalen_out,R30
000dda 93e0 055f 	STS  _tcpdatalen_out+1,R30
         ;    1279 	send_tcp_packet();
000ddc d0bb      	RCALL _send_tcp_packet
         ;    1280 	closeflag++;
000ddd 91e0 0580 	LDS  R30,_closeflag
000ddf 91f0 0581 	LDS  R31,_closeflag+1
000de1 9631      	ADIW R30,1
000de2 93e0 0580 	STS  _closeflag,R30
000de4 93f0 0581 	STS  _closeflag+1,R31
         ;    1281 }
000de6 9508      	RET
         ;    1282 
         ;    1283 /*
         ;    1284 **********************************************************
         ;    1285 *  CHECKSUM CALCULATION ROUTINE
         ;    1286 * just add 16 bits to hdrchksum until you reach the end of hdrlen
         ;    1287 *********************************************************
         ;    1288 */
         ;    1289 void cksum()
         ;    1290 {
          _cksum:
         ;    1291 	while(hdrlen>1)
          _0xE9:
000de7 91a0 0556 	LDS  R26,_hdrlen
000de9 91b0 0557 	LDS  R27,_hdrlen+1
000deb e0e1      	LDI  R30,LOW(1)
000dec e0f0      	LDI  R31,HIGH(1)
000ded 17ea      	CP   R30,R26
000dee 07fb      	CPC  R31,R27
000def f490      	BRSH _0xEB
         ;    1292 	{
         ;    1293 		//top 8 bits pointed to
         ;    1294 		data_H =*addr++;
000df0 940e 14e8 	CALL SUBOPT_0x7
000df2 93e0 054d 	STS  _data_H,R30
         ;    1295 		//next 8 bits pointed to
         ;    1296 		data_L =*addr++;
000df4 940e 14e8 	CALL SUBOPT_0x7
000df6 940e 170f 	CALL SUBOPT_0x39
         ;    1297 		//converting the 2 bits together into a 16bit number
         ;    1298 		chksum16=make16(data_H,data_L);
         ;    1299 		//adding the 16bit number to itself (where is the 1s complement?!?)
         ;    1300 		hdr_chksum += chksum16;
         ;    1301 		//move along the header
         ;    1302 		hdrlen -= 2;
000df8 91e0 0556 	LDS  R30,_hdrlen
000dfa 91f0 0557 	LDS  R31,_hdrlen+1
000dfc 9732      	SBIW R30,2
000dfd 93e0 0556 	STS  _hdrlen,R30
000dff 93f0 0557 	STS  _hdrlen+1,R31
         ;    1303 	}
000e01 cfe5      	RJMP _0xE9
          _0xEB:
         ;    1304 	//when hdrlen = 1 (ie only 8 bits left)
         ;    1305 	if(hdrlen>0)
000e02 91a0 0556 	LDS  R26,_hdrlen
000e04 91b0 0557 	LDS  R27,_hdrlen+1
000e06 940e 1846 	CALL __CPW02
000e08 f450      	BRSH _0xEC
         ;    1306 	{
         ;    1307 		data_H =*addr;
000e09 91a0 054a 	LDS  R26,_addr
000e0b 91b0 054b 	LDS  R27,_addr+1
000e0d 91ec      	LD   R30,X
000e0e 93e0 054d 	STS  _data_H,R30
         ;    1308 		data_L =0x00;
000e10 27ee      	CLR  R30
000e11 940e 170f 	CALL SUBOPT_0x39
         ;    1309 		chksum16 = make16(data_H,data_L);
         ;    1310 		hdr_chksum= hdr_chksum+chksum16;
         ;    1311 	}
         ;    1312 }
          _0xEC:
000e13 9508      	RET
         ;    1313 #include "ack.h"
         ;    1314 /*ack.c library source file
         ;    1315 created by Eric Mesa
         ;    1316 
         ;    1317 *********************************
         ;    1318 ver 0.1 10 Apr 2005
         ;    1319 created ack.c
         ;    1320 simply an implementation
         ;    1321 of what Jeremy had written
         ;    1322 without any extra optimizations
         ;    1323 outside of what we had fixed
         ;    1324 as of atmelwebserver.c ver 0.94.1
         ;    1325 *********************************
         ;    1326 
         ;    1327 goes along with ack.h
         ;    1328 header file
         ;    1329 */
         ;    1330 
         ;    1331 /*
         ;    1332 *****************************************************
         ;    1333 * Assemble the Acknowledgement
         ;    1334 * This function assembles the acknowledgement to send to
         ;    1335 * the client by adding the received data count to the 
         ;    1336 * client's incoming sequence number
         ;    1337 ******************************************************
         ;    1338 */
         ;    1339 
         ;    1340 void assemble_ack()
         ;    1341 {
          _assemble_ack:
         ;    1342 	client_seqnum=make32(packet[TCP_seqnum],packet[TCP_seqnum+1], packet[TCP_seqnum+2], packet[TCP_seqnum+3]);
000e14   +  	__GETB1MN _packet,38
000e14 91e0 02aa 	LDS  R30,_packet+0x26
          	.ENDM
000e16 940e 1652 	CALL SUBOPT_0x27
000e18 937f      	PUSH R23
000e19 936f      	PUSH R22
000e1a 93ff      	PUSH R31
000e1b 93ef      	PUSH R30
000e1c   +  	__GETB1MN _packet,39
000e1c 91e0 02ab 	LDS  R30,_packet+0x27
          	.ENDM
000e1e 27ff      	CLR  R31
000e1f 2766      	CLR  R22
000e20 2777      	CLR  R23
000e21 940e 1820 	CALL __LSLD16
000e23 91af      	POP  R26
000e24 91bf      	POP  R27
000e25 918f      	POP  R24
000e26 919f      	POP  R25
000e27 940e 1800 	CALL __ADDD12
000e29 937f      	PUSH R23
000e2a 936f      	PUSH R22
000e2b 93ff      	PUSH R31
000e2c 93ef      	PUSH R30
000e2d   +  	__GETB1MN _packet,40
000e2d 91e0 02ac 	LDS  R30,_packet+0x28
          	.ENDM
000e2f 940e 165b 	CALL SUBOPT_0x28
000e31 91af      	POP  R26
000e32 91bf      	POP  R27
000e33 918f      	POP  R24
000e34 919f      	POP  R25
000e35 940e 1800 	CALL __ADDD12
000e37 937f      	PUSH R23
000e38 936f      	PUSH R22
000e39 93ff      	PUSH R31
000e3a 93ef      	PUSH R30
000e3b   +  	__GETB1MN _packet,41
000e3b 91e0 02ad 	LDS  R30,_packet+0x29
          	.ENDM
000e3d 27ff      	CLR  R31
000e3e 2766      	CLR  R22
000e3f 2777      	CLR  R23
000e40 91af      	POP  R26
000e41 91bf      	POP  R27
000e42 918f      	POP  R24
000e43 919f      	POP  R25
000e44 940e 1800 	CALL __ADDD12
000e46 93e0 0572 	STS  _client_seqnum,R30
000e48 93f0 0573 	STS  _client_seqnum+1,R31
000e4a 9360 0574 	STS  _client_seqnum+2,R22
000e4c 9370 0575 	STS  _client_seqnum+3,R23
         ;    1343 	client_seqnum += tcpdatalen_in;
000e4e 91e0 055a 	LDS  R30,_tcpdatalen_in
000e50 91f0 055b 	LDS  R31,_tcpdatalen_in+1
000e52 91a0 0572 	LDS  R26,_client_seqnum
000e54 91b0 0573 	LDS  R27,_client_seqnum+1
000e56 9180 0574 	LDS  R24,_client_seqnum+2
000e58 9190 0575 	LDS  R25,_client_seqnum+3
000e5a 2766      	CLR  R22
000e5b 2777      	CLR  R23
000e5c 940e 1800 	CALL __ADDD12
000e5e 93e0 0572 	STS  _client_seqnum,R30
000e60 93f0 0573 	STS  _client_seqnum+1,R31
000e62 9360 0574 	STS  _client_seqnum+2,R22
000e64 9370 0575 	STS  _client_seqnum+3,R23
         ;    1344 	set_packet32(TCP_acknum,client_seqnum);
000e66 91e0 0575 	LDS  R30,_client_seqnum+3
000e68   +  	__ANDD1N 0xFF
000e68 7fef      	ANDI R30,LOW(0xff)
000e69 70f0      	ANDI R31,HIGH(0xff)
000e6a 7060      	ANDI R22,BYTE3(0xff)
000e6b 7070      	ANDI R23,BYTE4(0xff)
          	.ENDM
000e6c   +  	__PUTB1MN _packet,42
000e6c 93e0 02ae 	STS  _packet+0x2a,R30
          	.ENDM
000e6e 91e0 0572 	LDS  R30,_client_seqnum
000e70 91f0 0573 	LDS  R31,_client_seqnum+1
000e72 9160 0574 	LDS  R22,_client_seqnum+2
000e74 9170 0575 	LDS  R23,_client_seqnum+3
000e76 940e 181b 	CALL __LSRD16
000e78   +  	__ANDD1N 0xFF
000e78 7fef      	ANDI R30,LOW(0xff)
000e79 70f0      	ANDI R31,HIGH(0xff)
000e7a 7060      	ANDI R22,BYTE3(0xff)
000e7b 7070      	ANDI R23,BYTE4(0xff)
          	.ENDM
000e7c   +  	__PUTB1MN _packet,43
000e7c 93e0 02af 	STS  _packet+0x2b,R30
          	.ENDM
000e7e 91e0 0572 	LDS  R30,_client_seqnum
000e80 91f0 0573 	LDS  R31,_client_seqnum+1
000e82 2fef      	MOV  R30,R31
000e83   +  	__ANDD1N 0xFF
000e83 7fef      	ANDI R30,LOW(0xff)
000e84 70f0      	ANDI R31,HIGH(0xff)
000e85 7060      	ANDI R22,BYTE3(0xff)
000e86 7070      	ANDI R23,BYTE4(0xff)
          	.ENDM
000e87   +  	__PUTB1MN _packet,44
000e87 93e0 02b0 	STS  _packet+0x2c,R30
          	.ENDM
000e89 91e0 0572 	LDS  R30,_client_seqnum
000e8b 91f0 0573 	LDS  R31,_client_seqnum+1
000e8d 9160 0574 	LDS  R22,_client_seqnum+2
000e8f 9170 0575 	LDS  R23,_client_seqnum+3
000e91   +  	__ANDD1N 0xFF
000e91 7fef      	ANDI R30,LOW(0xff)
000e92 70f0      	ANDI R31,HIGH(0xff)
000e93 7060      	ANDI R22,BYTE3(0xff)
000e94 7070      	ANDI R23,BYTE4(0xff)
          	.ENDM
000e95   +  	__PUTB1MN _packet,45
000e95 93e0 02b1 	STS  _packet+0x2d,R30
          	.ENDM
         ;    1345 }
000e97 9508      	RET
         ;    1346 #include "tcpsend.h"
         ;    1347 /*tcpsend.c library source file
         ;    1348 created by Eric Mesa
         ;    1349 
         ;    1350 *********************************
         ;    1351 ver 0.1 10 Apr 2005
         ;    1352 created tcpsend.c
         ;    1353 simply an implementation
         ;    1354 of what Jeremy had written
         ;    1355 without any extra optimizations
         ;    1356 outside of what we had fixed
         ;    1357 as of atmelwebserver.c ver 0.94.1
         ;    1358 *********************************
         ;    1359 
         ;    1360 goes along with tcpsend.h
         ;    1361 header file
         ;    1362 
         ;    1363 we may want to eventually combine this with tcp.c
         ;    1364 */
         ;    1365 
         ;    1366 /*
         ;    1367 ******************************************************
         ;    1368 * Send TCP Packet
         ;    1369 * This routine assembles and sends a complete TCP/IP packet
         ;    1370 * 40 bytes of IP and TCP header data is assumed (no options)
         ;    1371 ******************************************************
         ;    1372 */
         ;    1373 
         ;    1374 void send_tcp_packet()
         ;    1375 {
          _send_tcp_packet:
         ;    1376 	unsigned int i;
         ;    1377 	//count IP and TCP header bytes  Total = 40 bytes
         ;    1378 	if(tcpdatalen_out == 0)
000e98 931a      	ST   -Y,R17
000e99 930a      	ST   -Y,R16
         ;	i -> R16,R17
000e9a 91e0 055e 	LDS  R30,_tcpdatalen_out
000e9c 91f0 055f 	LDS  R31,_tcpdatalen_out+1
000e9e 9730      	SBIW R30,0
000e9f f519      	BRNE _0xF2
         ;    1379 	{
         ;    1380 		tcpdatalen_out=14;
000ea0 e0ee      	LDI  R30,LOW(14)
000ea1 e0f0      	LDI  R31,HIGH(14)
000ea2 93e0 055e 	STS  _tcpdatalen_out,R30
000ea4 93f0 055f 	STS  _tcpdatalen_out+1,R31
         ;    1381 		for(i=0;i<14;i++)
000ea6   +  	__GETWRN 16,17,0
000ea6 e000      	LDI  R0x10,LOW(0x0)
000ea7 e010      	LDI  R0x11,HIGH(0x0)
          	.ENDM
          _0xF4:
000ea8   +  	__CPWRN 16,17,14
000ea8 300e      	CPI  R0x10,LOW(0xe)
000ea9 e0e0      	LDI  R30,HIGH(0xe)
000eaa 071e      	CPC  R0x11,R30
          	.ENDM
000eab f450      	BRSH _0xF5
         ;    1382 			packet[TCP_options+i]=0;
000eac   +  	__GETW1R 16,17
000eac 2fe0      	MOV  R30,R0x10
000ead 2ff1      	MOV  R31,R0x11
          	.ENDM
000eae 96f6      	ADIW R30,54
000eaf 57ec      	SUBI R30,LOW(-_packet)
000eb0 4ffd      	SBCI R31,HIGH(-_packet)
000eb1 940e 167a 	CALL SUBOPT_0x2D
000eb3   +  	__ADDWRN 16,17,1
000eb3 5f0f      	SUBI R0x10,LOW(-0x1)
000eb4 4f1f      	SBCI R0x11,HIGH(-0x1)
          	.ENDM
000eb5 cff2      	RJMP _0xF4
          _0xF5:
         ;    1383 		expected_ack=my_seqnum+1;
000eb6 91e0 056e 	LDS  R30,_my_seqnum
000eb8 91f0 056f 	LDS  R31,_my_seqnum+1
000eba 9160 0570 	LDS  R22,_my_seqnum+2
000ebc 9170 0571 	LDS  R23,_my_seqnum+3
000ebe   +  	__ADDD1N 1
000ebe 5fef      	SUBI R30,LOW(-0x1)
000ebf 4fff      	SBCI R31,HIGH(-0x1)
000ec0 4f6f      	SBCI R22,BYTE3(-0x1)
000ec1 4f7f      	SBCI R23,BYTE4(-0x1)
          	.ENDM
000ec2 c010      	RJMP _0x1AA
         ;    1384 	}
         ;    1385 	else
          _0xF2:
         ;    1386 		expected_ack=my_seqnum+tcpdatalen_out;
000ec3 91e0 055e 	LDS  R30,_tcpdatalen_out
000ec5 91f0 055f 	LDS  R31,_tcpdatalen_out+1
000ec7 91a0 056e 	LDS  R26,_my_seqnum
000ec9 91b0 056f 	LDS  R27,_my_seqnum+1
000ecb 9180 0570 	LDS  R24,_my_seqnum+2
000ecd 9190 0571 	LDS  R25,_my_seqnum+3
000ecf 2766      	CLR  R22
000ed0 2777      	CLR  R23
000ed1 940e 1800 	CALL __ADDD12
          _0x1AA:
000ed3 93e0 057a 	STS  _expected_ack,R30
000ed5 93f0 057b 	STS  _expected_ack+1,R31
000ed7 9360 057c 	STS  _expected_ack+2,R22
000ed9 9370 057d 	STS  _expected_ack+3,R23
         ;    1387 	
         ;    1388 	ip_packet_len = 40 + tcpdatalen_out;
000edb 91e0 055e 	LDS  R30,_tcpdatalen_out
000edd 91f0 055f 	LDS  R31,_tcpdatalen_out+1
000edf 96b8      	ADIW R30,40
000ee0 93e0 0564 	STS  _ip_packet_len,R30
000ee2 93f0 0565 	STS  _ip_packet_len+1,R31
         ;    1389 	packet[ip_pktlen] = make8(ip_packet_len,1);
000ee4 940e 1591 	CALL SUBOPT_0x15
000ee6   +  	__PUTB1MN _packet,16
000ee6 93e0 0294 	STS  _packet+0x10,R30
          	.ENDM
         ;    1390 	packet[ip_pktlen + 1] = make8(ip_packet_len,0);
000ee8 91e0 0564 	LDS  R30,_ip_packet_len
000eea 91f0 0565 	LDS  R31,_ip_packet_len+1
000eec 7fef      	ANDI R30,LOW(0xFF)
000eed 70f0      	ANDI R31,HIGH(0xFF)
000eee   +  	__PUTB1MN _packet,17
000eee 93e0 0295 	STS  _packet+0x11,R30
          	.ENDM
         ;    1391 	packet[ip_proto] = PROT_TCP;
000ef0 e0e6      	LDI  R30,LOW(6)
000ef1   +  	__PUTB1MN _packet,23
000ef1 93e0 029b 	STS  _packet+0x17,R30
          	.ENDM
         ;    1392 	setipaddrs();
000ef3 940e 1253 	CALL _setipaddrs
         ;    1393 	data_L = packet[TCP_srcport];
000ef5   +  	__GETB1MN _packet,34
000ef5 91e0 02a6 	LDS  R30,_packet+0x22
          	.ENDM
000ef7 93e0 054e 	STS  _data_L,R30
         ;    1394 	packet[TCP_srcport] = packet[TCP_destport];
000ef9   +  	__GETB1MN _packet,36
000ef9 91e0 02a8 	LDS  R30,_packet+0x24
          	.ENDM
000efb   +  	__PUTB1MN _packet,34
000efb 93e0 02a6 	STS  _packet+0x22,R30
          	.ENDM
         ;    1395 	packet[TCP_destport] = data_L;
000efd   +  	__POINTW2MN _packet,36
000efd eaa8      	LDI  R26,LOW(_packet+0x24)
000efe e0b2      	LDI  R27,HIGH(_packet+0x24)
          	.ENDM
000eff 91e0 054e 	LDS  R30,_data_L
000f01 93ec      	ST   X,R30
         ;    1396 	data_L = packet[TCP_srcport+1];
000f02   +  	__GETB1MN _packet,35
000f02 91e0 02a7 	LDS  R30,_packet+0x23
          	.ENDM
000f04 93e0 054e 	STS  _data_L,R30
         ;    1397 	packet[TCP_srcport+1] = packet[TCP_destport + 1];
000f06   +  	__GETB1MN _packet,37
000f06 91e0 02a9 	LDS  R30,_packet+0x25
          	.ENDM
000f08   +  	__PUTB1MN _packet,35
000f08 93e0 02a7 	STS  _packet+0x23,R30
          	.ENDM
         ;    1398 	packet[TCP_destport+1] = data_L;
000f0a   +  	__POINTW2MN _packet,37
000f0a eaa9      	LDI  R26,LOW(_packet+0x25)
000f0b e0b2      	LDI  R27,HIGH(_packet+0x25)
          	.ENDM
000f0c 940e 16c4 	CALL SUBOPT_0x31
         ;    1399 	assemble_ack();
         ;    1400 	set_packet32(TCP_seqnum,my_seqnum);
000f0e 91e0 0571 	LDS  R30,_my_seqnum+3
000f10   +  	__ANDD1N 0xFF
000f10 7fef      	ANDI R30,LOW(0xff)
000f11 70f0      	ANDI R31,HIGH(0xff)
000f12 7060      	ANDI R22,BYTE3(0xff)
000f13 7070      	ANDI R23,BYTE4(0xff)
          	.ENDM
000f14   +  	__PUTB1MN _packet,38
000f14 93e0 02aa 	STS  _packet+0x26,R30
          	.ENDM
000f16 940e 16d3 	CALL SUBOPT_0x33
000f18   +  	__PUTB1MN _packet,39
000f18 93e0 02ab 	STS  _packet+0x27,R30
          	.ENDM
000f1a 940e 16e2 	CALL SUBOPT_0x34
000f1c   +  	__PUTB1MN _packet,40
000f1c 93e0 02ac 	STS  _packet+0x28,R30
          	.ENDM
000f1e 91e0 056e 	LDS  R30,_my_seqnum
000f20 91f0 056f 	LDS  R31,_my_seqnum+1
000f22 9160 0570 	LDS  R22,_my_seqnum+2
000f24 9170 0571 	LDS  R23,_my_seqnum+3
000f26   +  	__ANDD1N 0xFF
000f26 7fef      	ANDI R30,LOW(0xff)
000f27 70f0      	ANDI R31,HIGH(0xff)
000f28 7060      	ANDI R22,BYTE3(0xff)
000f29 7070      	ANDI R23,BYTE4(0xff)
          	.ENDM
000f2a   +  	__PUTB1MN _packet,41
000f2a 93e0 02ad 	STS  _packet+0x29,R30
          	.ENDM
         ;    1401 	
         ;    1402 	packet[TCP_hdrflags+1]=0x00;
000f2c 27ee      	CLR  R30
000f2d   +  	__PUTB1MN _packet,47
000f2d 93e0 02b3 	STS  _packet+0x2f,R30
          	.ENDM
         ;    1403 	if(ackflag = 1)
000f2f e0e1      	LDI  R30,LOW(1)
000f30 e0f0      	LDI  R31,HIGH(1)
000f31 93e0 057e 	STS  _ackflag,R30
000f33 93f0 057f 	STS  _ackflag+1,R31
000f35 9730      	SBIW R30,0
000f36 f049      	BREQ _0xF7
         ;    1404 		ACK_OUT;
000f37   +  	__POINTW1MN _packet,47
000f37 ebe3      	LDI  R30,LOW(_packet+0x2f)
000f38 e0f2      	LDI  R31,HIGH(_packet+0x2f)
          	.ENDM
000f39 93ff      	PUSH R31
000f3a 93ef      	PUSH R30
000f3b 81e0      	LD   R30,Z
000f3c 61e0      	ORI  R30,0x10
000f3d 91af      	POP  R26
000f3e 91bf      	POP  R27
000f3f c008      	RJMP _0x1AB
         ;    1405 	else
          _0xF7:
         ;    1406 		NO_ACK;
000f40   +  	__POINTW1MN _packet,47
000f40 ebe3      	LDI  R30,LOW(_packet+0x2f)
000f41 e0f2      	LDI  R31,HIGH(_packet+0x2f)
          	.ENDM
000f42 93ff      	PUSH R31
000f43 93ef      	PUSH R30
000f44 81e0      	LD   R30,Z
000f45 74e7      	ANDI R30,LOW(0x47)
000f46 91af      	POP  R26
000f47 91bf      	POP  R27
          _0x1AB:
000f48 93ec      	ST   X,R30
         ;    1407 	
         ;    1408 	ackflag = 0;
000f49 27ee      	CLR  R30
000f4a 93e0 057e 	STS  _ackflag,R30
000f4c 93e0 057f 	STS  _ackflag+1,R30
         ;    1409 	
         ;    1410 	if(flags & finflag)
000f4e fee1      	SBRS R14,1
000f4f c00b      	RJMP _0xF9
         ;    1411 	{
         ;    1412 		FIN_OUT;
000f50   +  	__POINTW1MN _packet,47
000f50 ebe3      	LDI  R30,LOW(_packet+0x2f)
000f51 e0f2      	LDI  R31,HIGH(_packet+0x2f)
          	.ENDM
000f52 93ff      	PUSH R31
000f53 93ef      	PUSH R30
000f54 81e0      	LD   R30,Z
000f55 60e1      	ORI  R30,1
000f56 91af      	POP  R26
000f57 91bf      	POP  R27
000f58 93ec      	ST   X,R30
         ;    1413 		clr_finflag;
000f59 940e 1737 	CALL SUBOPT_0x3A
         ;    1414 	}
         ;    1415 	
         ;    1416 	packet[TCP_cksum] = 0x00;
          _0xF9:
000f5b 27ee      	CLR  R30
000f5c   +  	__PUTB1MN _packet,50
000f5c 93e0 02b6 	STS  _packet+0x32,R30
          	.ENDM
         ;    1417 	packet[TCP_cksum + 1] = 0x00;
000f5e   +  	__PUTB1MN _packet,51
000f5e 93e0 02b7 	STS  _packet+0x33,R30
          	.ENDM
         ;    1418 	
         ;    1419 	hdr_chksum = 0;
000f60 940e 1544 	CALL SUBOPT_0x10
         ;    1420 	hdrlen = 0x08;
         ;    1421 	addr = &packet[ip_srcaddr];
000f62   +  	__POINTW1MN _packet,26
000f62 e9ee      	LDI  R30,LOW(_packet+0x1a)
000f63 e0f2      	LDI  R31,HIGH(_packet+0x1a)
          	.ENDM
000f64 93e0 054a 	STS  _addr,R30
000f66 93f0 054b 	STS  _addr+1,R31
         ;    1422 	cksum();
000f68 940e 0de7 	CALL _cksum
         ;    1423 	hdr_chksum += packet[ip_proto];
000f6a   +  	__GETB1MN _packet,23
000f6a 91e0 029b 	LDS  R30,_packet+0x17
          	.ENDM
000f6c 940e 168d 	CALL SUBOPT_0x2F
         ;    1424 	tcplen = ip_packet_len - ((packet[ip_vers_len]& 0x0F)<<2);
000f6e   +  	__GETB1MN _packet,14
000f6e 91e0 0292 	LDS  R30,_packet+0xe
          	.ENDM
000f70 940e 167e 	CALL SUBOPT_0x2E
         ;    1425 	hdr_chksum=hdr_chksum+tcplen;
000f72 940e 16a3 	CALL SUBOPT_0x30
         ;    1426 	hdrlen = tcplen;
         ;    1427 	addr = &packet[TCP_srcport];
000f74   +  	__POINTW1MN _packet,34
000f74 eae6      	LDI  R30,LOW(_packet+0x22)
000f75 e0f2      	LDI  R31,HIGH(_packet+0x22)
          	.ENDM
000f76 940e 150c 	CALL SUBOPT_0xD
         ;    1428 	cksum();
         ;    1429 	chksum16 = ~(hdr_chksum + ((hdr_chksum & 0xFFFF0000)>>16));
         ;    1430 	packet[TCP_cksum] = make8(chksum16,1);
000f78 940e 152f 	CALL SUBOPT_0xE
000f7a   +  	__PUTB1MN _packet,50
000f7a 93e0 02b6 	STS  _packet+0x32,R30
          	.ENDM
         ;    1431 	packet[TCP_cksum + 1] = make8(chksum16,0);
000f7c 91e0 0554 	LDS  R30,_chksum16
000f7e 91f0 0555 	LDS  R31,_chksum16+1
000f80 7fef      	ANDI R30,LOW(0xFF)
000f81 70f0      	ANDI R31,HIGH(0xFF)
000f82   +  	__PUTB1MN _packet,51
000f82 93e0 02b7 	STS  _packet+0x33,R30
          	.ENDM
         ;    1432 	
         ;    1433 	txlen = ip_packet_len + 14;
000f84 940e 15a0 	CALL SUBOPT_0x17
         ;    1434 	if(txlen<60)
000f86 f430      	BRSH _0xFA
         ;    1435 		txlen = 60;
000f87 e3ec      	LDI  R30,LOW(60)
000f88 e0f0      	LDI  R31,HIGH(60)
000f89 93e0 0550 	STS  _txlen,R30
000f8b 93f0 0551 	STS  _txlen+1,R31
         ;    1436 	data_L = make8(txlen,0);
          _0xFA:
000f8d 940e 15b1 	CALL SUBOPT_0x18
         ;    1437 	data_H = make8(txlen,1);
         ;    1438 	write_rtl(CR,0x22);
         ;    1439 	read_rtl(CR);
         ;    1440 	while(byte_read&0x04)
          _0xFB:
000f8f 91e0 054c 	LDS  R30,_byte_read
000f91 70e4      	ANDI R30,LOW(0x4)
000f92 f019      	BREQ _0xFD
         ;    1441 		read_rtl(CR);
000f93 940e 15ca 	CALL SUBOPT_0x19
000f95 cff9      	RJMP _0xFB
          _0xFD:
         ;    1442 	
         ;    1443 	write_rtl(TPSR,txstart);
000f96 940e 15ce 	CALL SUBOPT_0x1A
         ;    1444 	write_rtl(RSAR0,0x00);
         ;    1445 	write_rtl(RSAR1,0x40);
000f98 940e 15d6 	CALL SUBOPT_0x1B
         ;    1446 	write_rtl(ISR,0xFF);
         ;    1447 	write_rtl(RBCR0,data_L);
         ;    1448 	write_rtl(RBCR1,data_H);
         ;    1449 	write_rtl(CR,0x12);
         ;    1450 	
         ;    1451 	for(i=0;i<txlen;++i)
000f9a   +  	__GETWRN 16,17,0
000f9a e000      	LDI  R0x10,LOW(0x0)
000f9b e010      	LDI  R0x11,HIGH(0x0)
          	.ENDM
          _0xFF:
000f9c 91e0 0550 	LDS  R30,_txlen
000f9e 91f0 0551 	LDS  R31,_txlen+1
000fa0 170e      	CP   R16,R30
000fa1 071f      	CPC  R17,R31
000fa2 f428      	BRSH _0x100
         ;    1452 		write_rtl(RDMAPORT,packet[enetpacketDest0+i]);
000fa3 940e 15f1 	CALL SUBOPT_0x1C
000fa5   +  	__ADDWRN 16,17,1
000fa5 5f0f      	SUBI R0x10,LOW(-0x1)
000fa6 4f1f      	SBCI R0x11,HIGH(-0x1)
          	.ENDM
000fa7 cff4      	RJMP _0xFF
          _0x100:
         ;    1453 		
         ;    1454 	byte_read = 0;
000fa8 27ee      	CLR  R30
000fa9 93e0 054c 	STS  _byte_read,R30
         ;    1455 	while(!(byte_read & RDC))
          _0x101:
000fab 91e0 054c 	LDS  R30,_byte_read
000fad 74e0      	ANDI R30,LOW(0x40)
000fae f419      	BRNE _0x103
         ;    1456 		read_rtl(ISR);
000faf 940e 14fb 	CALL SUBOPT_0xA
000fb1 cff9      	RJMP _0x101
          _0x103:
         ;    1457 	
         ;    1458 	write_rtl(TBCR0,data_L);
000fb2 940e 15f9 	CALL SUBOPT_0x1D
         ;    1459 	write_rtl(TBCR1,data_H);
         ;    1460 	write_rtl(CR,0x24);
         ;    1461 }
000fb4 9109      	LD   R16,Y+
000fb5 9119      	LD   R17,Y+
000fb6 9508      	RET
         ;    1462 
         ;    1463 //for sending the html
         ;    1464 unsigned int pack_html(unsigned char flash *req_page, unsigned int req_offset)
         ;    1465 {
          _pack_html:
         ;    1466 	unsigned char i;
         ;    1467 	unsigned char flash *start;
         ;    1468 	unsigned char flash *cursor;
         ;    1469 
         ;    1470 	// place cursor at start of data to send
         ;    1471 	start = req_page+req_offset;
000fb7 9724      	SBIW R28,4
000fb8 930a      	ST   -Y,R16
         ;	*req_page -> Y+7
         ;	req_offset -> Y+5
         ;	i -> R16
         ;	*start -> Y+3
         ;	*cursor -> Y+1
000fb9 81ed      	LDD  R30,Y+5
000fba 81fe      	LDD  R31,Y+5+1
000fbb 81af      	LDD  R26,Y+7
000fbc 85b8      	LDD  R27,Y+7+1
000fbd 0fea      	ADD  R30,R26
000fbe 1ffb      	ADC  R31,R27
000fbf 83eb      	STD  Y+3,R30
000fc0 83fc      	STD  Y+3+1,R31
         ;    1472 	cursor = start;
000fc1 83e9      	STD  Y+1,R30
000fc2 83fa      	STD  Y+1+1,R31
         ;    1473 
         ;    1474 	// send portion of data
         ;    1475 	for(i=0; i<100; i++)
000fc3 e000      	LDI  R16,LOW(0)
          _0x106:
000fc4 3604      	CPI  R16,100
000fc5 f010      	BRLO PC+3
000fc6 940c 1006 	JMP _0x107
         ;    1476 	{
         ;    1477 		packet[TCP_data+i] = *cursor;
000fc8 2fe0      	MOV  R30,R16
000fc9 5bee      	SUBI R30,-LOW(66)
000fca 27ff      	CLR  R31
000fcb 57ec      	SUBI R30,LOW(-_packet)
000fcc 4ffd      	SBCI R31,HIGH(-_packet)
000fcd 93ff      	PUSH R31
000fce 93ef      	PUSH R30
000fcf 81e9      	LDD  R30,Y+1
000fd0 81fa      	LDD  R31,Y+1+1
000fd1 91e4      	LPM  R30,Z
000fd2 91af      	POP  R26
000fd3 91bf      	POP  R27
000fd4 93ec      	ST   X,R30
         ;    1478 		// advance cursor
         ;    1479 		++cursor;
000fd5 81e9      	LDD  R30,Y+1
000fd6 81fa      	LDD  R31,Y+1+1
000fd7 9631      	ADIW R30,1
000fd8 83e9      	STD  Y+1,R30
000fd9 83fa      	STD  Y+1+1,R31
         ;    1480 		if(req_page != favicon)
000fda e9e6      	LDI  R30,LOW(_favicon*2)
000fdb e0f8      	LDI  R31,HIGH(_favicon*2)
000fdc 81af      	LDD  R26,Y+7
000fdd 85b8      	LDD  R27,Y+7+1
000fde 17ea      	CP   R30,R26
000fdf 07fb      	CPC  R31,R27
000fe0 f081      	BREQ _0x108
         ;    1481 		{
         ;    1482 			// check if end of page
         ;    1483 			if(*cursor == '\0')
000fe1 81e9      	LDD  R30,Y+1
000fe2 81fa      	LDD  R31,Y+1+1
000fe3 91e4      	LPM  R30,Z
000fe4 30e0      	CPI  R30,0
000fe5 f451      	BRNE _0x109
         ;    1484 			{
         ;    1485 				packet[TCP_data+i+1] = "\0";
000fe6 940e 173b 	CALL SUBOPT_0x3B
000fe8 93ff      	PUSH R31
000fe9 93ef      	PUSH R30
000fea   +  	__POINTW1FN _260,0
000fea e0ee      	LDI  R30,LOW(2*_260+0x0)
000feb e0fd      	LDI  R31,HIGH(2*_260+0x0)
          	.ENDM
000fec 91af      	POP  R26
000fed 91bf      	POP  R27
000fee 93ec      	ST   X,R30
         ;    1486 				break;
000fef c016      	RJMP _0x107
         ;    1487 			}
         ;    1488 		}
          _0x109:
         ;    1489 		else
000ff0 c013      	RJMP _0x10A
          _0x108:
         ;    1490 		{
         ;    1491 			// check if end of page
         ;    1492 			if((cursor-req_page) > page_size)
000ff1 81af      	LDD  R26,Y+7
000ff2 85b8      	LDD  R27,Y+7+1
000ff3 81e9      	LDD  R30,Y+1
000ff4 81fa      	LDD  R31,Y+1+1
000ff5 1bea      	SUB  R30,R26
000ff6 0bfb      	SBC  R31,R27
000ff7 164e      	CP   R4,R30
000ff8 065f      	CPC  R5,R31
000ff9 f450      	BRSH _0x10B
         ;    1493 			{
         ;    1494 				packet[TCP_data+i+1] = "\0";
000ffa 940e 173b 	CALL SUBOPT_0x3B
000ffc 93ff      	PUSH R31
000ffd 93ef      	PUSH R30
000ffe   +  	__POINTW1FN _260,2
000ffe e1e0      	LDI  R30,LOW(2*_260+0x2)
000fff e0fd      	LDI  R31,HIGH(2*_260+0x2)
          	.ENDM
001000 91af      	POP  R26
001001 91bf      	POP  R27
001002 93ec      	ST   X,R30
         ;    1495 				break;
001003 c002      	RJMP _0x107
         ;    1496 			}
         ;    1497 		}
          _0x10B:
          _0x10A:
         ;    1498 	}
001004 5f0f      	SUBI R16,-1
001005 cfbe      	RJMP _0x106
          _0x107:
         ;    1499 
         ;    1500 	// return amount of data
         ;    1501 	tcpdatalen_out = cursor-start;
001006 81ab      	LDD  R26,Y+3
001007 81bc      	LDD  R27,Y+3+1
001008 81e9      	LDD  R30,Y+1
001009 81fa      	LDD  R31,Y+1+1
00100a 1bea      	SUB  R30,R26
00100b 0bfb      	SBC  R31,R27
00100c 93e0 055e 	STS  _tcpdatalen_out,R30
00100e 93f0 055f 	STS  _tcpdatalen_out+1,R31
         ;    1502 	return tcpdatalen_out;
001010 8108      	LDD  R16,Y+0
001011 9629      	ADIW R28,9
001012 9508      	RET
         ;    1503 }
         ;    1504 #include "nic.h"
         ;    1505 /*nic.c library source file
         ;    1506 created by Eric Mesa
         ;    1507 
         ;    1508 *********************************
         ;    1509 ver 0.1 10 Apr 2005
         ;    1510 created nic.c
         ;    1511 simply an implementation
         ;    1512 of what Jeremy had written
         ;    1513 without any extra optimizations
         ;    1514 outside of what we had fixed
         ;    1515 as of atmelwebserver.c ver 0.94.1
         ;    1516 *********************************
         ;    1517 
         ;    1518 goes along with nic.h
         ;    1519 header file
         ;    1520 */
         ;    1521 
         ;    1522 /*
         ;    1523 *******************************************************
         ;    1524 * Write to NIC Control Register
         ;    1525 *******************************************************
         ;    1526 */
         ;    1527 
         ;    1528 void write_rtl(unsigned char regaddr, unsigned char regdata)
         ;    1529 {
          _write_rtl:
         ;    1530 	//write the regaddr into PORTB
         ;    1531 	rtladdr = regaddr;
001013 81e9      	LDD  R30,Y+1
001014 bbe8      	OUT  0x18,R30
         ;    1532 	tortl;
001015 efef      	LDI  R30,LOW(255)
001016 bbe4      	OUT  0x14,R30
         ;    1533 	//write data into PORTC
         ;    1534 	rtldata = regdata;
001017 81e8      	LD   R30,Y
001018 bbe5      	OUT  0x15,R30
         ;    1535 	#asm
         ;    1536 		nop
001019 0000      		nop
         ;    1537 	#endasm
         
         ;    1538 	//toggle write pin
         ;    1539 	clr_iow_pin;
00101a 9897      	CBI  0x12,7
         ;    1540 	#asm
         ;    1541 		nop
00101b 0000      		nop
         ;    1542 		nop
00101c 0000      		nop
         ;    1543 		nop
00101d 0000      		nop
         ;    1544 	#endasm
         
         ;    1545 	set_iow_pin;
00101e 9a97      	SBI  0x12,7
         ;    1546 	#asm
         ;    1547 		nop
00101f 0000      		nop
         ;    1548 	#endasm
         
         ;    1549 	//set data port back to input
         ;    1550 	fromrtl;
001020 940e 1741 	CALL SUBOPT_0x3C
         ;    1551 	PORTC = 0xFF;
         ;    1552 }
001022 9622      	ADIW R28,2
001023 9508      	RET
         ;    1553 
         ;    1554 /*
         ;    1555 *******************************************************
         ;    1556 * Read From NIC Control Register
         ;    1557 *******************************************************
         ;    1558 */
         ;    1559 
         ;    1560 void read_rtl(unsigned char regaddr)
         ;    1561 {
          _read_rtl:
         ;    1562 	fromrtl;
001024 940e 1741 	CALL SUBOPT_0x3C
         ;    1563 	PORTC = 0xFF;
         ;    1564 	rtladdr = regaddr;
001026 81e8      	LD   R30,Y
001027 bbe8      	OUT  0x18,R30
         ;    1565 	clr_ior_pin;
001028 9896      	CBI  0x12,6
         ;    1566 	#asm
         ;    1567 		nop
001029 0000      		nop
         ;    1568 	#endasm
         
         ;    1569 	#asm
         ;    1570 		nop
00102a 0000      		nop
         ;    1571 		nop
00102b 0000      		nop
         ;    1572 		nop
00102c 0000      		nop
         ;    1573 	#endasm
         
         ;    1574 	byte_read = PINC;
00102d b3e3      	IN   R30,0x13
00102e 93e0 054c 	STS  _byte_read,R30
         ;    1575 	set_ior_pin;
001030 9a96      	SBI  0x12,6
         ;    1576 	#asm
         ;    1577 		nop
001031 0000      		nop
         ;    1578 	#endasm
         
         ;    1579 }
001032 9621      	ADIW R28,1
001033 9508      	RET
         ;    1580 
         ;    1581 /*
         ;    1582 //**********************************************************
         ;    1583 //* Initialize the RTL8019AS
         ;    1584 //************************************************************
         ;    1585 */
         ;    1586 
         ;    1587 void init_RTL8019AS()
         ;    1588 {
          _init_RTL8019AS:
         ;    1589 	unsigned char i;
         ;    1590 	fromrtl;	//PORTC data lines = input
001034 930a      	ST   -Y,R16
         ;	i -> R16
001035 940e 1741 	CALL SUBOPT_0x3C
         ;    1591 	PORTC = 0xFF;
         ;    1592 	DDRB = 0xFF;
001037 efef      	LDI  R30,LOW(255)
001038 bbe7      	OUT  0x17,R30
         ;    1593 	rtladdr = 0x00; //clear address lines
001039 27ee      	CLR  R30
00103a bbe8      	OUT  0x18,R30
         ;    1594 	DDRA = 0x00; 	//PORTA is an input
00103b bbea      	OUT  0x1A,R30
         ;    1595 	//DDRA = 0xFF;
         ;    1596 	DDRD = 0xE0;	//setup IOW, IOR, EEPROM,RXD,TXD,CTS
00103c eee0      	LDI  R30,LOW(224)
00103d bbe1      	OUT  0x11,R30
         ;    1597 	PORTD = 0x1F; 	//enable pullups on input pins
00103e e1ef      	LDI  R30,LOW(31)
00103f bbe2      	OUT  0x12,R30
         ;    1598 	clr_EEDO;
001040 9895      	CBI  0x12,5
         ;    1599 	set_iow_pin;	//disable IOW
001041 9a97      	SBI  0x12,7
         ;    1600 	set_ior_pin; 	//disable IOR
001042 9a96      	SBI  0x12,6
         ;    1601 	set_rst_pin;	//put NIC in reset
001043 9ac7      	SBI  0x18,7
         ;    1602 	delay_ms(2);	//delay at least 1.6 ms
001044 940e 1746 	CALL SUBOPT_0x3D
         ;    1603 	clr_rst_pin;	//disable reset line
001046 98c7      	CBI  0x18,7
         ;    1604 	
         ;    1605 	read_rtl(RSTPORT);	//read contents of reset port
001047 e1e8      	LDI  R30,LOW(24)
001048 93ea      	ST   -Y,R30
001049 940e 1024 	CALL _read_rtl
         ;    1606 	write_rtl(RSTPORT,byte_read); //do soft reset
00104b e1e8      	LDI  R30,LOW(24)
00104c 93ea      	ST   -Y,R30
00104d 91e0 054c 	LDS  R30,_byte_read
00104f 93ea      	ST   -Y,R30
001050 940e 1013 	CALL _write_rtl
         ;    1607 	delay_ms(20);	//give it time
001052 e1e4      	LDI  R30,LOW(20)
001053 e0f0      	LDI  R31,HIGH(20)
001054 93fa      	ST   -Y,R31
001055 93ea      	ST   -Y,R30
001056 940e 17d8 	CALL _delay_ms
         ;    1608 	read_rtl(ISR);	//check for good soft reset
001058 940e 14fb 	CALL SUBOPT_0xA
         ;    1609 	
         ;    1610 	if(!(byte_read & RST))
00105a 91e0 054c 	LDS  R30,_byte_read
00105c 78e0      	ANDI R30,LOW(0x80)
00105d f401      	BRNE _0x112
         ;    1611 	{
         ;    1612 		//for(i=0;i<sizeof(msg_initfail)-1;++i)
         ;    1613 		//{
         ;    1614 			//delay_ms1(1);
         ;    1615 			//lcd_send_byte(1,msg_initfail[i]);
         ;    1616 		//}
         ;    1617 	}
         ;    1618 	write_rtl(CR,0x21);	//stop the NIC,abort DMA,page 0
          _0x112:
00105e 940e 174c 	CALL SUBOPT_0x3E
         ;    1619 	delay_ms(2);		//make sure nothing is coming in or going out
001060 940e 1746 	CALL SUBOPT_0x3D
         ;    1620 	write_rtl(DCR,dcrval);	//0x58
001062 940e 1752 	CALL SUBOPT_0x3F
         ;    1621 	write_rtl(RBCR0,0x00);
001064 e0ea      	LDI  R30,LOW(10)
001065 940e 14f6 	CALL SUBOPT_0x9
         ;    1622 	write_rtl(RBCR1,0x00);
001067 940e 14c9 	CALL SUBOPT_0x2
         ;    1623 	write_rtl(RCR,0x04);
001069 e0ec      	LDI  R30,LOW(12)
00106a 93ea      	ST   -Y,R30
00106b e0e4      	LDI  R30,LOW(4)
00106c 93ea      	ST   -Y,R30
00106d 940e 1013 	CALL _write_rtl
         ;    1624 	write_rtl(TPSR,txstart);
00106f e0e4      	LDI  R30,LOW(4)
001070 93ea      	ST   -Y,R30
001071 e4e0      	LDI  R30,LOW(64)
001072 940e 1758 	CALL SUBOPT_0x40
         ;    1625 	write_rtl(TCR,0x02);
001074 940e 175d 	CALL SUBOPT_0x41
         ;    1626 	write_rtl(PSTART,rxstart);
001076 e0e1      	LDI  R30,LOW(1)
001077 940e 1762 	CALL SUBOPT_0x42
         ;    1627 	write_rtl(BNRY,rxstart);
001079 e0e3      	LDI  R30,LOW(3)
00107a 940e 1762 	CALL SUBOPT_0x42
         ;    1628 	write_rtl(PSTOP,rxstop);
00107c e0e2      	LDI  R30,LOW(2)
00107d 93ea      	ST   -Y,R30
00107e e6e0      	LDI  R30,LOW(96)
00107f 93ea      	ST   -Y,R30
001080 940e 1013 	CALL _write_rtl
         ;    1629 	write_rtl(CR,0x61);
001082 27ee      	CLR  R30
001083 93ea      	ST   -Y,R30
001084 e6e1      	LDI  R30,LOW(97)
001085 93ea      	ST   -Y,R30
001086 940e 1013 	CALL _write_rtl
         ;    1630 	delay_ms(2);
001088 940e 1746 	CALL SUBOPT_0x3D
         ;    1631 	write_rtl(CURR,rxstart);
00108a e0e7      	LDI  R30,LOW(7)
00108b 940e 1762 	CALL SUBOPT_0x42
         ;    1632 	for(i=0;i<6;++i)
00108d e000      	LDI  R16,LOW(0)
          _0x114:
00108e 3006      	CPI  R16,6
00108f f440      	BRSH _0x115
         ;    1633 		write_rtl(PAR0+i,MYMAC[i]);
001090 2fe0      	MOV  R30,R16
001091 5fef      	SUBI R30,-LOW(1)
001092 93ea      	ST   -Y,R30
001093 2fe0      	MOV  R30,R16
001094 940e 14e1 	CALL SUBOPT_0x6
001096 5f0f      	SUBI R16,-LOW(1)
001097 cff6      	RJMP _0x114
          _0x115:
         ;    1634 		
         ;    1635 	write_rtl(CR,0x21);
001098 940e 174c 	CALL SUBOPT_0x3E
         ;    1636 	write_rtl(DCR,dcrval);
00109a 940e 1752 	CALL SUBOPT_0x3F
         ;    1637 	write_rtl(CR,0x22);
00109c 940e 1767 	CALL SUBOPT_0x43
         ;    1638 	write_rtl(ISR,0xFF);
00109e 940e 176d 	CALL SUBOPT_0x44
         ;    1639 	write_rtl(IMR,imrval);
0010a0 e0ef      	LDI  R30,LOW(15)
0010a1 93ea      	ST   -Y,R30
0010a2 e1e1      	LDI  R30,LOW(17)
0010a3 940e 1758 	CALL SUBOPT_0x40
         ;    1640 	write_rtl(TCR,tcrval);
0010a5 940e 14f6 	CALL SUBOPT_0x9
         ;    1641 	write_rtl(CR,0x22);
0010a7 940e 1767 	CALL SUBOPT_0x43
         ;    1642 }
0010a9 9109      	LD   R16,Y+
0010aa 9508      	RET
         ;    1643 #include "ringbuff.h"
         ;    1644 /*ringbuff.c library source file
         ;    1645 created by Eric Mesa
         ;    1646 
         ;    1647 *********************************
         ;    1648 ver 0.1 13 Apr 2005
         ;    1649 created ringbuff.c
         ;    1650 simply an implementation
         ;    1651 of what Jeremy had written
         ;    1652 without any extra optimizations
         ;    1653 outside of what we had fixed
         ;    1654 as of atmelwebserver.c ver 0.94.1
         ;    1655 *********************************
         ;    1656 
         ;    1657 goes along with ringbuff.h
         ;    1658 header file
         ;    1659 */
         ;    1660 
         ;    1661 /*
         ;    1662 ******************************************************
         ;    1663 * Handle Receive Ring Buffer Overrun
         ;    1664 * No packets are recovered
         ;    1665 *******************************************************
         ;    1666 */
         ;    1667 
         ;    1668 void overrun()
         ;    1669 {
          _overrun:
         ;    1670 	read_rtl(CR);
0010ab 940e 15ca 	CALL SUBOPT_0x19
         ;    1671 	data_L = byte_read;
0010ad 91e0 054c 	LDS  R30,_byte_read
0010af 93e0 054e 	STS  _data_L,R30
         ;    1672 	write_rtl(CR,0x21);
0010b1 940e 174c 	CALL SUBOPT_0x3E
         ;    1673 	delay_ms(2);
0010b3 940e 1746 	CALL SUBOPT_0x3D
         ;    1674 	write_rtl(RBCR0,0x00);
0010b5 e0ea      	LDI  R30,LOW(10)
0010b6 940e 14f6 	CALL SUBOPT_0x9
         ;    1675 	write_rtl(RBCR1,0x00);
0010b8 940e 14c9 	CALL SUBOPT_0x2
         ;    1676 	if(!(data_L&0x04))
0010ba 91e0 054e 	LDS  R30,_data_L
0010bc 70e4      	ANDI R30,LOW(0x4)
0010bd f421      	BRNE _0x118
         ;    1677 		resend = 0;
0010be 27ee      	CLR  R30
0010bf 93e0 054f 	STS  _resend,R30
         ;    1678 	else if(data_L & 0x04)
0010c1 c015      	RJMP _0x119
          _0x118:
0010c2 91e0 054e 	LDS  R30,_data_L
0010c4 70e4      	ANDI R30,LOW(0x4)
0010c5 f089      	BREQ _0x11A
         ;    1679 	{
         ;    1680 		read_rtl(ISR);
0010c6 940e 14fb 	CALL SUBOPT_0xA
         ;    1681 		data_L = byte_read;
0010c8 91e0 054c 	LDS  R30,_byte_read
0010ca 93e0 054e 	STS  _data_L,R30
         ;    1682 		if((data_L&0x02) || (data_L & 0x08))
0010cc 70e2      	ANDI R30,LOW(0x2)
0010cd f421      	BRNE _0x11C
0010ce 91e0 054e 	LDS  R30,_data_L
0010d0 70e8      	ANDI R30,LOW(0x8)
0010d1 f011      	BREQ _0x11B
          _0x11C:
         ;    1683 			resend = 0;
0010d2 27ee      	CLR  R30
0010d3 c001      	RJMP _0x1AC
         ;    1684 		else
          _0x11B:
         ;    1685 			resend = 1;
0010d4 e0e1      	LDI  R30,LOW(1)
          _0x1AC:
0010d5 93e0 054f 	STS  _resend,R30
         ;    1686 	}
         ;    1687 	
         ;    1688 	write_rtl(TCR,0x02);
          _0x11A:
          _0x119:
0010d7 e0ed      	LDI  R30,LOW(13)
0010d8 940e 175d 	CALL SUBOPT_0x41
         ;    1689 	write_rtl(CR,0x22);
0010da 940e 1767 	CALL SUBOPT_0x43
         ;    1690 	write_rtl(BNRY,rxstart);
0010dc e0e3      	LDI  R30,LOW(3)
0010dd 940e 1762 	CALL SUBOPT_0x42
         ;    1691 	write_rtl(CR,0x62);
0010df 940e 1773 	CALL SUBOPT_0x45
         ;    1692 	write_rtl(CURR,rxstart);
0010e1 e0e7      	LDI  R30,LOW(7)
0010e2 940e 1762 	CALL SUBOPT_0x42
         ;    1693 	write_rtl(CR,0x22);
0010e4 940e 1767 	CALL SUBOPT_0x43
         ;    1694 	write_rtl(ISR,0x10);
0010e6 e0e7      	LDI  R30,LOW(7)
0010e7 93ea      	ST   -Y,R30
0010e8 e1e0      	LDI  R30,LOW(16)
0010e9 940e 1758 	CALL SUBOPT_0x40
         ;    1695 	write_rtl(TCR,tcrval);
0010eb 940e 14f6 	CALL SUBOPT_0x9
         ;    1696 }
0010ed 9508      	RET
         ;    1697 #include "echo.h"
         ;    1698 /*echo.c library source file
         ;    1699 created by Eric Mesa
         ;    1700 
         ;    1701 *********************************
         ;    1702 ver 0.1 10 Apr 2005
         ;    1703 created echo.c
         ;    1704 simply an implementation
         ;    1705 of what Jeremy had written
         ;    1706 without any extra optimizations
         ;    1707 outside of what we had fixed
         ;    1708 as of atmelwebserver.c ver 0.94.1
         ;    1709 *********************************
         ;    1710 
         ;    1711 goes along with echo.h
         ;    1712 header file
         ;    1713 */
         ;    1714 
         ;    1715 /*
         ;    1716 ******************************************************
         ;    1717 * Echo Packet Function
         ;    1718 * This routine does not modify the incoming packet size and
         ;    1719 * thus echoes the original packet structure
         ;    1720 ********************************************************
         ;    1721 */
         ;    1722 
         ;    1723 void echo_packet()
         ;    1724 {
          _echo_packet:
         ;    1725 	unsigned int i;
         ;    1726 	write_rtl(CR,0x22);
0010ee 931a      	ST   -Y,R17
0010ef 940e 14a3 	CALL SUBOPT_0x0
         ;	i -> R16,R17
         ;    1727 	write_rtl(TPSR,txstart);
         ;    1728 	write_rtl(RSAR0,0x00);
         ;    1729 	write_rtl(RSAR1,0x40);
         ;    1730 	write_rtl(ISR,0xFF);
         ;    1731 	write_rtl(RBCR0,pageheader[enetpacketLenL]-4);
0010f1   +  	__GETB1MN _pageheader,2
0010f1 91e0 0282 	LDS  R30,_pageheader+0x2
          	.ENDM
0010f3 940e 1779 	CALL SUBOPT_0x46
         ;    1732 	write_rtl(RBCR1,pageheader[enetpacketLenH]);
0010f5 e0eb      	LDI  R30,LOW(11)
0010f6 93ea      	ST   -Y,R30
0010f7   +  	__GETB1MN _pageheader,3
0010f7 91e0 0283 	LDS  R30,_pageheader+0x3
          	.ENDM
0010f9 93ea      	ST   -Y,R30
0010fa 940e 1013 	CALL _write_rtl
         ;    1733 	write_rtl(CR,0x12);
0010fc 940e 14cf 	CALL SUBOPT_0x3
         ;    1734 	
         ;    1735 	txlen = make16(pageheader[enetpacketLenH],pageheader[enetpacketLenL])-4;
0010fe   +  	__GETB1MN _pageheader,3
0010fe 91e0 0283 	LDS  R30,_pageheader+0x3
          	.ENDM
001100 940e 1505 	CALL SUBOPT_0xC
001102 93ff      	PUSH R31
001103 93ef      	PUSH R30
001104   +  	__GETB1MN _pageheader,2
001104 91e0 0282 	LDS  R30,_pageheader+0x2
          	.ENDM
001106 91af      	POP  R26
001107 91bf      	POP  R27
001108 27ff      	CLR  R31
001109 0fae      	ADD  R26,R30
00110a 1fbf      	ADC  R27,R31
00110b 9714      	SBIW R26,4
00110c 93a0 0550 	STS  _txlen,R26
00110e 93b0 0551 	STS  _txlen+1,R27
         ;    1736 	for(i=0;i<txlen;++i)
001110   +  	__GETWRN 16,17,0
001110 e000      	LDI  R0x10,LOW(0x0)
001111 e010      	LDI  R0x11,HIGH(0x0)
          	.ENDM
          _0x122:
001112 91e0 0550 	LDS  R30,_txlen
001114 91f0 0551 	LDS  R31,_txlen+1
001116 170e      	CP   R16,R30
001117 071f      	CPC  R17,R31
001118 f428      	BRSH _0x123
         ;    1737 		write_rtl(RDMAPORT,packet[enetpacketDest0+i]);
001119 940e 15f1 	CALL SUBOPT_0x1C
00111b   +  	__ADDWRN 16,17,1
00111b 5f0f      	SUBI R0x10,LOW(-0x1)
00111c 4f1f      	SBCI R0x11,HIGH(-0x1)
          	.ENDM
00111d cff4      	RJMP _0x122
          _0x123:
         ;    1738 	
         ;    1739 	byte_read = 0;
00111e 27ee      	CLR  R30
00111f 93e0 054c 	STS  _byte_read,R30
         ;    1740 	while(!(byte_read&RDC))
          _0x124:
001121 91e0 054c 	LDS  R30,_byte_read
001123 74e0      	ANDI R30,LOW(0x40)
001124 f419      	BRNE _0x126
         ;    1741 		read_rtl(ISR);
001125 940e 14fb 	CALL SUBOPT_0xA
001127 cff9      	RJMP _0x124
          _0x126:
         ;    1742 		
         ;    1743 	write_rtl(TBCR0,pageheader[enetpacketLenL]-4);
001128 e0e5      	LDI  R30,LOW(5)
001129 93ea      	ST   -Y,R30
00112a   +  	__GETB1MN _pageheader,2
00112a 91e0 0282 	LDS  R30,_pageheader+0x2
          	.ENDM
00112c 940e 1779 	CALL SUBOPT_0x46
         ;    1744 	write_rtl(TBCR1,pageheader[enetpacketLenH]);
00112e e0e6      	LDI  R30,LOW(6)
00112f 93ea      	ST   -Y,R30
001130   +  	__GETB1MN _pageheader,3
001130 91e0 0283 	LDS  R30,_pageheader+0x3
          	.ENDM
001132 93ea      	ST   -Y,R30
001133 940e 1013 	CALL _write_rtl
         ;    1745 	write_rtl(CR,0x24);
001135 940e 14ff 	CALL SUBOPT_0xB
         ;    1746 }
001137 c118      	RJMP _0x1A8
         ;    1747 #include "ring.h"
         ;    1748 /*ring.c library source file
         ;    1749 created by Eric Mesa
         ;    1750 
         ;    1751 *********************************
         ;    1752 ver 0.1 13 Apr 2005
         ;    1753 created ring.c
         ;    1754 simply an implementation
         ;    1755 of what Jeremy had written
         ;    1756 without any extra optimizations
         ;    1757 outside of what we had fixed
         ;    1758 as of atmelwebserver.c ver 0.94.1
         ;    1759 *********************************
         ;    1760 
         ;    1761 goes along with ring.h
         ;    1762 header file
         ;    1763 */
         ;    1764 
         ;    1765 /*
         ;    1766 *****************************************************
         ;    1767 * Get A Packet From the Ring
         ;    1768 * This routine removes data packet from the receive buffer
         ;    1769 * ring
         ;    1770 *******************************************************
         ;    1771 */
         ;    1772 
         ;    1773 void get_packet()
         ;    1774 {
          _get_packet:
         ;    1775 	unsigned int i;
         ;    1776 	//execute a send packet command to retrieve the packet
         ;    1777 	write_rtl(CR,0x1A);
001138 931a      	ST   -Y,R17
001139 930a      	ST   -Y,R16
         ;	i -> R16,R17
00113a 27ee      	CLR  R30
00113b 93ea      	ST   -Y,R30
00113c e1ea      	LDI  R30,LOW(26)
00113d 93ea      	ST   -Y,R30
00113e 940e 1013 	CALL _write_rtl
         ;    1778 	for(i=0;i<4;++i)
001140   +  	__GETWRN 16,17,0
001140 e000      	LDI  R0x10,LOW(0x0)
001141 e010      	LDI  R0x11,HIGH(0x0)
          	.ENDM
          _0x12A:
001142   +  	__CPWRN 16,17,4
001142 3004      	CPI  R0x10,LOW(0x4)
001143 e0e0      	LDI  R30,HIGH(0x4)
001144 071e      	CPC  R0x11,R30
          	.ENDM
001145 f458      	BRSH _0x12B
         ;    1779 	{
         ;    1780 		read_rtl(RDMAPORT);
001146 940e 177d 	CALL SUBOPT_0x47
         ;    1781 		pageheader[i]=byte_read;
001148   +  	__GETW1R 16,17
001148 2fe0      	MOV  R30,R0x10
001149 2ff1      	MOV  R31,R0x11
          	.ENDM
00114a 58e0      	SUBI R30,LOW(-_pageheader)
00114b 4ffd      	SBCI R31,HIGH(-_pageheader)
00114c 940e 1781 	CALL SUBOPT_0x48
         ;    1782 	}
00114e   +  	__ADDWRN 16,17,1
00114e 5f0f      	SUBI R0x10,LOW(-0x1)
00114f 4f1f      	SBCI R0x11,HIGH(-0x1)
          	.ENDM
001150 cff1      	RJMP _0x12A
          _0x12B:
         ;    1783 	rxlen = make16(pageheader[enetpacketLenH],pageheader[enetpacketLenL]);
001151   +  	__GETB1MN _pageheader,3
001151 91e0 0283 	LDS  R30,_pageheader+0x3
          	.ENDM
001153 940e 1505 	CALL SUBOPT_0xC
001155 93ff      	PUSH R31
001156 93ef      	PUSH R30
001157   +  	__GETB1MN _pageheader,2
001157 91e0 0282 	LDS  R30,_pageheader+0x2
          	.ENDM
001159 91af      	POP  R26
00115a 91bf      	POP  R27
00115b 27ff      	CLR  R31
00115c 0fea      	ADD  R30,R26
00115d 1ffb      	ADC  R31,R27
00115e 93e0 0552 	STS  _rxlen,R30
001160 93f0 0553 	STS  _rxlen+1,R31
         ;    1784 	
         ;    1785 	for(i=0;i<rxlen;++i)
001162   +  	__GETWRN 16,17,0
001162 e000      	LDI  R0x10,LOW(0x0)
001163 e010      	LDI  R0x11,HIGH(0x0)
          	.ENDM
          _0x12D:
001164 91e0 0552 	LDS  R30,_rxlen
001166 91f0 0553 	LDS  R31,_rxlen+1
001168 170e      	CP   R16,R30
001169 071f      	CPC  R17,R31
00116a f478      	BRSH _0x12E
         ;    1786 	{
         ;    1787 		read_rtl(RDMAPORT);
00116b 940e 177d 	CALL SUBOPT_0x47
         ;    1788 		//dump any bytes that wil overrun the receive buffer  (which is probably > 1kb)
         ;    1789 		if(i<700)
00116d   +  	__CPWRN 16,17,700
00116d 3b0c      	CPI  R0x10,LOW(0x2bc)
00116e e0e2      	LDI  R30,HIGH(0x2bc)
00116f 071e      	CPC  R0x11,R30
          	.ENDM
001170 f430      	BRSH _0x12F
         ;    1790 			packet[i]=byte_read;
001171   +  	__GETW1R 16,17
001171 2fe0      	MOV  R30,R0x10
001172 2ff1      	MOV  R31,R0x11
          	.ENDM
001173 57ec      	SUBI R30,LOW(-_packet)
001174 4ffd      	SBCI R31,HIGH(-_packet)
001175 940e 1781 	CALL SUBOPT_0x48
         ;    1791 	}
          _0x12F:
001177   +  	__ADDWRN 16,17,1
001177 5f0f      	SUBI R0x10,LOW(-0x1)
001178 4f1f      	SBCI R0x11,HIGH(-0x1)
          	.ENDM
001179 cfea      	RJMP _0x12D
          _0x12E:
         ;    1792 	//changed from * to & typeo 7 Apr 2005
         ;    1793 	while(!(byte_read & RDC))
          _0x130:
00117a 91e0 054c 	LDS  R30,_byte_read
00117c 74e0      	ANDI R30,LOW(0x40)
00117d f419      	BRNE _0x132
         ;    1794 		read_rtl(ISR);
00117e 940e 14fb 	CALL SUBOPT_0xA
001180 cff9      	RJMP _0x130
          _0x132:
         ;    1795 	write_rtl(ISR,0xFF);
001181 940e 176d 	CALL SUBOPT_0x44
         ;    1796 	
         ;    1797 	//process an ARP packet
         ;    1798 	if(packet[enetpacketType0] == 0x08 && packet[enetpacketType1] == 0x06)
001183   +  	__GETB1MN _packet,12
001183 91e0 0290 	LDS  R30,_packet+0xc
          	.ENDM
001185 30e8      	CPI  R30,LOW(0x8)
001186 f421      	BRNE _0x134
001187   +  	__GETB1MN _packet,13
001187 91e0 0291 	LDS  R30,_packet+0xd
          	.ENDM
001189 30e6      	CPI  R30,LOW(0x6)
00118a f009      	BREQ _0x135
          _0x134:
00118b c03a      	RJMP _0x133
          _0x135:
         ;    1799 	{
         ;    1800 		if(packet[arp_hwtype+1]==0x01 && packet[arp_prtype] == 0x08 && packet[arp_prtype+1] == 0x00 && packet[arp_hwlen] == 0x06 && packet[arp_prlen] == 0x04 && packet[arp_op+1] == 0x01 && MYIP[0] == packet[arp_tipaddr] && MYIP[1] == packet[arp_tipaddr+1] && MYIP[2] == packet[arp_tipaddr+2] && MYIP[3] == packet[arp_tipaddr+3])
00118c   +  	__GETB1MN _packet,15
00118c 91e0 0293 	LDS  R30,_packet+0xf
          	.ENDM
00118e 30e1      	CPI  R30,LOW(0x1)
00118f f591      	BRNE _0x137
001190   +  	__GETB1MN _packet,16
001190 91e0 0294 	LDS  R30,_packet+0x10
          	.ENDM
001192 30e8      	CPI  R30,LOW(0x8)
001193 f571      	BRNE _0x137
001194   +  	__GETB1MN _packet,17
001194 91e0 0295 	LDS  R30,_packet+0x11
          	.ENDM
001196 30e0      	CPI  R30,0
001197 f551      	BRNE _0x137
001198   +  	__GETB1MN _packet,18
001198 91e0 0296 	LDS  R30,_packet+0x12
          	.ENDM
00119a 30e6      	CPI  R30,LOW(0x6)
00119b f531      	BRNE _0x137
00119c   +  	__GETB1MN _packet,19
00119c 91e0 0297 	LDS  R30,_packet+0x13
          	.ENDM
00119e 30e4      	CPI  R30,LOW(0x4)
00119f f511      	BRNE _0x137
0011a0   +  	__GETB1MN _packet,21
0011a0 91e0 0299 	LDS  R30,_packet+0x15
          	.ENDM
0011a2 30e1      	CPI  R30,LOW(0x1)
0011a3 f4f1      	BRNE _0x137
0011a4   +  	__GETB1MN _packet,38
0011a4 91e0 02aa 	LDS  R30,_packet+0x26
          	.ENDM
0011a6 91a0 026e 	LDS  R26,_MYIP
0011a8 17ea      	CP   R30,R26
0011a9 f4c1      	BRNE _0x137
0011aa   +  	__GETB1MN _MYIP,1
0011aa 91e0 026f 	LDS  R30,_myip+0x1
          	.ENDM
0011ac 93ef      	PUSH R30
0011ad   +  	__GETB1MN _packet,39
0011ad 91e0 02ab 	LDS  R30,_packet+0x27
          	.ENDM
0011af 91af      	POP  R26
0011b0 17ea      	CP   R30,R26
0011b1 f481      	BRNE _0x137
0011b2   +  	__GETB1MN _MYIP,2
0011b2 91e0 0270 	LDS  R30,_myip+0x2
          	.ENDM
0011b4 93ef      	PUSH R30
0011b5   +  	__GETB1MN _packet,40
0011b5 91e0 02ac 	LDS  R30,_packet+0x28
          	.ENDM
0011b7 91af      	POP  R26
0011b8 17ea      	CP   R30,R26
0011b9 f441      	BRNE _0x137
0011ba   +  	__GETB1MN _MYIP,3
0011ba 91e0 0271 	LDS  R30,_myip+0x3
          	.ENDM
0011bc 93ef      	PUSH R30
0011bd   +  	__GETB1MN _packet,41
0011bd 91e0 02ad 	LDS  R30,_packet+0x29
          	.ENDM
0011bf 91af      	POP  R26
0011c0 17ea      	CP   R30,R26
0011c1 f009      	BREQ _0x138
          _0x137:
0011c2 c002      	RJMP _0x136
          _0x138:
         ;    1801 			arp();
0011c3 940e 06e8 	CALL _arp
         ;    1802 	}
          _0x136:
         ;    1803 	//process an IP packet
         ;    1804 	else if(packet[enetpacketType0] == 0x08 && packet[enetpacketType1] == 0x00 && packet[ip_destaddr] == MYIP[0] && packet[ip_destaddr+1] == MYIP[1] && packet[ip_destaddr+2] == MYIP[2] && packet[ip_destaddr+3] == MYIP[3])
0011c5 c08a      	RJMP _0x139
          _0x133:
0011c6   +  	__GETB1MN _packet,12
0011c6 91e0 0290 	LDS  R30,_packet+0xc
          	.ENDM
0011c8 30e8      	CPI  R30,LOW(0x8)
0011c9 f511      	BRNE _0x13B
0011ca   +  	__GETB1MN _packet,13
0011ca 91e0 0291 	LDS  R30,_packet+0xd
          	.ENDM
0011cc 30e0      	CPI  R30,0
0011cd f4f1      	BRNE _0x13B
0011ce   +  	__GETB2MN _packet,30
0011ce 91a0 02a2 	LDS  R26,_packet+0x1e
          	.ENDM
0011d0 91e0 026e 	LDS  R30,_MYIP
0011d2 17ea      	CP   R30,R26
0011d3 f4c1      	BRNE _0x13B
0011d4   +  	__GETB1MN _packet,31
0011d4 91e0 02a3 	LDS  R30,_packet+0x1f
          	.ENDM
0011d6 93ef      	PUSH R30
0011d7   +  	__GETB1MN _MYIP,1
0011d7 91e0 026f 	LDS  R30,_myip+0x1
          	.ENDM
0011d9 91af      	POP  R26
0011da 17ea      	CP   R30,R26
0011db f481      	BRNE _0x13B
0011dc   +  	__GETB1MN _packet,32
0011dc 91e0 02a4 	LDS  R30,_packet+0x20
          	.ENDM
0011de 93ef      	PUSH R30
0011df   +  	__GETB1MN _MYIP,2
0011df 91e0 0270 	LDS  R30,_myip+0x2
          	.ENDM
0011e1 91af      	POP  R26
0011e2 17ea      	CP   R30,R26
0011e3 f441      	BRNE _0x13B
0011e4   +  	__GETB1MN _packet,33
0011e4 91e0 02a5 	LDS  R30,_packet+0x21
          	.ENDM
0011e6 93ef      	PUSH R30
0011e7   +  	__GETB1MN _MYIP,3
0011e7 91e0 0271 	LDS  R30,_myip+0x3
          	.ENDM
0011e9 91af      	POP  R26
0011ea 17ea      	CP   R30,R26
0011eb f009      	BREQ _0x13C
          _0x13B:
0011ec c063      	RJMP _0x13A
          _0x13C:
         ;    1805 	{
         ;    1806 		//do a checksum of the ipheader
         ;    1807 		ic_chksum = make16(packet[ip_hdr_cksum],packet[ip_hdr_cksum+1]);
0011ed   +  	__GETB1MN _packet,24
0011ed 91e0 029c 	LDS  R30,_packet+0x18
          	.ENDM
0011ef 940e 1505 	CALL SUBOPT_0xC
0011f1 93ff      	PUSH R31
0011f2 93ef      	PUSH R30
0011f3   +  	__GETB1MN _packet,25
0011f3 91e0 029d 	LDS  R30,_packet+0x19
          	.ENDM
0011f5 91af      	POP  R26
0011f6 91bf      	POP  R27
0011f7 940e 1535 	CALL SUBOPT_0xF
         ;    1808 		packet[ip_hdr_cksum] = 0x00;
0011f9   +  	__PUTB1MN _packet,24
0011f9 93e0 029c 	STS  _packet+0x18,R30
          	.ENDM
         ;    1809 		packet[ip_hdr_cksum+1] = 0x00;
0011fb 27ee      	CLR  R30
0011fc   +  	__PUTB1MN _packet,25
0011fc 93e0 029d 	STS  _packet+0x19,R30
          	.ENDM
         ;    1810 		hdr_chksum = 0;
0011fe 27ee      	CLR  R30
0011ff 93e0 056a 	STS  _hdr_chksum,R30
001201 93e0 056b 	STS  _hdr_chksum+1,R30
001203 93e0 056c 	STS  _hdr_chksum+2,R30
001205 93e0 056d 	STS  _hdr_chksum+3,R30
         ;    1811 		chksum16 = 0;
001207 27ee      	CLR  R30
001208 93e0 0554 	STS  _chksum16,R30
00120a 93e0 0555 	STS  _chksum16+1,R30
         ;    1812 		hdrlen = (packet[ip_vers_len] & 0x0F) << 2;
00120c   +  	__GETB1MN _packet,14
00120c 91e0 0292 	LDS  R30,_packet+0xe
          	.ENDM
00120e 940e 1597 	CALL SUBOPT_0x16
         ;    1813 		addr = &packet[ip_vers_len];
001210   +  	__POINTW1MN _packet,14
001210 e9e2      	LDI  R30,LOW(_packet+0xe)
001211 e0f2      	LDI  R31,HIGH(_packet+0xe)
          	.ENDM
001212 940e 150c 	CALL SUBOPT_0xD
         ;    1814 		cksum();
         ;    1815 		chksum16 = ~(hdr_chksum + ((hdr_chksum & 0xFFFF0000) >> 16));
         ;    1816 		
         ;    1817 		if(chksum16 == ic_chksum)
001214 940e 1578 	CALL SUBOPT_0x13
001216 f5c9      	BRNE _0x13D
         ;    1818 		{
         ;    1819 			packet[ip_hdr_cksum] = make8(ic_chksum,1);
001217 91e0 0566 	LDS  R30,_ic_chksum
001219 91f0 0567 	LDS  R31,_ic_chksum+1
00121b 2fef      	MOV  R30,R31
00121c   +  	__ANDD1N 0xFF
00121c 7fef      	ANDI R30,LOW(0xff)
00121d 70f0      	ANDI R31,HIGH(0xff)
00121e 7060      	ANDI R22,BYTE3(0xff)
00121f 7070      	ANDI R23,BYTE4(0xff)
          	.ENDM
001220   +  	__PUTB1MN _packet,24
001220 93e0 029c 	STS  _packet+0x18,R30
          	.ENDM
         ;    1820 			packet[ip_hdr_cksum+1] = make8(ic_chksum,0);
001222 91e0 0566 	LDS  R30,_ic_chksum
001224 91f0 0567 	LDS  R31,_ic_chksum+1
001226 9160 0568 	LDS  R22,_ic_chksum+2
001228 9170 0569 	LDS  R23,_ic_chksum+3
00122a   +  	__ANDD1N 0xFF
00122a 7fef      	ANDI R30,LOW(0xff)
00122b 70f0      	ANDI R31,HIGH(0xff)
00122c 7060      	ANDI R22,BYTE3(0xff)
00122d 7070      	ANDI R23,BYTE4(0xff)
          	.ENDM
00122e   +  	__PUTB1MN _packet,25
00122e 93e0 029d 	STS  _packet+0x19,R30
          	.ENDM
         ;    1821 			//Find the IP packet length
         ;    1822 			ip_packet_len = make16(packet[ip_pktlen],packet[ip_pktlen+1]);
001230   +  	__GETB1MN _packet,16
001230 91e0 0294 	LDS  R30,_packet+0x10
          	.ENDM
001232 940e 1505 	CALL SUBOPT_0xC
001234 93ff      	PUSH R31
001235 93ef      	PUSH R30
001236   +  	__GETB1MN _packet,17
001236 91e0 0295 	LDS  R30,_packet+0x11
          	.ENDM
001238 91af      	POP  R26
001239 91bf      	POP  R27
00123a 940e 1589 	CALL SUBOPT_0x14
         ;    1823 			//response to packet here
         ;    1824 			if(packet[ip_proto] == PROT_ICMP)
00123c   +  	__GETB1MN _packet,23
00123c 91e0 029b 	LDS  R30,_packet+0x17
          	.ENDM
00123e 30e1      	CPI  R30,LOW(0x1)
00123f f419      	BRNE _0x13E
         ;    1825 				icmp();
001240 940e 075e 	CALL _icmp
         ;    1826 			else if(packet[ip_proto] == PROT_UDP)
001242 c00d      	RJMP _0x13F
          _0x13E:
001243   +  	__GETB1MN _packet,23
001243 91e0 029b 	LDS  R30,_packet+0x17
          	.ENDM
001245 31e1      	CPI  R30,LOW(0x11)
001246 f419      	BRNE _0x140
         ;    1827 				udp();
001247 940e 07a2 	CALL _udp
         ;    1828 			else if(packet[ip_proto] == PROT_TCP)
001249 c006      	RJMP _0x141
          _0x140:
00124a   +  	__GETB1MN _packet,23
00124a 91e0 029b 	LDS  R30,_packet+0x17
          	.ENDM
00124c 30e6      	CPI  R30,LOW(0x6)
00124d f411      	BRNE _0x142
         ;    1829 				tcp();
00124e 940e 0b45 	CALL _tcp
         ;    1830 		}
          _0x142:
          _0x141:
          _0x13F:
         ;    1831 	}
          _0x13D:
         ;    1832 }
          _0x13A:
          _0x139:
          _0x1A8:
001250 9109      	LD   R16,Y+
001251 9119      	LD   R17,Y+
001252 9508      	RET
         ;    1833 #include "ipad.h"
         ;    1834 /*ipad.c library source file
         ;    1835 created by Eric Mesa
         ;    1836 
         ;    1837 *********************************
         ;    1838 ver 0.1 13 Apr 2005
         ;    1839 created ipad.c
         ;    1840 simply an implementation
         ;    1841 of what Jeremy had written
         ;    1842 without any extra optimizations
         ;    1843 outside of what we had fixed
         ;    1844 as of atmelwebserver.c ver 0.94.1
         ;    1845 *********************************
         ;    1846 
         ;    1847 goes along with ipad.h
         ;    1848 header file
         ;    1849 */
         ;    1850 
         ;    1851 /*
         ;    1852 ********************************************************
         ;    1853 * SETIPADDRS
         ;    1854 * This function builds the IP header
         ;    1855 *********************************************************
         ;    1856 */
         ;    1857 
         ;    1858 void setipaddrs()
         ;    1859 {
          _setipaddrs:
         ;    1860 	packet[enetpacketType0] = 0x08;
001253 e0e8      	LDI  R30,LOW(8)
001254   +  	__PUTB1MN _packet,12
001254 93e0 0290 	STS  _packet+0xc,R30
          	.ENDM
         ;    1861 	packet[enetpacketType1] = 0x00;
001256 27ee      	CLR  R30
001257   +  	__PUTB1MN _packet,13
001257 93e0 0291 	STS  _packet+0xd,R30
          	.ENDM
         ;    1862 	/* client[0] = packet[ip_srcaddr+1];
         ;    1863 	client[1] = packet[ip_srcaddr+1];
         ;    1864 	client[2] = packet[ip_srcaddr+2];
         ;    1865 	client[3] = packet[ip_srcaddr+3];
         ;    1866 	//move IP source address to destination address
         ;    1867 	packet[ip_destaddr] = client[0];
         ;    1868 	packet[ip_destaddr+1] = client[1];
         ;    1869 	packet[ip_destaddr+2] = client[2];
         ;    1870 	packet[ip_destaddr+3] = client[3];*/
         ;    1871 	//move IP source address to destination address
         ;    1872 	packet[ip_destaddr] = packet[ip_srcaddr];
001259   +  	__GETB1MN _packet,26
001259 91e0 029e 	LDS  R30,_packet+0x1a
          	.ENDM
00125b   +  	__PUTB1MN _packet,30
00125b 93e0 02a2 	STS  _packet+0x1e,R30
          	.ENDM
         ;    1873 	packet[ip_destaddr+1] = packet[ip_srcaddr+1];
00125d   +  	__GETB1MN _packet,27
00125d 91e0 029f 	LDS  R30,_packet+0x1b
          	.ENDM
00125f   +  	__PUTB1MN _packet,31
00125f 93e0 02a3 	STS  _packet+0x1f,R30
          	.ENDM
         ;    1874 	packet[ip_destaddr+2] = packet[ip_srcaddr+2];
001261   +  	__GETB1MN _packet,28
001261 91e0 02a0 	LDS  R30,_packet+0x1c
          	.ENDM
001263   +  	__PUTB1MN _packet,32
001263 93e0 02a4 	STS  _packet+0x20,R30
          	.ENDM
         ;    1875 	packet[ip_destaddr+3] = packet[ip_srcaddr+3];
001265   +  	__GETB1MN _packet,29
001265 91e0 02a1 	LDS  R30,_packet+0x1d
          	.ENDM
001267   +  	__PUTB1MN _packet,33
001267 93e0 02a5 	STS  _packet+0x21,R30
          	.ENDM
         ;    1876 	//make ethernet module IP address source address
         ;    1877 	packet[ip_srcaddr] = MYIP[0];
001269 91e0 026e 	LDS  R30,_MYIP
00126b   +  	__PUTB1MN _packet,26
00126b 93e0 029e 	STS  _packet+0x1a,R30
          	.ENDM
         ;    1878 	packet[ip_srcaddr+1] = MYIP[1];
00126d   +  	__GETB1MN _MYIP,1
00126d 91e0 026f 	LDS  R30,_myip+0x1
          	.ENDM
00126f   +  	__PUTB1MN _packet,27
00126f 93e0 029f 	STS  _packet+0x1b,R30
          	.ENDM
         ;    1879 	packet[ip_srcaddr+2] = MYIP[2];
001271   +  	__GETB1MN _MYIP,2
001271 91e0 0270 	LDS  R30,_myip+0x2
          	.ENDM
001273   +  	__PUTB1MN _packet,28
001273 93e0 02a0 	STS  _packet+0x1c,R30
          	.ENDM
         ;    1880 	packet[ip_srcaddr+3] = MYIP[3];
001275   +  	__GETB1MN _MYIP,3
001275 91e0 0271 	LDS  R30,_myip+0x3
          	.ENDM
001277   +  	__PUTB1MN _packet,29
001277 93e0 02a1 	STS  _packet+0x1d,R30
          	.ENDM
         ;    1881 	//move hardware source address to destination address
         ;    1882 	packet[enetpacketDest0] = packet[enetpacketSrc0];
001279   +  	__GETB1MN _packet,6
001279 91e0 028a 	LDS  R30,_packet+0x6
          	.ENDM
00127b 93e0 0284 	STS  _packet,R30
         ;    1883 	packet[enetpacketDest1] = packet[enetpacketSrc1];
00127d   +  	__GETB1MN _packet,7
00127d 91e0 028b 	LDS  R30,_packet+0x7
          	.ENDM
00127f   +  	__PUTB1MN _packet,1
00127f 93e0 0285 	STS  _packet+0x1,R30
          	.ENDM
         ;    1884 	packet[enetpacketDest2] = packet[enetpacketSrc2];
001281   +  	__GETB1MN _packet,8
001281 91e0 028c 	LDS  R30,_packet+0x8
          	.ENDM
001283   +  	__PUTB1MN _packet,2
001283 93e0 0286 	STS  _packet+0x2,R30
          	.ENDM
         ;    1885 	packet[enetpacketDest3] = packet[enetpacketSrc3];
001285   +  	__GETB1MN _packet,9
001285 91e0 028d 	LDS  R30,_packet+0x9
          	.ENDM
001287   +  	__PUTB1MN _packet,3
001287 93e0 0287 	STS  _packet+0x3,R30
          	.ENDM
         ;    1886 	packet[enetpacketDest4] = packet[enetpacketSrc4];
001289   +  	__GETB1MN _packet,10
001289 91e0 028e 	LDS  R30,_packet+0xa
          	.ENDM
00128b   +  	__PUTB1MN _packet,4
00128b 93e0 0288 	STS  _packet+0x4,R30
          	.ENDM
         ;    1887 	packet[enetpacketDest5] = packet[enetpacketSrc5];
00128d   +  	__GETB1MN _packet,11
00128d 91e0 028f 	LDS  R30,_packet+0xb
          	.ENDM
00128f   +  	__PUTB1MN _packet,5
00128f 93e0 0289 	STS  _packet+0x5,R30
          	.ENDM
         ;    1888 	//make ethernet module mac address the source address
         ;    1889 	packet[enetpacketSrc0] = MYMAC[0];
001291 91e0 027a 	LDS  R30,_MYMAC
001293   +  	__PUTB1MN _packet,6
001293 93e0 028a 	STS  _packet+0x6,R30
          	.ENDM
         ;    1890 	packet[enetpacketSrc1] = MYMAC[1];
001295   +  	__GETB1MN _MYMAC,1
001295 91e0 027b 	LDS  R30,_mymac+0x1
          	.ENDM
001297   +  	__PUTB1MN _packet,7
001297 93e0 028b 	STS  _packet+0x7,R30
          	.ENDM
         ;    1891 	packet[enetpacketSrc2] = MYMAC[2];
001299   +  	__GETB1MN _MYMAC,2
001299 91e0 027c 	LDS  R30,_mymac+0x2
          	.ENDM
00129b   +  	__PUTB1MN _packet,8
00129b 93e0 028c 	STS  _packet+0x8,R30
          	.ENDM
         ;    1892 	packet[enetpacketSrc3] = MYMAC[3];
00129d   +  	__GETB1MN _MYMAC,3
00129d 91e0 027d 	LDS  R30,_mymac+0x3
          	.ENDM
00129f   +  	__PUTB1MN _packet,9
00129f 93e0 028d 	STS  _packet+0x9,R30
          	.ENDM
         ;    1893 	packet[enetpacketSrc4] = MYMAC[4];
0012a1   +  	__GETB1MN _MYMAC,4
0012a1 91e0 027e 	LDS  R30,_mymac+0x4
          	.ENDM
0012a3   +  	__PUTB1MN _packet,10
0012a3 93e0 028e 	STS  _packet+0xa,R30
          	.ENDM
         ;    1894 	packet[enetpacketSrc5] = MYMAC[5];
0012a5   +  	__GETB1MN _MYMAC,5
0012a5 91e0 027f 	LDS  R30,_mymac+0x5
          	.ENDM
0012a7   +  	__PUTB1MN _packet,11
0012a7 93e0 028f 	STS  _packet+0xb,R30
          	.ENDM
         ;    1895 	//set IP header length to 20 bytes
         ;    1896 	packet[ip_vers_len] = 0x45;
0012a9 e4e5      	LDI  R30,LOW(69)
0012aa   +  	__PUTB1MN _packet,14
0012aa 93e0 0292 	STS  _packet+0xe,R30
          	.ENDM
         ;    1897 	//calculate IP packet length done by the respective protocols
         ;    1898 	//calculate the IP header checksum
         ;    1899 	packet[ip_hdr_cksum] = 0x00;
0012ac 27ee      	CLR  R30
0012ad   +  	__PUTB1MN _packet,24
0012ad 93e0 029c 	STS  _packet+0x18,R30
          	.ENDM
         ;    1900 	packet[ip_hdr_cksum+1] = 0x00;
0012af   +  	__PUTB1MN _packet,25
0012af 93e0 029d 	STS  _packet+0x19,R30
          	.ENDM
         ;    1901 	hdr_chksum = 0;
0012b1 27ee      	CLR  R30
0012b2 93e0 056a 	STS  _hdr_chksum,R30
0012b4 93e0 056b 	STS  _hdr_chksum+1,R30
0012b6 93e0 056c 	STS  _hdr_chksum+2,R30
0012b8 93e0 056d 	STS  _hdr_chksum+3,R30
         ;    1902 	hdrlen = (packet[ip_vers_len] & 0x0F) << 2;
0012ba   +  	__GETB1MN _packet,14
0012ba 91e0 0292 	LDS  R30,_packet+0xe
          	.ENDM
0012bc 940e 1597 	CALL SUBOPT_0x16
         ;    1903 	addr = &packet[ip_vers_len];
0012be   +  	__POINTW1MN _packet,14
0012be e9e2      	LDI  R30,LOW(_packet+0xe)
0012bf e0f2      	LDI  R31,HIGH(_packet+0xe)
          	.ENDM
0012c0 940e 150c 	CALL SUBOPT_0xD
         ;    1904 	cksum();
         ;    1905 	chksum16 = ~(hdr_chksum + ((hdr_chksum & 0xFFFF0000)>>16));
         ;    1906 	packet[ip_hdr_cksum] = make8(chksum16,1);
0012c2 940e 152f 	CALL SUBOPT_0xE
0012c4   +  	__PUTB1MN _packet,24
0012c4 93e0 029c 	STS  _packet+0x18,R30
          	.ENDM
         ;    1907 	packet[ip_hdr_cksum+1] = make8(chksum16,0);
0012c6 91e0 0554 	LDS  R30,_chksum16
0012c8 91f0 0555 	LDS  R31,_chksum16+1
0012ca 7fef      	ANDI R30,LOW(0xFF)
0012cb 70f0      	ANDI R31,HIGH(0xFF)
0012cc   +  	__PUTB1MN _packet,25
0012cc 93e0 029d 	STS  _packet+0x19,R30
          	.ENDM
         ;    1908 }
0012ce 9508      	RET
         ;    1909                                               
         ;    1910 //*******************************************************
         ;    1911 //* timer interrupt
         ;    1912 //*******************************************************
         ;    1913 interrupt[TIM0_COMP] void t0_cmp(void)
         ;    1914 {
          _t0_cmp:
0012cf 940e 17e4 	CALL __SAVEISR
         ;    1915 	waitcount--;
0012d1 91e0 0548 	LDS  R30,_waitcount
0012d3 91f0 0549 	LDS  R31,_waitcount+1
0012d5 9731      	SBIW R30,1
0012d6 93e0 0548 	STS  _waitcount,R30
0012d8 93f0 0549 	STS  _waitcount+1,R31
         ;    1916 	if(waitcount<0)
0012da 91a0 0548 	LDS  R26,_waitcount
0012dc 91b0 0549 	LDS  R27,_waitcount+1
0012de 9710      	SBIW R26,0
0012df f434      	BRGE _0x146
         ;    1917 	{
         ;    1918 		waitcount = 9000;
0012e0 e2e8      	LDI  R30,LOW(9000)
0012e1 e2f3      	LDI  R31,HIGH(9000)
0012e2 93e0 0548 	STS  _waitcount,R30
0012e4 93f0 0549 	STS  _waitcount+1,R31
         ;    1919 	}
         ;    1920 }
          _0x146:
0012e6 940e 17f2 	CALL __LOADISR
0012e8 9518      	RETI
         ;    1921 
         ;    1922 //******************************************************
         ;    1923 //* HTTP Server
         ;    1924 //* This particular code echoes the incomeing Telnet data 
         ;    1925 //* to the LCD
         ;    1926 //******************************************************
         ;    1927 
         ;    1928 unsigned char flash *req_page;
         
          	.DSEG
          _req_page:
000582      	.BYTE 0x2
         ;    1929 
         ;    1930 unsigned char flash *parse_http(void)
         ;    1931 {
         
          	.CSEG
          _parse_http:
         ;    1932 	unsigned char i, j;
         ;    1933 	unsigned char *getstr;
         ;    1934 	unsigned char flash *req_page;
         ;    1935 	unsigned char tmp_buffer[32];
         ;    1936 
         ;    1937 	getstr = packet+TCP_data;
0012e9 97a4      	SBIW R28,36
0012ea 931a      	ST   -Y,R17
0012eb 930a      	ST   -Y,R16
         ;	i -> R16
         ;	j -> R17
         ;	*getstr -> Y+36
         ;	*req_page -> Y+34
         ;	tmp_buffer -> Y+2
0012ec   +  	__POINTW1MN _packet,66
0012ec ece6      	LDI  R30,LOW(_packet+0x42)
0012ed e0f2      	LDI  R31,HIGH(_packet+0x42)
          	.ENDM
0012ee a3ec      	STD  Y+36,R30
0012ef a3fd      	STD  Y+36+1,R31
         ;    1938 
         ;    1939 	i = strpos(getstr, ' ');
0012f0 940e 1786 	CALL SUBOPT_0x49
0012f2 2f0e      	MOV  R16,R30
         ;    1940 	
         ;    1941 	if (i == -1)
0012f3 3f0f      	CPI  R16,255
0012f4 f429      	BRNE _0x148
         ;    1942 	{
         ;    1943 		return error400;
0012f5 91e0 0266 	LDS  R30,_error400
0012f7 91f0 0267 	LDS  R31,_error400+1
0012f9 c0b6      	RJMP _0x1A7
         ;    1944 	}
         ;    1945 	strncpy(tmp_buffer, getstr, i);
          _0x148:
0012fa 01fe      	MOVW R30,R28
0012fb 9632      	ADIW R30,2
0012fc 93fa      	ST   -Y,R31
0012fd 93ea      	ST   -Y,R30
0012fe a1ee      	LDD  R30,Y+38
0012ff a1ff      	LDD  R31,Y+38+1
001300 93fa      	ST   -Y,R31
001301 93ea      	ST   -Y,R30
001302 930a      	ST   -Y,R16
001303 940e 17b8 	CALL _strncpy
         ;    1946 	tmp_buffer[i] = '\0';
001305 2fe0      	MOV  R30,R16
001306 940e 178c 	CALL SUBOPT_0x4A
         ;    1947 
         ;    1948 	if (!strcmpf(tmp_buffer, "GET"))
001308   +  	__POINTW1FN _327,0
001308 e1e2      	LDI  R30,LOW(2*_327+0x0)
001309 e0fd      	LDI  R31,HIGH(2*_327+0x0)
          	.ENDM
00130a 940e 1798 	CALL SUBOPT_0x4B
00130c f011      	BREQ PC+3
00130d 940c 137a 	JMP _0x149
         ;    1949 	{
         ;    1950 		i++;
00130f 5f0f      	SUBI R16,-1
         ;    1951  		j = strpos(getstr+i, ' ');
001310 2fe0      	MOV  R30,R16
001311 a1ac      	LDD  R26,Y+36
001312 a1bd      	LDD  R27,Y+36+1
001313 27ff      	CLR  R31
001314 0fea      	ADD  R30,R26
001315 1ffb      	ADC  R31,R27
001316 940e 1786 	CALL SUBOPT_0x49
001318 2f1e      	MOV  R17,R30
         ;    1952  		
         ;    1953  		if (j == -1)
001319 3f1f      	CPI  R17,255
00131a f429      	BRNE _0x14A
         ;    1954  		{
         ;    1955  			return error400;
00131b 91e0 0266 	LDS  R30,_error400
00131d 91f0 0267 	LDS  R31,_error400+1
00131f c090      	RJMP _0x1A7
         ;    1956  		}
         ;    1957 		strncpy(tmp_buffer, getstr+i, j);
          _0x14A:
001320 01fe      	MOVW R30,R28
001321 9632      	ADIW R30,2
001322 93fa      	ST   -Y,R31
001323 93ea      	ST   -Y,R30
001324 2fe0      	MOV  R30,R16
001325 a1ae      	LDD  R26,Y+38
001326 a1bf      	LDD  R27,Y+38+1
001327 27ff      	CLR  R31
001328 0fea      	ADD  R30,R26
001329 1ffb      	ADC  R31,R27
00132a 93fa      	ST   -Y,R31
00132b 93ea      	ST   -Y,R30
00132c 931a      	ST   -Y,R17
00132d 940e 17b8 	CALL _strncpy
         ;    1958 		tmp_buffer[j] = '\0';
00132f 2fe1      	MOV  R30,R17
001330 940e 178c 	CALL SUBOPT_0x4A
         ;    1959 
         ;    1960 		if (!strcmpf(tmp_buffer, "/") || !strcmpf(tmp_buffer, "/index.html"))
001332   +  	__POINTW1FN _327,4
001332 e1e6      	LDI  R30,LOW(2*_327+0x4)
001333 e0fd      	LDI  R31,HIGH(2*_327+0x4)
          	.ENDM
001334 940e 1798 	CALL SUBOPT_0x4B
001336 f049      	BREQ _0x14C
001337 01fe      	MOVW R30,R28
001338 9632      	ADIW R30,2
001339 93fa      	ST   -Y,R31
00133a 93ea      	ST   -Y,R30
00133b   +  	__POINTW1FN _327,6
00133b e1e8      	LDI  R30,LOW(2*_327+0x6)
00133c e0fd      	LDI  R31,HIGH(2*_327+0x6)
          	.ENDM
00133d 940e 1798 	CALL SUBOPT_0x4B
00133f f439      	BRNE _0x14B
          _0x14C:
         ;    1961 		{
         ;    1962 			req_page = index;
001340 91e0 0260 	LDS  R30,_index
001342 91f0 0261 	LDS  R31,_index+1
001344 a3ea      	STD  Y+34,R30
001345 a3fb      	STD  Y+34+1,R31
         ;    1963 		}
         ;    1964 		else if (!strcmpf(tmp_buffer, "/about.html"))
001346 c032      	RJMP _0x14E
          _0x14B:
001347 01fe      	MOVW R30,R28
001348 9632      	ADIW R30,2
001349 93fa      	ST   -Y,R31
00134a 93ea      	ST   -Y,R30
00134b   +  	__POINTW1FN _327,18
00134b e2e4      	LDI  R30,LOW(2*_327+0x12)
00134c e0fd      	LDI  R31,HIGH(2*_327+0x12)
          	.ENDM
00134d 940e 1798 	CALL SUBOPT_0x4B
00134f f439      	BRNE _0x14F
         ;    1965 		{
         ;    1966 			req_page = about;
001350 91e0 0264 	LDS  R30,_about
001352 91f0 0265 	LDS  R31,_about+1
001354 a3ea      	STD  Y+34,R30
001355 a3fb      	STD  Y+34+1,R31
         ;    1967 		}
         ;    1968 		else if (!strcmpf(tmp_buffer, "/index2.html"))
001356 c022      	RJMP _0x150
          _0x14F:
001357 01fe      	MOVW R30,R28
001358 9632      	ADIW R30,2
001359 93fa      	ST   -Y,R31
00135a 93ea      	ST   -Y,R30
00135b   +  	__POINTW1FN _327,30
00135b e3e0      	LDI  R30,LOW(2*_327+0x1e)
00135c e0fd      	LDI  R31,HIGH(2*_327+0x1e)
          	.ENDM
00135d 940e 1798 	CALL SUBOPT_0x4B
00135f f439      	BRNE _0x151
         ;    1969 		{
         ;    1970 			req_page = index2;
001360 91e0 0262 	LDS  R30,_index2
001362 91f0 0263 	LDS  R31,_index2+1
001364 a3ea      	STD  Y+34,R30
001365 a3fb      	STD  Y+34+1,R31
         ;    1971 		}
         ;    1972 		else if (!strcmpf(tmp_buffer, "/favicon.ico"))
001366 c012      	RJMP _0x152
          _0x151:
001367 01fe      	MOVW R30,R28
001368 9632      	ADIW R30,2
001369 93fa      	ST   -Y,R31
00136a 93ea      	ST   -Y,R30
00136b   +  	__POINTW1FN _327,43
00136b e3ed      	LDI  R30,LOW(2*_327+0x2b)
00136c e0fd      	LDI  R31,HIGH(2*_327+0x2b)
          	.ENDM
00136d 940e 1798 	CALL SUBOPT_0x4B
00136f f419      	BRNE _0x153
         ;    1973 		{
         ;    1974 			req_page = favicon;
001370 e9e6      	LDI  R30,LOW(_favicon*2)
001371 e0f8      	LDI  R31,HIGH(_favicon*2)
001372 c004      	RJMP _0x1AD
         ;    1975 		}
         ;    1976 		else
          _0x153:
         ;    1977 		{
         ;    1978 			req_page = error404;
001373 91e0 0268 	LDS  R30,_error404
001375 91f0 0269 	LDS  R31,_error404+1
          _0x1AD:
001377 a3ea      	STD  Y+34,R30
001378 a3fb      	STD  Y+34+1,R31
         ;    1979 		}
          _0x152:
          _0x150:
          _0x14E:
         ;    1980 	}
         ;    1981 	else if (!strcmpf(tmp_buffer, "HEAD"))
001379 c034      	RJMP _0x155
          _0x149:
00137a 01fe      	MOVW R30,R28
00137b 9632      	ADIW R30,2
00137c 93fa      	ST   -Y,R31
00137d 93ea      	ST   -Y,R30
00137e   +  	__POINTW1FN _327,56
00137e e4ea      	LDI  R30,LOW(2*_327+0x38)
00137f e0fd      	LDI  R31,HIGH(2*_327+0x38)
          	.ENDM
001380 940e 1798 	CALL SUBOPT_0x4B
001382 f439      	BRNE _0x156
         ;    1982 	{
         ;    1983 		req_page = error501;
001383 91e0 026a 	LDS  R30,_error501
001385 91f0 026b 	LDS  R31,_error501+1
001387 a3ea      	STD  Y+34,R30
001388 a3fb      	STD  Y+34+1,R31
         ;    1984 	}
         ;    1985 	else if (!strcmpf(tmp_buffer, "POST"))
001389 c024      	RJMP _0x157
          _0x156:
00138a 01fe      	MOVW R30,R28
00138b 9632      	ADIW R30,2
00138c 93fa      	ST   -Y,R31
00138d 93ea      	ST   -Y,R30
00138e   +  	__POINTW1FN _327,61
00138e e4ef      	LDI  R30,LOW(2*_327+0x3d)
00138f e0fd      	LDI  R31,HIGH(2*_327+0x3d)
          	.ENDM
001390 940e 1798 	CALL SUBOPT_0x4B
001392 f439      	BRNE _0x158
         ;    1986 	{
         ;    1987 		req_page = error501;
001393 91e0 026a 	LDS  R30,_error501
001395 91f0 026b 	LDS  R31,_error501+1
001397 a3ea      	STD  Y+34,R30
001398 a3fb      	STD  Y+34+1,R31
         ;    1988 	}
         ;    1989 	else if (!strcmpf(tmp_buffer, "TRACE"))
001399 c014      	RJMP _0x159
          _0x158:
00139a 01fe      	MOVW R30,R28
00139b 9632      	ADIW R30,2
00139c 93fa      	ST   -Y,R31
00139d 93ea      	ST   -Y,R30
00139e   +  	__POINTW1FN _327,66
00139e e5e4      	LDI  R30,LOW(2*_327+0x42)
00139f e0fd      	LDI  R31,HIGH(2*_327+0x42)
          	.ENDM
0013a0 940e 1798 	CALL SUBOPT_0x4B
0013a2 f429      	BRNE _0x15A
         ;    1990 	{
         ;    1991 		req_page = error501;
0013a3 91e0 026a 	LDS  R30,_error501
0013a5 91f0 026b 	LDS  R31,_error501+1
0013a7 c004      	RJMP _0x1AE
         ;    1992 	}
         ;    1993 	else
          _0x15A:
         ;    1994 	{
         ;    1995 		req_page = error400;
0013a8 91e0 0266 	LDS  R30,_error400
0013aa 91f0 0267 	LDS  R31,_error400+1
          _0x1AE:
0013ac a3ea      	STD  Y+34,R30
0013ad a3fb      	STD  Y+34+1,R31
         ;    1996 	}
          _0x159:
          _0x157:
          _0x155:
         ;    1997 
         ;    1998 	return req_page;
0013ae a1ea      	LDD  R30,Y+34
0013af a1fb      	LDD  R31,Y+34+1
          _0x1A7:
0013b0 8119      	LDD  R17,Y+1
0013b1 8108      	LDD  R16,Y+0
0013b2 96a6      	ADIW R28,38
0013b3 9508      	RET
         ;    1999 }
         ;    2000 
         ;    2001 void http_server()
         ;    2002 {	
          _http_server:
         ;    2003 	if(http_state == 0)
0013b4 2c06      	MOV  R0,R6
0013b5 2807      	OR   R0,R7
0013b6 f451      	BRNE _0x15D
         ;    2004 	{
         ;    2005 		http_state = 1;
0013b7 e0e1      	LDI  R30,LOW(1)
0013b8 e0f0      	LDI  R31,HIGH(1)
0013b9   +  	__PUTW1R 6,7
0013b9 2e6e      	MOV  R0x6,R30
0013ba 2e7f      	MOV  R0x7,R31
          	.ENDM
         ;    2006 		req_page = parse_http();
0013bb 940e 12e9 	CALL _parse_http
0013bd 93e0 0582 	STS  _req_page,R30
0013bf 93f0 0583 	STS  _req_page+1,R31
         ;    2007 	}
         ;    2008 	
         ;    2009 	if(sendflag == 0 && pageendflag == 0)
          _0x15D:
0013c1 2400      	CLR  R0
0013c2 1408      	CP   R0,R8
0013c3 0409      	CPC  R0,R9
0013c4 f421      	BRNE _0x15F
0013c5 2400      	CLR  R0
0013c6 140a      	CP   R0,R10
0013c7 040b      	CPC  R0,R11
0013c8 f009      	BREQ _0x160
          _0x15F:
0013c9 c041      	RJMP _0x15E
          _0x160:
         ;    2010 	{
         ;    2011 		sendflag=1;
0013ca e0e1      	LDI  R30,LOW(1)
0013cb e0f0      	LDI  R31,HIGH(1)
0013cc   +  	__PUTW1R 8,9
0013cc 2e8e      	MOV  R0x8,R30
0013cd 2e9f      	MOV  R0x9,R31
          	.ENDM
         ;    2012 
         ;    2013 		page_size = strlenf(req_page);
0013ce 91e0 0582 	LDS  R30,_req_page
0013d0 91f0 0583 	LDS  R31,_req_page+1
0013d2 93fa      	ST   -Y,R31
0013d3 93ea      	ST   -Y,R30
0013d4 940e 17ad 	CALL _strlenf
0013d6   +  	__PUTW1R 4,5
0013d6 2e4e      	MOV  R0x4,R30
0013d7 2e5f      	MOV  R0x5,R31
          	.ENDM
         ;    2014 		counter += pack_html(req_page, counter);
0013d8 91e0 0582 	LDS  R30,_req_page
0013da 91f0 0583 	LDS  R31,_req_page+1
0013dc 93fa      	ST   -Y,R31
0013dd 93ea      	ST   -Y,R30
0013de 91e0 026c 	LDS  R30,_counter
0013e0 91f0 026d 	LDS  R31,_counter+1
0013e2 93fa      	ST   -Y,R31
0013e3 93ea      	ST   -Y,R30
0013e4 940e 0fb7 	CALL _pack_html
0013e6 91a0 026c 	LDS  R26,_counter
0013e8 91b0 026d 	LDS  R27,_counter+1
0013ea 0fea      	ADD  R30,R26
0013eb 1ffb      	ADC  R31,R27
0013ec 93e0 026c 	STS  _counter,R30
0013ee 93f0 026d 	STS  _counter+1,R31
         ;    2015 		if (counter >= page_size)
0013f0 91a0 026c 	LDS  R26,_counter
0013f2 91b0 026d 	LDS  R27,_counter+1
0013f4 15a4      	CP   R26,R4
0013f5 05b5      	CPC  R27,R5
0013f6 f078      	BRLO _0x161
         ;    2016 		{
         ;    2017 			tcpdatalen_out+=12;//figure this out
0013f7 91e0 055e 	LDS  R30,_tcpdatalen_out
0013f9 91f0 055f 	LDS  R31,_tcpdatalen_out+1
0013fb 963c      	ADIW R30,12
0013fc 93e0 055e 	STS  _tcpdatalen_out,R30
0013fe 93f0 055f 	STS  _tcpdatalen_out+1,R31
         ;    2018  			pageendflag = 1;
001400 e0e1      	LDI  R30,LOW(1)
001401 e0f0      	LDI  R31,HIGH(1)
001402   +  	__PUTW1R 10,11
001402 2eae      	MOV  R0xa,R30
001403 2ebf      	MOV  R0xb,R31
          	.ENDM
         ;    2019 			set_finflag;
001404 940e 170b 	CALL SUBOPT_0x38
         ;    2020 		}
         ;    2021 		send_tcp_packet();
          _0x161:
001406 940e 0e98 	CALL _send_tcp_packet
         ;    2022 		rollback=0;
001408 24cc      	CLR  R12
001409 24dd      	CLR  R13
         ;    2023 	}
         ;    2024 	// the send operation has been completed
         ;    2025 	else if(pageendflag == 1)
00140a c010      	RJMP _0x162
          _0x15E:
00140b e0e1      	LDI  R30,LOW(1)
00140c e0f0      	LDI  R31,HIGH(1)
00140d 15ea      	CP   R30,R10
00140e 05fb      	CPC  R31,R11
00140f f459      	BRNE _0x163
         ;    2026 	{
         ;    2027 		pageendflag = 0;
001410 24aa      	CLR  R10
001411 24bb      	CLR  R11
         ;    2028 		counter = 0;
001412 27ee      	CLR  R30
001413 93e0 026c 	STS  _counter,R30
001415 93e0 026d 	STS  _counter+1,R30
         ;    2029 		rollback = 0;
001417 24cc      	CLR  R12
001418 24dd      	CLR  R13
         ;    2030 		http_state = 0;
001419 2466      	CLR  R6
00141a 2477      	CLR  R7
         ;    2031 	}
         ;    2032 }
          _0x163:
          _0x162:
00141b 9508      	RET
         ;    2033 
         ;    2034 //**********************************************************
         ;    2035 //* Main
         ;    2036 //**********************************************************
         ;    2037 void main(void)
         ;    2038 {
          _main:
         ;    2039 	init_RTL8019AS();
00141c 940e 1034 	CALL _init_RTL8019AS
         ;    2040 	//setup timer 0
         ;    2041 	TIMSK = 2;
00141e e0e2      	LDI  R30,LOW(2)
00141f bfe9      	OUT  0x39,R30
         ;    2042 	OCR0 = 200;
001420 ece8      	LDI  R30,LOW(200)
001421 bfec      	OUT  0x3C,R30
         ;    2043 	TCCR0 = 0b00001011;
001422 e0eb      	LDI  R30,LOW(11)
001423 bfe3      	OUT  0x33,R30
         ;    2044 	ADMUX = 0b11100000; //internal 2.56 voltage ref with ext cap at AREF pin
001424 eee0      	LDI  R30,LOW(224)
001425 b9e7      	OUT  0x7,R30
         ;    2045 	
         ;    2046 	//enable ADC and set prescaler to 1/64*16MHz = 125,000
         ;    2047 	//and set int enable
         ;    2048 	ADCSR = 0x80 + 0x07 + 0x08;
001426 e8ef      	LDI  R30,LOW(143)
001427 b9e6      	OUT  0x6,R30
         ;    2049 	MCUCR = 0b10010000; //enable sleep and choose ADC mode
001428 e9e0      	LDI  R30,LOW(144)
001429 bfe5      	OUT  0x35,R30
         ;    2050 	#asm("sei")
00142a 9478      	sei
         ;    2051 	
         ;    2052 	clr_synflag;
00142b 940e 16ec 	CALL SUBOPT_0x35
         ;    2053 	clr_finflag;
00142d 940e 1737 	CALL SUBOPT_0x3A
         ;    2054 	// decreased by 4.8 seconds by Eric and Richard
         ;    2055 	delay_ms(5000); //wait for boot up (0.2 seconds)
00142f e8e8      	LDI  R30,LOW(5000)
001430 e1f3      	LDI  R31,HIGH(5000)
001431 93fa      	ST   -Y,R31
001432 93ea      	ST   -Y,R30
001433 940e 17d8 	CALL _delay_ms
         ;    2056 	
         ;    2057 	//ob-mstain an ip address
         ;    2058 	dhcp();
001435 940e 08df 	CALL _dhcp
         ;    2059 
         ;    2060 	//************************************************
         ;    2061 	//* Look for a packet in the receive buffer ring
         ;    2062 	
         ;    2063 	
         ;    2064 	//************************************************
         ;    2065 	while(1)
          _0x165:
         ;    2066 	{
         ;    2067 		//start the NIC
         ;    2068 		
         ;    2069 		write_rtl(CR,0x22);
001437 940e 1767 	CALL SUBOPT_0x43
         ;    2070 		write_rtl(ISR,0x7F);
001439 e0e7      	LDI  R30,LOW(7)
00143a 93ea      	ST   -Y,R30
00143b e7ef      	LDI  R30,LOW(127)
00143c 93ea      	ST   -Y,R30
00143d 940e 1013 	CALL _write_rtl
         ;    2071 		
         ;    2072 		//wait for a good packet
         ;    2073 		read_rtl(ISR);
00143f 940e 14fb 	CALL SUBOPT_0xA
         ;    2074 		while(!(byte_read & 1))
          _0x168:
001441 91e0 054c 	LDS  R30,_byte_read
001443 70e1      	ANDI R30,LOW(0x1)
001444 f541      	BRNE _0x16A
         ;    2075 		{
         ;    2076 			//PORTA.0 = 1;
         ;    2077 			//resend previous data
         ;    2078 			
         ;    2079 			if(waitcount == 0)
001445 91e0 0548 	LDS  R30,_waitcount
001447 91f0 0549 	LDS  R31,_waitcount+1
001449 9730      	SBIW R30,0
00144a f4f9      	BRNE _0x16B
         ;    2080 			{
         ;    2081 				if(DHCP_wait == 1)
00144b 91a0 0546 	LDS  R26,_DHCP_wait
00144d 91b0 0547 	LDS  R27,_DHCP_wait+1
00144f 30a1      	CPI  R26,LOW(0x1)
001450 e0e0      	LDI  R30,HIGH(0x1)
001451 07be      	CPC  R27,R30
001452 f439      	BRNE _0x16C
         ;    2082 				{
         ;    2083 					dhcpstate = DHCP_DIS;
001453 27ee      	CLR  R30
001454 93e0 0540 	STS  _dhcpstate,R30
001456 93e0 0541 	STS  _dhcpstate+1,R30
         ;    2084 					dhcp();
001458 940e 08df 	CALL _dhcp
         ;    2085 				}
         ;    2086 				if(DHCP_wait==2)
          _0x16C:
00145a 91a0 0546 	LDS  R26,_DHCP_wait
00145c 91b0 0547 	LDS  R27,_DHCP_wait+1
00145e 30a2      	CPI  R26,LOW(0x2)
00145f e0e0      	LDI  R30,HIGH(0x2)
001460 07be      	CPC  R27,R30
001461 f441      	BRNE _0x16D
         ;    2087 				{
         ;    2088 					dhcpstate = DHCP_OFF;
001462 e0e1      	LDI  R30,LOW(1)
001463 e0f0      	LDI  R31,HIGH(1)
001464 93e0 0540 	STS  _dhcpstate,R30
001466 93f0 0541 	STS  _dhcpstate+1,R31
         ;    2089 					dhcp();
001468 940e 08df 	CALL _dhcp
         ;    2090 				}
         ;    2091 			}
          _0x16D:
         ;    2092 			read_rtl(ISR);
          _0x16B:
00146a 940e 14fb 	CALL SUBOPT_0xA
         ;    2093 		}
00146c cfd4      	RJMP _0x168
          _0x16A:
         ;    2094 		//PORTA.0 = 0;
         ;    2095 		
         ;    2096 		//read the interrupt status register
         ;    2097 		read_rtl(ISR);
00146d 940e 14fb 	CALL SUBOPT_0xA
         ;    2098 		
         ;    2099 		//if the receive buffer has been overrun
         ;    2100 		if(byte_read & OVW)
00146f 91e0 054c 	LDS  R30,_byte_read
001471 71e0      	ANDI R30,LOW(0x10)
001472 f011      	BREQ _0x16E
         ;    2101 			overrun();
001473 940e 10ab 	CALL _overrun
         ;    2102 		
         ;    2103 		//if the receive buffer holds a good packet
         ;    2104 		if(byte_read & PRX)
          _0x16E:
001475 91e0 054c 	LDS  R30,_byte_read
001477 70e1      	ANDI R30,LOW(0x1)
001478 f011      	BREQ _0x16F
         ;    2105 		get_packet();
001479 940e 1138 	CALL _get_packet
         ;    2106 		//make sure the receive buffer ring is empty
         ;    2107 		//if BNRY = CURR, the buffer is empty
         ;    2108 		read_rtl(BNRY);
          _0x16F:
00147b e0e3      	LDI  R30,LOW(3)
00147c 93ea      	ST   -Y,R30
00147d 940e 1024 	CALL _read_rtl
         ;    2109 		data_L = byte_read;
00147f 91e0 054c 	LDS  R30,_byte_read
001481 93e0 054e 	STS  _data_L,R30
         ;    2110 		write_rtl(CR,0x62);
001483 940e 1773 	CALL SUBOPT_0x45
         ;    2111 		read_rtl(CURR);
001485 940e 14fb 	CALL SUBOPT_0xA
         ;    2112 		data_H = byte_read;
001487 91e0 054c 	LDS  R30,_byte_read
001489 93e0 054d 	STS  _data_H,R30
         ;    2113 		
         ;    2114 		write_rtl(CR,0x22);
00148b 940e 1767 	CALL SUBOPT_0x43
         ;    2115 		//buffer is not empty ..get next packet
         ;    2116 		if(data_L!=data_H)
00148d 91e0 054d 	LDS  R30,_data_H
00148f 91a0 054e 	LDS  R26,_data_L
001491 17ea      	CP   R30,R26
001492 f011      	BREQ _0x170
         ;    2117 			get_packet();
001493 940e 1138 	CALL _get_packet
         ;    2118 			
         ;    2119 		//reset the interrupt bits
         ;    2120 		write_rtl(ISR,0xFF);
          _0x170:
001495 940e 176d 	CALL SUBOPT_0x44
         ;    2121 	}
001497 cf9f      	RJMP _0x165
         ;    2122 }
          _0x171:
001498 cfff      	RJMP _0x171
          _getchar:
001499 9b5f           sbis usr,rxc
00149a cffe           rjmp _getchar
00149b b1ec           in   r30,udr
00149c 9508      	RET
          _putchar:
00149d 9b5d           sbis usr,udre
00149e cffe           rjmp _putchar
00149f 81e8           ld   r30,y
0014a0 b9ec           out  udr,r30
0014a1 9621      	ADIW R28,1
0014a2 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x0:
0014a3 930a      	ST   -Y,R16
0014a4 27ee      	CLR  R30
0014a5 93ea      	ST   -Y,R30
0014a6 e2e2      	LDI  R30,LOW(34)
0014a7 93ea      	ST   -Y,R30
0014a8 940e 1013 	CALL _write_rtl
0014aa e0e4      	LDI  R30,LOW(4)
0014ab 93ea      	ST   -Y,R30
0014ac e4e0      	LDI  R30,LOW(64)
0014ad 93ea      	ST   -Y,R30
0014ae 940e 1013 	CALL _write_rtl
0014b0 e0e8      	LDI  R30,LOW(8)
0014b1 93ea      	ST   -Y,R30
0014b2 27ee      	CLR  R30
0014b3 93ea      	ST   -Y,R30
0014b4 940e 1013 	CALL _write_rtl
0014b6 e0e9      	LDI  R30,LOW(9)
0014b7 93ea      	ST   -Y,R30
0014b8 e4e0      	LDI  R30,LOW(64)
0014b9 93ea      	ST   -Y,R30
0014ba 940e 1013 	CALL _write_rtl
0014bc e0e7      	LDI  R30,LOW(7)
0014bd 93ea      	ST   -Y,R30
0014be efef      	LDI  R30,LOW(255)
0014bf 93ea      	ST   -Y,R30
0014c0 940e 1013 	CALL _write_rtl
0014c2 e0ea      	LDI  R30,LOW(10)
0014c3 93ea      	ST   -Y,R30
0014c4 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x1:
0014c5 e3ec      	LDI  R30,LOW(60)
0014c6 93ea      	ST   -Y,R30
0014c7 940c 1013 	JMP  _write_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x2:
0014c9 e0eb      	LDI  R30,LOW(11)
0014ca 93ea      	ST   -Y,R30
0014cb 27ee      	CLR  R30
0014cc 93ea      	ST   -Y,R30
0014cd 940c 1013 	JMP  _write_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x3:
0014cf 27ee      	CLR  R30
0014d0 93ea      	ST   -Y,R30
0014d1 e1e2      	LDI  R30,LOW(18)
0014d2 93ea      	ST   -Y,R30
0014d3 940c 1013 	JMP  _write_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES
          SUBOPT_0x4:
0014d5 e1e0      	LDI  R30,LOW(16)
0014d6 93ea      	ST   -Y,R30
0014d7 2fe0      	MOV  R30,R16
0014d8 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x5:
0014d9 5fea      	SUBI R30,-LOW(6)
0014da 27ff      	CLR  R31
0014db 57ec      	SUBI R30,LOW(-_packet)
0014dc 4ffd      	SBCI R31,HIGH(-_packet)
0014dd 81e0      	LD   R30,Z
0014de 93ea      	ST   -Y,R30
0014df 940c 1013 	JMP  _write_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x6:
0014e1 27ff      	CLR  R31
0014e2 58e6      	SUBI R30,LOW(-_MYMAC)
0014e3 4ffd      	SBCI R31,HIGH(-_MYMAC)
0014e4 81e0      	LD   R30,Z
0014e5 93ea      	ST   -Y,R30
0014e6 940c 1013 	JMP  _write_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x7:
0014e8 91a0 054a 	LDS  R26,_addr
0014ea 91b0 054b 	LDS  R27,_addr+1
0014ec 91ed      	LD   R30,X+
0014ed 93a0 054a 	STS  _addr,R26
0014ef 93b0 054b 	STS  _addr+1,R27
0014f1 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES
          SUBOPT_0x8:
0014f2 81e0      	LD   R30,Z
0014f3 93ea      	ST   -Y,R30
0014f4 940c 1013 	JMP  _write_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES
          SUBOPT_0x9:
0014f6 93ea      	ST   -Y,R30
0014f7 27ee      	CLR  R30
0014f8 93ea      	ST   -Y,R30
0014f9 940c 1013 	JMP  _write_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES
          SUBOPT_0xA:
0014fb e0e7      	LDI  R30,LOW(7)
0014fc 93ea      	ST   -Y,R30
0014fd 940c 1024 	JMP  _read_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0xB:
0014ff 27ee      	CLR  R30
001500 93ea      	ST   -Y,R30
001501 e2e4      	LDI  R30,LOW(36)
001502 93ea      	ST   -Y,R30
001503 940c 1013 	JMP  _write_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES
          SUBOPT_0xC:
001505 01df      	MOVW R26,R30
001506 27bb      	CLR  R27
001507 e0e0      	LDI  R30,LOW(256)
001508 e0f1      	LDI  R31,HIGH(256)
001509 940e 1831 	CALL __MULW12U
00150b 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES
          SUBOPT_0xD:
00150c 93e0 054a 	STS  _addr,R30
00150e 93f0 054b 	STS  _addr+1,R31
001510 940e 0de7 	CALL _cksum
001512 91e0 056a 	LDS  R30,_hdr_chksum
001514 91f0 056b 	LDS  R31,_hdr_chksum+1
001516 9160 056c 	LDS  R22,_hdr_chksum+2
001518 9170 056d 	LDS  R23,_hdr_chksum+3
00151a 70e0      	ANDI R30,LOW(0xFFFF0000)
00151b 70f0      	ANDI R31,HIGH(0xFFFF0000)
00151c 940e 181b 	CALL __LSRD16
00151e 91a0 056a 	LDS  R26,_hdr_chksum
001520 91b0 056b 	LDS  R27,_hdr_chksum+1
001522 9180 056c 	LDS  R24,_hdr_chksum+2
001524 9190 056d 	LDS  R25,_hdr_chksum+3
001526 940e 1800 	CALL __ADDD12
001528 940e 182c 	CALL __COMD1
00152a 93e0 0554 	STS  _chksum16,R30
00152c 93f0 0555 	STS  _chksum16+1,R31
00152e 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES
          SUBOPT_0xE:
00152f 91e0 0555 	LDS  R30,_chksum16+1
001531 70f0      	ANDI R31,HIGH(0x0)
001532 7fef      	ANDI R30,LOW(0xFF)
001533 70f0      	ANDI R31,HIGH(0xFF)
001534 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0xF:
001535 27ff      	CLR  R31
001536 0fea      	ADD  R30,R26
001537 1ffb      	ADC  R31,R27
001538 2766      	CLR  R22
001539 2777      	CLR  R23
00153a 93e0 0566 	STS  _ic_chksum,R30
00153c 93f0 0567 	STS  _ic_chksum+1,R31
00153e 9360 0568 	STS  _ic_chksum+2,R22
001540 9370 0569 	STS  _ic_chksum+3,R23
001542 27ee      	CLR  R30
001543 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES
          SUBOPT_0x10:
001544 27ee      	CLR  R30
001545 93e0 056a 	STS  _hdr_chksum,R30
001547 93e0 056b 	STS  _hdr_chksum+1,R30
001549 93e0 056c 	STS  _hdr_chksum+2,R30
00154b 93e0 056d 	STS  _hdr_chksum+3,R30
00154d e0e8      	LDI  R30,LOW(8)
00154e e0f0      	LDI  R31,HIGH(8)
00154f 93e0 0556 	STS  _hdrlen,R30
001551 93f0 0557 	STS  _hdrlen+1,R31
001553 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x11:
001554 91a0 056a 	LDS  R26,_hdr_chksum
001556 91b0 056b 	LDS  R27,_hdr_chksum+1
001558 9180 056c 	LDS  R24,_hdr_chksum+2
00155a 9190 056d 	LDS  R25,_hdr_chksum+3
00155c 27ff      	CLR  R31
00155d 2766      	CLR  R22
00155e 2777      	CLR  R23
00155f 940e 1800 	CALL __ADDD12
001561 93e0 056a 	STS  _hdr_chksum,R30
001563 93f0 056b 	STS  _hdr_chksum+1,R31
001565 9360 056c 	STS  _hdr_chksum+2,R22
001567 9370 056d 	STS  _hdr_chksum+3,R23
001569 e0e2      	LDI  R30,LOW(2)
00156a e0f0      	LDI  R31,HIGH(2)
00156b 93e0 0556 	STS  _hdrlen,R30
00156d 93f0 0557 	STS  _hdrlen+1,R31
00156f 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x12:
001570 27ff      	CLR  R31
001571 0fea      	ADD  R30,R26
001572 1ffb      	ADC  R31,R27
001573 93e0 0556 	STS  _hdrlen,R30
001575 93f0 0557 	STS  _hdrlen+1,R31
001577 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x13:
001578 91e0 0566 	LDS  R30,_ic_chksum
00157a 91f0 0567 	LDS  R31,_ic_chksum+1
00157c 9160 0568 	LDS  R22,_ic_chksum+2
00157e 9170 0569 	LDS  R23,_ic_chksum+3
001580 91a0 0554 	LDS  R26,_chksum16
001582 91b0 0555 	LDS  R27,_chksum16+1
001584 2788      	CLR  R24
001585 2799      	CLR  R25
001586 940e 184a 	CALL __CPD12
001588 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x14:
001589 27ff      	CLR  R31
00158a 0fea      	ADD  R30,R26
00158b 1ffb      	ADC  R31,R27
00158c 93e0 0564 	STS  _ip_packet_len,R30
00158e 93f0 0565 	STS  _ip_packet_len+1,R31
001590 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x15:
001591 91e0 0565 	LDS  R30,_ip_packet_len+1
001593 70f0      	ANDI R31,HIGH(0x0)
001594 7fef      	ANDI R30,LOW(0xFF)
001595 70f0      	ANDI R31,HIGH(0xFF)
001596 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x16:
001597 70ef      	ANDI R30,LOW(0xF)
001598 0fee      	LSL  R30
001599 0fee      	LSL  R30
00159a 27ff      	CLR  R31
00159b 93e0 0556 	STS  _hdrlen,R30
00159d 93f0 0557 	STS  _hdrlen+1,R31
00159f 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x17:
0015a0 91e0 0564 	LDS  R30,_ip_packet_len
0015a2 91f0 0565 	LDS  R31,_ip_packet_len+1
0015a4 963e      	ADIW R30,14
0015a5 93e0 0550 	STS  _txlen,R30
0015a7 93f0 0551 	STS  _txlen+1,R31
0015a9 91a0 0550 	LDS  R26,_txlen
0015ab 91b0 0551 	LDS  R27,_txlen+1
0015ad 33ac      	CPI  R26,LOW(0x3C)
0015ae e0e0      	LDI  R30,HIGH(0x3C)
0015af 07be      	CPC  R27,R30
0015b0 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x18:
0015b1 91e0 0550 	LDS  R30,_txlen
0015b3 91f0 0551 	LDS  R31,_txlen+1
0015b5 7fef      	ANDI R30,LOW(0xFF)
0015b6 70f0      	ANDI R31,HIGH(0xFF)
0015b7 93e0 054e 	STS  _data_L,R30
0015b9 91e0 0551 	LDS  R30,_txlen+1
0015bb 70f0      	ANDI R31,HIGH(0x0)
0015bc 7fef      	ANDI R30,LOW(0xFF)
0015bd 70f0      	ANDI R31,HIGH(0xFF)
0015be 93e0 054d 	STS  _data_H,R30
0015c0 27ee      	CLR  R30
0015c1 93ea      	ST   -Y,R30
0015c2 e2e2      	LDI  R30,LOW(34)
0015c3 93ea      	ST   -Y,R30
0015c4 940e 1013 	CALL _write_rtl
0015c6 27ee      	CLR  R30
0015c7 93ea      	ST   -Y,R30
0015c8 940c 1024 	JMP  _read_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x19:
0015ca 27ee      	CLR  R30
0015cb 93ea      	ST   -Y,R30
0015cc 940c 1024 	JMP  _read_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x1A:
0015ce e0e4      	LDI  R30,LOW(4)
0015cf 93ea      	ST   -Y,R30
0015d0 e4e0      	LDI  R30,LOW(64)
0015d1 93ea      	ST   -Y,R30
0015d2 940e 1013 	CALL _write_rtl
0015d4 e0e8      	LDI  R30,LOW(8)
0015d5 cf20      	RJMP SUBOPT_0x9
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x1B:
0015d6 e0e9      	LDI  R30,LOW(9)
0015d7 93ea      	ST   -Y,R30
0015d8 e4e0      	LDI  R30,LOW(64)
0015d9 93ea      	ST   -Y,R30
0015da 940e 1013 	CALL _write_rtl
0015dc e0e7      	LDI  R30,LOW(7)
0015dd 93ea      	ST   -Y,R30
0015de efef      	LDI  R30,LOW(255)
0015df 93ea      	ST   -Y,R30
0015e0 940e 1013 	CALL _write_rtl
0015e2 e0ea      	LDI  R30,LOW(10)
0015e3 93ea      	ST   -Y,R30
0015e4 91e0 054e 	LDS  R30,_data_L
0015e6 93ea      	ST   -Y,R30
0015e7 940e 1013 	CALL _write_rtl
0015e9 e0eb      	LDI  R30,LOW(11)
0015ea 93ea      	ST   -Y,R30
0015eb 91e0 054d 	LDS  R30,_data_H
0015ed 93ea      	ST   -Y,R30
0015ee 940e 1013 	CALL _write_rtl
0015f0 cede      	RJMP SUBOPT_0x3
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x1C:
0015f1 e1e0      	LDI  R30,LOW(16)
0015f2 93ea      	ST   -Y,R30
0015f3   +  	__GETW1R 16,17
0015f3 2fe0      	MOV  R30,R0x10
0015f4 2ff1      	MOV  R31,R0x11
          	.ENDM
0015f5 9630      	ADIW R30,0
0015f6 57ec      	SUBI R30,LOW(-_packet)
0015f7 4ffd      	SBCI R31,HIGH(-_packet)
0015f8 cef9      	RJMP SUBOPT_0x8
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x1D:
0015f9 e0e5      	LDI  R30,LOW(5)
0015fa 93ea      	ST   -Y,R30
0015fb 91e0 054e 	LDS  R30,_data_L
0015fd 93ea      	ST   -Y,R30
0015fe 940e 1013 	CALL _write_rtl
001600 e0e6      	LDI  R30,LOW(6)
001601 93ea      	ST   -Y,R30
001602 91e0 054d 	LDS  R30,_data_H
001604 93ea      	ST   -Y,R30
001605 940e 1013 	CALL _write_rtl
001607 cef7      	RJMP SUBOPT_0xB
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x1E:
001608 2fa0      	MOV  R26,R16
001609 27bb      	CLR  R27
00160a 59a2      	SUBI R26,LOW(-_MYIP)
00160b 4fbd      	SBCI R27,HIGH(-_MYIP)
00160c efef      	LDI  R30,LOW(255)
00160d 93ec      	ST   X,R30
00160e 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x1F:
00160f 2fa0      	MOV  R26,R16
001610 27bb      	CLR  R27
001611 57ac      	SUBI R26,LOW(-_packet)
001612 4fbd      	SBCI R27,HIGH(-_packet)
001613 27ee      	CLR  R30
001614 93ec      	ST   X,R30
001615 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x20:
001616 2fe0      	MOV  R30,R16
001617 5bea      	SUBI R30,-LOW(70)
001618 27ff      	CLR  R31
001619 57ec      	SUBI R30,LOW(-_packet)
00161a 4ffd      	SBCI R31,HIGH(-_packet)
00161b 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x21:
00161c 2fe0      	MOV  R30,R16
00161d 27ff      	CLR  R31
00161e 58e6      	SUBI R30,LOW(-_MYMAC)
00161f 4ffd      	SBCI R31,HIGH(-_MYMAC)
001620 81e0      	LD   R30,Z
001621 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x22:
001622 2fe0      	MOV  R30,R16
001623 5be4      	SUBI R30,-LOW(76)
001624 27ff      	CLR  R31
001625 57ec      	SUBI R30,LOW(-_packet)
001626 4ffd      	SBCI R31,HIGH(-_packet)
001627 01df      	MOVW R26,R30
001628 27ee      	CLR  R30
001629 93ec      	ST   X,R30
00162a 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x23:
00162b 2fe0      	MOV  R30,R16
00162c 5aea      	SUBI R30,-LOW(86)
00162d 27ff      	CLR  R31
00162e 57ec      	SUBI R30,LOW(-_packet)
00162f 4ffd      	SBCI R31,HIGH(-_packet)
001630 01df      	MOVW R26,R30
001631 27ee      	CLR  R30
001632 93ec      	ST   X,R30
001633 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x24:
001634 2fe0      	MOV  R30,R16
001635 e2a0      	LDI  R26,LOW(288)
001636 e0b1      	LDI  R27,HIGH(288)
001637 27ff      	CLR  R31
001638 0fea      	ADD  R30,R26
001639 1ffb      	ADC  R31,R27
00163a 57ec      	SUBI R30,LOW(-_packet)
00163b 4ffd      	SBCI R31,HIGH(-_packet)
00163c 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x25:
00163d 93e0 055c 	STS  _dhcpoptlen,R30
00163f 93f0 055d 	STS  _dhcpoptlen+1,R31
001641 50ec      	SUBI R30,LOW(-244)
001642 4fff      	SBCI R31,HIGH(-244)
001643 2fef      	MOV  R30,R31
001644 7fef      	ANDI R30,LOW(0xFF)
001645 70f0      	ANDI R31,HIGH(0xFF)
001646 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x26:
001647 91a0 055c 	LDS  R26,_dhcpoptlen
001649 91b0 055d 	LDS  R27,_dhcpoptlen+1
00164b 50ac      	SUBI R26,LOW(-244)
00164c 4fbf      	SBCI R27,HIGH(-244)
00164d efef      	LDI  R30,LOW(255)
00164e e0f0      	LDI  R31,HIGH(255)
00164f 23ea      	AND  R30,R26
001650 23fb      	AND  R31,R27
001651 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x27:
001652 27ff      	CLR  R31
001653 2766      	CLR  R22
001654 2777      	CLR  R23
001655 01df      	MOVW R26,R30
001656 01cb      	MOVW R24,R22
001657 e1e8      	LDI  R30,LOW(24)
001658 940e 180f 	CALL __LSLD12
00165a 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x28:
00165b 27ff      	CLR  R31
00165c 2766      	CLR  R22
00165d 2777      	CLR  R23
00165e 01df      	MOVW R26,R30
00165f 01cb      	MOVW R24,R22
001660 e0e8      	LDI  R30,LOW(8)
001661 940e 180f 	CALL __LSLD12
001663 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x29:
001664 2fe0      	MOV  R30,R16
001665 27ff      	CLR  R31
001666 5bee      	SUBI R30,LOW(-_req_ip)
001667 4ffa      	SBCI R31,HIGH(-_req_ip)
001668 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x2A:
001669 2fe0      	MOV  R30,R16
00166a 5ce6      	SUBI R30,-LOW(58)
00166b 27ff      	CLR  R31
00166c 57ec      	SUBI R30,LOW(-_packet)
00166d 4ffd      	SBCI R31,HIGH(-_packet)
00166e 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x2B:
00166f 2fe0      	MOV  R30,R16
001670 27ff      	CLR  R31
001671 58ea      	SUBI R30,LOW(-_serverid)
001672 4ffd      	SBCI R31,HIGH(-_serverid)
001673 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x2C:
001674 27ff      	CLR  R31
001675 0fea      	ADD  R30,R26
001676 1ffb      	ADC  R31,R27
001677 57ec      	SUBI R30,LOW(-_packet)
001678 4ffd      	SBCI R31,HIGH(-_packet)
001679 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x2D:
00167a 01df      	MOVW R26,R30
00167b 27ee      	CLR  R30
00167c 93ec      	ST   X,R30
00167d 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x2E:
00167e 70ef      	ANDI R30,LOW(0xF)
00167f 0fee      	LSL  R30
001680 0fee      	LSL  R30
001681 91a0 0564 	LDS  R26,_ip_packet_len
001683 91b0 0565 	LDS  R27,_ip_packet_len+1
001685 27ff      	CLR  R31
001686 1bae      	SUB  R26,R30
001687 0bbf      	SBC  R27,R31
001688 93a0 0558 	STS  _tcplen,R26
00168a 93b0 0559 	STS  _tcplen+1,R27
00168c 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x2F:
00168d 91a0 056a 	LDS  R26,_hdr_chksum
00168f 91b0 056b 	LDS  R27,_hdr_chksum+1
001691 9180 056c 	LDS  R24,_hdr_chksum+2
001693 9190 056d 	LDS  R25,_hdr_chksum+3
001695 27ff      	CLR  R31
001696 2766      	CLR  R22
001697 2777      	CLR  R23
001698 940e 1800 	CALL __ADDD12
00169a 93e0 056a 	STS  _hdr_chksum,R30
00169c 93f0 056b 	STS  _hdr_chksum+1,R31
00169e 9360 056c 	STS  _hdr_chksum+2,R22
0016a0 9370 056d 	STS  _hdr_chksum+3,R23
0016a2 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x30:
0016a3 91e0 0558 	LDS  R30,_tcplen
0016a5 91f0 0559 	LDS  R31,_tcplen+1
0016a7 91a0 056a 	LDS  R26,_hdr_chksum
0016a9 91b0 056b 	LDS  R27,_hdr_chksum+1
0016ab 9180 056c 	LDS  R24,_hdr_chksum+2
0016ad 9190 056d 	LDS  R25,_hdr_chksum+3
0016af 2766      	CLR  R22
0016b0 2777      	CLR  R23
0016b1 940e 1800 	CALL __ADDD12
0016b3 93e0 056a 	STS  _hdr_chksum,R30
0016b5 93f0 056b 	STS  _hdr_chksum+1,R31
0016b7 9360 056c 	STS  _hdr_chksum+2,R22
0016b9 9370 056d 	STS  _hdr_chksum+3,R23
0016bb 91e0 0558 	LDS  R30,_tcplen
0016bd 91f0 0559 	LDS  R31,_tcplen+1
0016bf 93e0 0556 	STS  _hdrlen,R30
0016c1 93f0 0557 	STS  _hdrlen+1,R31
0016c3 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x31:
0016c4 91e0 054e 	LDS  R30,_data_L
0016c6 93ec      	ST   X,R30
0016c7 940c 0e14 	JMP  _assemble_ack
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x32:
0016c9 91a0 0560 	LDS  R26,_ISN
0016cb 91b0 0561 	LDS  R27,_ISN+1
0016cd 9611      	ADIW R26,1
0016ce 93a0 0560 	STS  _ISN,R26
0016d0 93b0 0561 	STS  _ISN+1,R27
0016d2 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x33:
0016d3 91e0 056e 	LDS  R30,_my_seqnum
0016d5 91f0 056f 	LDS  R31,_my_seqnum+1
0016d7 9160 0570 	LDS  R22,_my_seqnum+2
0016d9 9170 0571 	LDS  R23,_my_seqnum+3
0016db 940e 181b 	CALL __LSRD16
0016dd   +  	__ANDD1N 0xFF
0016dd 7fef      	ANDI R30,LOW(0xff)
0016de 70f0      	ANDI R31,HIGH(0xff)
0016df 7060      	ANDI R22,BYTE3(0xff)
0016e0 7070      	ANDI R23,BYTE4(0xff)
          	.ENDM
0016e1 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x34:
0016e2 91e0 056e 	LDS  R30,_my_seqnum
0016e4 91f0 056f 	LDS  R31,_my_seqnum+1
0016e6 2fef      	MOV  R30,R31
0016e7   +  	__ANDD1N 0xFF
0016e7 7fef      	ANDI R30,LOW(0xff)
0016e8 70f0      	ANDI R31,HIGH(0xff)
0016e9 7060      	ANDI R22,BYTE3(0xff)
0016ea 7070      	ANDI R23,BYTE4(0xff)
          	.ENDM
0016eb 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x35:
0016ec 2dee      	MOV  R30,R14
0016ed 7fee      	ANDI R30,0xFE
0016ee 2eee      	MOV  R14,R30
0016ef 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x36:
0016f0 e0e1      	LDI  R30,LOW(1)
0016f1 e0f0      	LDI  R31,HIGH(1)
0016f2 93e0 057e 	STS  _ackflag,R30
0016f4 93f0 057f 	STS  _ackflag+1,R31
0016f6 940c 13b4 	JMP  _http_server
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x37:
0016f8 91a0 0576 	LDS  R26,_incoming_ack
0016fa 91b0 0577 	LDS  R27,_incoming_ack+1
0016fc 9180 0578 	LDS  R24,_incoming_ack+2
0016fe 9190 0579 	LDS  R25,_incoming_ack+3
001700 91e0 057a 	LDS  R30,_expected_ack
001702 91f0 057b 	LDS  R31,_expected_ack+1
001704 9160 057c 	LDS  R22,_expected_ack+2
001706 9170 057d 	LDS  R23,_expected_ack+3
001708 940e 180a 	CALL __SUBD12
00170a 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x38:
00170b 2dee      	MOV  R30,R14
00170c 60e2      	ORI  R30,2
00170d 2eee      	MOV  R14,R30
00170e 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x39:
00170f 93e0 054e 	STS  _data_L,R30
001711 91a0 054d 	LDS  R26,_data_H
001713 27bb      	CLR  R27
001714 e0e0      	LDI  R30,LOW(256)
001715 e0f1      	LDI  R31,HIGH(256)
001716 940e 1831 	CALL __MULW12U
001718 01df      	MOVW R26,R30
001719 91e0 054e 	LDS  R30,_data_L
00171b 27ff      	CLR  R31
00171c 0fea      	ADD  R30,R26
00171d 1ffb      	ADC  R31,R27
00171e 93e0 0554 	STS  _chksum16,R30
001720 93f0 0555 	STS  _chksum16+1,R31
001722 91a0 056a 	LDS  R26,_hdr_chksum
001724 91b0 056b 	LDS  R27,_hdr_chksum+1
001726 9180 056c 	LDS  R24,_hdr_chksum+2
001728 9190 056d 	LDS  R25,_hdr_chksum+3
00172a 2766      	CLR  R22
00172b 2777      	CLR  R23
00172c 940e 1800 	CALL __ADDD12
00172e 93e0 056a 	STS  _hdr_chksum,R30
001730 93f0 056b 	STS  _hdr_chksum+1,R31
001732 9360 056c 	STS  _hdr_chksum+2,R22
001734 9370 056d 	STS  _hdr_chksum+3,R23
001736 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x3A:
001737 2dee      	MOV  R30,R14
001738 7fed      	ANDI R30,0xFD
001739 2eee      	MOV  R14,R30
00173a 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x3B:
00173b 2fe0      	MOV  R30,R16
00173c 5bed      	SUBI R30,-LOW(67)
00173d 27ff      	CLR  R31
00173e 57ec      	SUBI R30,LOW(-_packet)
00173f 4ffd      	SBCI R31,HIGH(-_packet)
001740 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x3C:
001741 27ee      	CLR  R30
001742 bbe4      	OUT  0x14,R30
001743 efef      	LDI  R30,LOW(255)
001744 bbe5      	OUT  0x15,R30
001745 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES
          SUBOPT_0x3D:
001746 e0e2      	LDI  R30,LOW(2)
001747 e0f0      	LDI  R31,HIGH(2)
001748 93fa      	ST   -Y,R31
001749 93ea      	ST   -Y,R30
00174a 940c 17d8 	JMP  _delay_ms
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x3E:
00174c 27ee      	CLR  R30
00174d 93ea      	ST   -Y,R30
00174e e2e1      	LDI  R30,LOW(33)
00174f 93ea      	ST   -Y,R30
001750 940c 1013 	JMP  _write_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x3F:
001752 e0ee      	LDI  R30,LOW(14)
001753 93ea      	ST   -Y,R30
001754 e5e8      	LDI  R30,LOW(88)
001755 93ea      	ST   -Y,R30
001756 940c 1013 	JMP  _write_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x40:
001758 93ea      	ST   -Y,R30
001759 940e 1013 	CALL _write_rtl
00175b e0ed      	LDI  R30,LOW(13)
00175c 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x41:
00175d 93ea      	ST   -Y,R30
00175e e0e2      	LDI  R30,LOW(2)
00175f 93ea      	ST   -Y,R30
001760 940c 1013 	JMP  _write_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES
          SUBOPT_0x42:
001762 93ea      	ST   -Y,R30
001763 e4e6      	LDI  R30,LOW(70)
001764 93ea      	ST   -Y,R30
001765 940c 1013 	JMP  _write_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES
          SUBOPT_0x43:
001767 27ee      	CLR  R30
001768 93ea      	ST   -Y,R30
001769 e2e2      	LDI  R30,LOW(34)
00176a 93ea      	ST   -Y,R30
00176b 940c 1013 	JMP  _write_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES
          SUBOPT_0x44:
00176d e0e7      	LDI  R30,LOW(7)
00176e 93ea      	ST   -Y,R30
00176f efef      	LDI  R30,LOW(255)
001770 93ea      	ST   -Y,R30
001771 940c 1013 	JMP  _write_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x45:
001773 27ee      	CLR  R30
001774 93ea      	ST   -Y,R30
001775 e6e2      	LDI  R30,LOW(98)
001776 93ea      	ST   -Y,R30
001777 940c 1013 	JMP  _write_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x46:
001779 50e4      	SUBI R30,LOW(4)
00177a 93ea      	ST   -Y,R30
00177b 940c 1013 	JMP  _write_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x47:
00177d e1e0      	LDI  R30,LOW(16)
00177e 93ea      	ST   -Y,R30
00177f 940c 1024 	JMP  _read_rtl
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x48:
001781 01df      	MOVW R26,R30
001782 91e0 054c 	LDS  R30,_byte_read
001784 93ec      	ST   X,R30
001785 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x49:
001786 93fa      	ST   -Y,R31
001787 93ea      	ST   -Y,R30
001788 e2e0      	LDI  R30,LOW(32)
001789 93ea      	ST   -Y,R30
00178a 940c 17cc 	JMP  _strpos
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES
          SUBOPT_0x4A:
00178c 27ff      	CLR  R31
00178d 01de      	MOVW R26,R28
00178e 9612      	ADIW R26,2
00178f 0fae      	ADD  R26,R30
001790 1fbf      	ADC  R27,R31
001791 27ee      	CLR  R30
001792 93ec      	ST   X,R30
001793 01fe      	MOVW R30,R28
001794 9632      	ADIW R30,2
001795 93fa      	ST   -Y,R31
001796 93ea      	ST   -Y,R30
001797 9508      	RET
         
         ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES
          SUBOPT_0x4B:
001798 93fa      	ST   -Y,R31
001799 93ea      	ST   -Y,R30
00179a 940e 179e 	CALL _strcmpf
00179c 30e0      	CPI  R30,0
00179d 9508      	RET
         
          _strcmpf:
00179e 91e9      	ld   r30,y+
00179f 91f9      	ld   r31,y+
0017a0 91a9      	ld   r26,y+
0017a1 91b9      	ld   r27,y+
          __strcmpf0:
0017a2 901d      	ld   r1,x+
0017a3 9005      	lpm  r0,z+
0017a4 1401      	cp   r0,r1
0017a5 f421      	brne __strcmpf1
0017a6 2000      	tst  r0
0017a7 f7d1      	brne __strcmpf0
0017a8 27ee      	clr  r30
0017a9 c002      	rjmp __strcmpf2
          __strcmpf1:
0017aa 1810      	sub  r1,r0
0017ab 2de1      	mov  r30,r1
          __strcmpf2:
0017ac 9508      	ret
         
          _strlenf:
0017ad 27aa      	clr  r26
0017ae 27bb      	clr  r27
0017af 91e9      	ld   r30,y+
0017b0 91f9      	ld   r31,y+
          __strlenf0:
0017b1 9005      	lpm  r0,z+
0017b2 2000      	tst  r0
0017b3 f011      	breq __strlenf1
0017b4 9611      	adiw r26,1
0017b5 cffb      	rjmp __strlenf0
          __strlenf1:
0017b6 01fd      	movw r30,r26
0017b7 9508      	ret
         
          _strncpy:
0017b8 9179      	ld   r23,y+
0017b9 91e9      	ld   r30,y+
0017ba 91f9      	ld   r31,y+
0017bb 91a9      	ld   r26,y+
0017bc 91b9      	ld   r27,y+
0017bd 01cd      	movw r24,r26
          __strncpy0:
0017be 2377      	tst  r23
0017bf f051      	breq __strncpy1
0017c0 957a      	dec  r23
0017c1 9161      	ld   r22,z+
0017c2 936d      	st   x+,r22
0017c3 2366      	tst  r22
0017c4 f7c9      	brne __strncpy0
          __strncpy2:
0017c5 2377      	tst  r23
0017c6 f019      	breq __strncpy1
0017c7 957a      	dec  r23
0017c8 936d      	st   x+,r22
0017c9 cffb      	rjmp __strncpy2
          __strncpy1:
0017ca 01fc      	movw r30,r24
0017cb 9508      	ret
         
          _strpos:
0017cc 9169      	ld   r22,y+
0017cd 91a9      	ld   r26,y+
0017ce 91b9      	ld   r27,y+
0017cf 27ee      	clr  r30
          __strpos0:
0017d0 917d      	ld   r23,x+
0017d1 1767      	cp   r22,r23
0017d2 f021      	breq __strpos1
0017d3 95e3      	inc  r30
0017d4 2377      	tst  r23
0017d5 f7d1      	brne __strpos0
0017d6 efef      	ldi  r30,-1
          __strpos1:
0017d7 9508      	ret
         
          _delay_ms:
0017d8 91e9      	ld   r30,y+
0017d9 91f9      	ld   r31,y+
0017da 9630      	adiw r30,0
0017db f039      	breq __delay_ms1
          __delay_ms0:
0017dc   +  	__DELAY_USW 0xFA0
0017dc ea80      	LDI  R24,LOW(0xfa0)
0017dd e09f      	LDI  R25,HIGH(0xfa0)
          __DELAY_USW_LOOP:
0017de 9701      	SBIW R24,1
0017df f7f1      	BRNE __DELAY_USW_LOOP
          	.ENDM
0017e0 95a8      	wdr
0017e1 9731      	sbiw r30,1
0017e2 f7c9      	brne __delay_ms0
          __delay_ms1:
0017e3 9508      	ret
         
          __SAVEISR:
0017e4 920a      	ST   -Y,R0
0017e5 921a      	ST   -Y,R1
0017e6 92fa      	ST   -Y,R15
0017e7 936a      	ST   -Y,R22
0017e8 937a      	ST   -Y,R23
0017e9 938a      	ST   -Y,R24
0017ea 939a      	ST   -Y,R25
0017eb 93aa      	ST   -Y,R26
0017ec 93ba      	ST   -Y,R27
0017ed 93ea      	ST   -Y,R30
0017ee 93fa      	ST   -Y,R31
0017ef b60f      	IN   R0,SREG
0017f0 920a      	ST   -Y,R0
0017f1 9508      	RET
         
          __LOADISR:
0017f2 9009      	LD   R0,Y+
0017f3 be0f      	OUT  SREG,R0
0017f4 91f9      	LD   R31,Y+
0017f5 91e9      	LD   R30,Y+
0017f6 91b9      	LD   R27,Y+
0017f7 91a9      	LD   R26,Y+
0017f8 9199      	LD   R25,Y+
0017f9 9189      	LD   R24,Y+
0017fa 9179      	LD   R23,Y+
0017fb 9169      	LD   R22,Y+
0017fc 90f9      	LD   R15,Y+
0017fd 9019      	LD   R1,Y+
0017fe 9009      	LD   R0,Y+
0017ff 9508      	RET
         
          __ADDD12:
001800 0fea      	ADD  R30,R26
001801 1ffb      	ADC  R31,R27
001802 1f68      	ADC  R22,R24
001803 1f79      	ADC  R23,R25
001804 9508      	RET
         
          __ADDD21:
001805 0fae      	ADD  R26,R30
001806 1fbf      	ADC  R27,R31
001807 1f86      	ADC  R24,R22
001808 1f97      	ADC  R25,R23
001809 9508      	RET
         
          __SUBD12:
00180a 1bea      	SUB  R30,R26
00180b 0bfb      	SBC  R31,R27
00180c 0b68      	SBC  R22,R24
00180d 0b79      	SBC  R23,R25
00180e 9508      	RET
         
          __LSLD12:
00180f 23ee      	TST  R30
001810 2e0e      	MOV  R0,R30
001811 01fd      	MOVW R30,R26
001812 01bc      	MOVW R22,R24
001813 f031      	BREQ __LSLD12R
          __LSLD12L:
001814 0fee      	LSL  R30
001815 1fff      	ROL  R31
001816 1f66      	ROL  R22
001817 1f77      	ROL  R23
001818 940a      	DEC  R0
001819 f7d1      	BRNE __LSLD12L
          __LSLD12R:
00181a 9508      	RET
         
          __LSRD16:
00181b 2fe6      	MOV  R30,R22
00181c 2ff7      	MOV  R31,R23
00181d 2766      	CLR  R22
00181e 2777      	CLR  R23
00181f 9508      	RET
         
          __LSLD16:
001820 2f6e      	MOV  R22,R30
001821 2f7f      	MOV  R23,R31
001822 27ee      	CLR  R30
001823 27ff      	CLR  R31
001824 9508      	RET
         
          __CWD2:
001825 2788      	CLR  R24
001826 2799      	CLR  R25
001827 ffb7      	SBRS R27,7
001828 9508      	RET
001829 ef8f      	SER  R24
00182a ef9f      	SER  R25
00182b 9508      	RET
         
          __COMD1:
00182c 95e0      	COM  R30
00182d 95f0      	COM  R31
00182e 9560      	COM  R22
00182f 9570      	COM  R23
001830 9508      	RET
         
          __MULW12U:
001831 9ffa      	MUL  R31,R26
001832 2df0      	MOV  R31,R0
001833 9feb      	MUL  R30,R27
001834 0df0      	ADD  R31,R0
001835 9fea      	MUL  R30,R26
001836 2de0      	MOV  R30,R0
001837 0df1      	ADD  R31,R1
001838 9508      	RET
         
          __SWAPD12:
001839 2e18      	MOV  R1,R24
00183a 2f86      	MOV  R24,R22
00183b 2d61      	MOV  R22,R1
00183c 2e19      	MOV  R1,R25
00183d 2f97      	MOV  R25,R23
00183e 2d71      	MOV  R23,R1
         
          __SWAPW12:
00183f 2e1b      	MOV  R1,R27
001840 2fbf      	MOV  R27,R31
001841 2df1      	MOV  R31,R1
         
          __SWAPB12:
001842 2e1a      	MOV  R1,R26
001843 2fae      	MOV  R26,R30
001844 2de1      	MOV  R30,R1
001845 9508      	RET
         
          __CPW02:
001846 2400      	CLR  R0
001847 160a      	CP   R0,R26
001848 060b      	CPC  R0,R27
001849 9508      	RET
         
          __CPD12:
00184a 17ea      	CP   R30,R26
00184b 07fb      	CPC  R31,R27
00184c 0768      	CPC  R22,R24
00184d 0779      	CPC  R23,R25
00184e 9508      	RET
         
          __CPD21:
00184f 17ae      	CP   R26,R30
001850 07bf      	CPC  R27,R31
001851 0786      	CPC  R24,R22
001852 0797      	CPC  R25,R23
001853 9508      	RET
         

Assembly complete with no errors.
